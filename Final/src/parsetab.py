
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolACCESS AND ARRAY ARROW ASSIGN BEGIN BODY BOX CHAR DOTDOT ELSE END FLOAT FOR FUNCTION GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LL LOOP MOD NEQ NuLL OF OR PRAGMA PROCEDURE RECORD RETURN RR STARSTAR STRING THEN TICK TYPE USE WHILE WITHgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\t   | access_decl\n\ttype_decl : TYPE IDENTIFIER ';'\n\taccess_decl : TYPE IDENTIFIER IS ACCESS name ';'\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\t\t| name '(' STRING ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\t\t\t\t| char_lit\n\t\t\t\t| NuLL\n\tchar_lit : CHAR\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'ARRAY':([84,],[130,]),'INT':([36,55,71,101,102,104,105,106,107,108,109,110,114,117,120,141,142,160,164,170,183,186,187,188,189,191,192,193,194,195,196,197,203,217,227,229,],[66,66,66,66,-75,-76,66,-80,66,-81,-79,-82,66,66,-61,66,66,66,66,66,66,-98,-61,-65,-64,-67,66,-68,-70,-71,-69,-72,66,66,66,66,]),'NEQ':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,193,-50,-51,]),'STARSTAR':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,93,96,147,152,153,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,110,-42,-86,-46,-47,-87,110,-78,-50,-51,]),'ELSE':([112,113,116,118,119,121,122,126,158,161,162,201,206,222,224,232,239,240,],[-90,-96,-95,-88,-92,-94,-93,-91,199,-124,-111,-112,-89,-99,-106,-101,-102,-100,]),'ARROW':([21,93,],[-45,141,]),'STRING':([101,],[149,]),'OR':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,155,159,184,185,219,231,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,188,-62,-50,-51,-66,-63,]),'.':([20,21,23,78,93,96,97,],[57,-45,-46,57,-46,-47,57,]),'<':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,196,-50,-51,]),'$end':([0,1,2,4,5,9,11,14,18,19,24,50,54,56,60,168,179,],[-128,-1,0,-8,-8,-139,-129,-140,-130,-132,-8,-113,-2,-9,-131,-123,-3,]),'FLOAT':([36,55,71,101,102,104,105,106,107,108,109,110,114,117,120,141,142,160,164,170,183,186,187,188,189,191,192,193,194,195,196,197,203,217,227,229,],[74,74,74,74,-75,-76,74,-80,74,-81,-79,-82,74,74,-61,74,74,74,74,74,74,-98,-61,-65,-64,-67,74,-68,-70,-71,-69,-72,74,74,74,74,]),'TYPE':([8,27,28,29,31,32,34,35,37,41,43,45,46,47,48,49,50,54,62,99,103,134,168,171,179,180,215,],[33,-39,-40,-13,33,-15,-12,-34,-11,-37,-14,-36,-10,-41,-35,-122,-113,-2,-38,-16,-97,-125,-123,-18,-3,-24,-17,]),'IS':([10,21,23,30,40,53,63,64,78,90,91,96,175,176,184,185,],[49,-45,-46,49,-21,-116,98,-43,-42,-117,-114,-47,-118,-115,-50,-51,]),'CHAR':([36,55,71,101,102,104,105,106,107,108,109,110,114,117,120,141,142,160,164,170,183,186,187,188,189,191,192,193,194,195,196,197,203,217,227,229,],[69,69,69,69,-75,-76,69,-80,69,-81,-79,-82,69,69,-61,69,69,69,69,69,69,-98,-61,-65,-64,-67,69,-68,-70,-71,-69,-72,69,69,69,69,]),'PROCEDURE':([0,1,4,5,7,8,9,11,12,14,18,19,24,25,26,27,28,29,31,32,34,35,37,41,43,45,46,47,48,49,50,51,54,56,58,60,61,62,87,99,103,134,168,171,179,180,215,],[-128,15,-8,-8,15,15,-139,-129,-137,-140,-130,-132,-8,-135,-137,-39,-40,-13,15,-15,-12,-34,-11,-37,-14,-36,-10,-41,-35,-122,-113,-133,-2,-9,-136,-131,-134,-38,-138,-16,-97,-125,-123,-18,-3,-24,-17,]),'RECORD':([98,230,],[145,238,]),'/':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,93,96,147,152,153,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,106,-42,-86,-46,-47,-87,106,-78,-50,-51,]),'WHILE':([81,112,113,116,118,119,121,122,125,126,161,162,167,190,199,201,205,206,218,221,222,224,225,232,234,240,],[120,-90,-96,-95,-88,-92,-94,-93,-61,-91,-124,-111,120,-61,-61,-112,120,-89,120,120,-99,-106,-61,-61,-61,-100,]),'MOD':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,93,96,147,152,153,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,108,-42,-86,-46,-47,-87,108,-78,-50,-51,]),'-':([21,23,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,93,95,96,100,147,151,152,153,157,163,177,184,185,200,210,219,237,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,104,-73,-42,-86,-46,104,-47,104,-87,104,-74,-78,104,104,104,-50,-51,104,104,104,104,]),'=':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,191,-50,-51,]),'IN':([165,],[203,]),'WITH':([0,1,4,5,7,9,11,12,14,18,19,24,25,26,50,51,54,56,58,60,61,87,134,168,179,],[-128,6,-8,-8,6,-139,-129,-137,-140,-130,-132,-8,-135,-137,-113,-133,-2,-9,-136,-131,-134,-138,-125,-123,-3,]),')':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,92,93,94,95,96,100,137,139,147,148,149,150,151,152,153,177,178,184,185,208,209,211,212,213,216,236,237,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-4,-46,143,-6,-47,147,-119,175,-87,184,185,-52,-54,-74,-78,-7,-5,-50,-51,-29,228,-44,-121,-120,-53,-30,-26,]),'ASSIGN':([21,23,38,40,64,78,96,115,184,185,],[-45,-46,80,-21,-43,-42,-47,160,-50,-51,]),';':([10,16,20,21,22,23,30,40,53,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,85,86,90,91,96,97,115,117,127,129,131,132,133,137,139,143,144,147,152,153,163,172,175,176,181,182,184,185,200,204,211,212,213,226,233,238,241,],[50,54,-48,-45,58,-46,50,-21,-116,99,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,103,-73,-42,-86,-126,134,-117,-114,-47,-49,161,162,168,-25,171,-22,-23,-119,174,179,180,-87,-74,-78,201,-127,-118,-115,214,215,-50,-51,222,224,-44,-121,-120,-27,240,-31,-109,]),'NuLL':([36,55,71,101,102,104,105,106,107,108,109,110,114,117,120,141,142,160,164,170,183,186,187,188,189,191,192,193,194,195,196,197,203,217,227,229,],[68,68,68,68,-75,-76,68,-80,68,-81,-79,-82,68,68,-61,68,68,68,68,68,68,-98,-61,-65,-64,-67,68,-68,-70,-71,-69,-72,68,68,68,68,]),'PRAGMA':([0,4,5,7,8,9,12,14,18,19,24,25,26,27,28,29,31,32,34,35,37,41,43,45,46,47,48,49,50,51,54,56,58,60,61,62,87,99,103,134,168,171,179,180,215,],[3,-8,-8,3,3,-139,-137,-140,3,3,-8,-135,-137,-39,-40,-13,3,-15,-12,-34,-11,-37,-14,-36,-10,-41,-35,-122,-113,-133,-2,-9,-136,3,-134,-38,-138,-16,-97,-125,-123,-18,-3,-24,-17,]),'OF':([169,228,],[207,-28,]),',':([20,21,22,23,38,40,42,64,65,66,67,68,69,70,72,73,74,75,77,78,79,85,86,92,93,94,95,96,97,128,136,138,147,148,150,151,152,153,172,177,178,184,185,208,209,216,236,237,],[-48,-45,59,-46,-19,-21,83,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-126,135,-4,-46,142,-6,-47,-49,-20,83,-19,-87,183,-52,-54,-74,-78,-127,-7,-5,-50,-51,-29,227,-53,-30,-26,]),':':([21,23,38,40,42,64,78,96,128,136,138,154,184,185,211,212,],[-45,-46,-19,-21,84,-43,-42,-47,-20,173,-19,186,-50,-51,-44,-121,]),'>':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,195,-50,-51,]),'(':([16,17,21,23,36,40,52,53,55,64,71,73,78,85,93,96,101,102,104,105,106,107,108,109,110,114,115,117,120,129,130,141,142,160,164,170,172,176,182,183,184,185,186,187,188,189,191,192,193,194,195,196,197,203,211,217,227,229,],[-45,55,-45,-46,71,-21,88,88,71,-43,71,101,-42,101,-46,-47,71,-75,-76,71,-80,71,-81,-79,-82,71,101,71,-61,101,170,71,71,71,71,71,101,101,101,71,-50,-51,-98,-61,-65,-64,-67,71,-68,-70,-71,-69,-72,71,101,71,71,71,]),'IF':([81,112,113,116,118,119,121,122,125,126,161,162,167,190,199,201,205,206,218,220,221,222,224,225,232,234,240,],[114,-90,-96,-95,-88,-92,-94,-93,-61,-91,-124,-111,114,-61,-61,-112,114,-89,114,233,114,-99,-106,-61,-61,-61,-100,]),'THEN':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,155,156,159,184,185,219,231,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,-103,190,-62,-50,-51,-66,-63,]),'END':([82,112,113,116,118,119,121,122,125,126,158,161,162,198,201,206,214,222,224,225,232,234,239,240,],[127,-90,-96,-95,-88,-92,-94,-93,-110,-91,-104,-124,-111,220,-112,-89,230,-99,-106,235,-101,-105,-102,-100,]),'LAMBDA':([80,],[111,]),'IDENTIFIER':([3,6,8,13,15,27,28,29,31,32,33,34,35,36,37,41,43,44,45,46,47,48,49,50,54,55,57,59,62,71,81,83,84,88,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,125,126,134,135,140,141,142,145,146,160,161,162,164,167,168,170,171,173,174,179,180,183,186,187,188,189,190,191,192,193,194,195,196,197,199,201,203,205,206,207,214,215,217,218,221,222,224,225,227,229,232,234,240,],[16,21,40,40,40,-39,-40,-13,40,-15,63,-12,-34,21,-11,-37,-14,21,-36,-10,-41,-35,-122,-113,-2,21,21,21,-38,21,21,40,21,40,-16,21,-75,-97,-76,21,-80,21,-81,-79,-82,40,-90,-96,21,-95,21,-88,-92,-61,-94,-93,165,-61,-91,-125,21,21,21,21,40,21,21,-124,-111,21,21,-123,21,-18,21,40,-3,-24,21,-98,-61,-65,-64,-61,-67,21,-68,-70,-71,-69,-72,-61,-112,21,21,-89,21,40,-17,21,21,21,-99,-106,-61,21,21,-61,-61,-100,]),'+':([21,23,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,93,95,96,100,147,151,152,153,157,163,177,184,185,200,210,219,237,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,102,-73,-42,-86,-46,102,-47,102,-87,102,-74,-78,102,102,102,-50,-51,102,102,102,102,]),'RETURN':([40,52,81,89,90,112,113,116,118,119,121,122,125,126,161,162,167,175,190,199,201,205,206,218,221,222,224,225,232,234,240,],[-21,-116,117,140,-117,-90,-96,-95,-88,-92,-94,-93,-61,-91,-124,-111,117,-118,-61,-61,-112,117,-89,117,117,-99,-106,-61,-61,-61,-100,]),'FOR':([81,112,113,116,118,119,121,122,125,126,161,162,167,190,199,201,205,206,218,221,222,224,225,232,234,240,],[123,-90,-96,-95,-88,-92,-94,-93,-61,-91,-124,-111,123,-61,-61,-112,123,-89,123,123,-99,-106,-61,-61,-61,-100,]),'FUNCTION':([0,1,4,5,7,8,9,11,12,14,18,19,24,25,26,27,28,29,31,32,34,35,37,41,43,45,46,47,48,49,50,51,54,56,58,60,61,62,87,99,103,134,168,171,179,180,215,],[-128,13,-8,-8,13,13,-139,-129,-137,-140,-130,-132,-8,-135,-137,-39,-40,-13,13,-15,-12,-34,-11,-37,-14,-36,-10,-41,-35,-122,-113,-133,-2,-9,-136,-131,-134,-38,-138,-16,-97,-125,-123,-18,-3,-24,-17,]),'USE':([8,12,26,27,28,29,31,32,34,35,37,41,43,45,46,47,48,49,50,51,54,58,61,62,87,99,103,134,168,171,179,180,215,],[44,-137,-137,-39,-40,-13,44,-15,-12,-34,-11,-37,-14,-36,-10,-41,-35,-122,-113,44,-2,-136,44,-38,-138,-16,-97,-125,-123,-18,-3,-24,-17,]),'BEGIN':([8,27,28,29,31,32,34,35,37,39,41,43,45,46,47,48,49,50,54,62,99,103,134,168,171,179,180,215,],[-32,-39,-40,-13,-33,-15,-12,-34,-11,81,-37,-14,-36,-10,-41,-35,-122,-113,-2,-38,-16,-97,-125,-123,-18,-3,-24,-17,]),'AND':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,155,159,184,185,219,231,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,189,-62,-50,-51,-66,-63,]),'LOOP':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,124,147,152,153,155,159,166,184,185,202,219,223,231,235,237,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-61,-87,-74,-78,-103,-62,205,-50,-51,-107,-66,-108,-63,241,-26,]),'*':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,93,96,147,152,153,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,109,-42,-86,-46,-47,-87,109,-78,-50,-51,]),'ACCESS':([98,],[146,]),'LEQ':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,194,-50,-51,]),'DOTDOT':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,184,185,210,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,-50,-51,229,]),'GEQ':([21,23,64,65,66,67,68,69,70,72,73,74,75,77,78,79,96,147,152,153,157,184,185,],[-45,-46,-43,-55,-59,-77,-57,-58,-84,-83,-85,-60,-56,-73,-42,-86,-47,-87,-74,-78,197,-50,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'param':([88,111,145,174,214,],[137,154,137,213,213,]),'body':([8,31,],[27,27,]),'iter_index_constraint':([130,],[169,]),'context_spec':([1,],[7,]),'goal_symbol':([0,],[2,]),'decl_item':([8,31,],[28,28,]),'c_name_list':([6,],[22,]),'factor':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[67,67,67,67,67,153,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'relation':([114,164,217,],[159,159,231,]),'record_def':([98,],[144,]),'simple_name':([3,6,36,44,55,57,59,71,81,84,101,105,107,114,117,135,140,141,142,146,160,164,167,170,173,183,192,203,205,207,217,218,221,227,229,],[17,23,23,23,93,96,23,23,23,23,23,23,23,23,23,23,23,23,93,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'subprog_decl':([1,7,8,31,],[9,9,29,29,]),'subprog_spec':([1,7,8,31,],[10,10,30,30,]),'type_ind':([84,207,],[132,226,]),'decl_item_or_body_s':([8,],[31,]),'use_clause_opt':([12,26,],[51,61,]),'pragma_arg_s':([55,],[94,]),'with_clause':([1,7,],[12,26,]),'numeric_lit':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'indexed_comp':([36,44,55,71,81,84,101,105,107,114,117,135,140,141,142,146,160,164,167,170,173,183,192,203,205,207,217,218,221,227,229,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'char_lit':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'condition':([114,164,],[156,202,]),'subprog_spec_is_push':([1,7,8,31,],[8,8,8,8,]),'M':([120,124,125,187,190,199,225,232,234,],[164,166,167,217,218,221,167,167,167,]),'parenthesized_primary':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'simple_stmt':([81,167,205,218,221,],[112,112,112,112,112,]),'pragma_s':([4,5,24,],[18,19,60,]),'cond_clause':([114,],[158,]),'object_type_def':([84,],[131,]),'compound_name':([6,36,44,55,59,71,81,84,101,105,107,114,117,135,140,141,142,146,160,164,167,170,173,183,192,203,205,207,217,218,221,227,229,],[20,78,78,78,97,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'range':([170,203,227,],[208,223,236,]),'decl':([8,31,],[35,35,]),'name_s':([44,],[86,]),'lambda_begin':([8,31,],[36,36,]),'block_body':([39,],[82,]),'expression':([114,164,],[155,155,]),'access_decl':([8,31,],[32,32,]),'else_opt':([158,],[198,]),'adding':([76,95,100,151,157,163,177,200,210,219,237,],[105,105,105,105,105,105,105,105,105,105,105,]),'unit':([1,7,],[5,24,]),'primary':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'type_decl':([8,31,],[37,37,]),'subprog_body':([1,7,8,31,],[14,14,47,47,]),'relational':([157,],[192,]),'return_stmt':([81,167,205,218,221,],[122,122,122,122,122,]),'compound_stmt':([81,167,205,218,221,],[126,126,126,126,126,]),'multiplying':([77,152,],[107,107,]),'pragma_arg':([55,142,],[92,178,]),'literal':([36,55,71,101,105,107,114,117,141,142,160,164,170,183,192,203,217,227,229,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'comp_unit':([1,],[11,]),'formal_part_opt':([52,53,],[89,91,]),'formal_part':([52,53,],[90,90,]),'pragma':([0,7,8,18,19,31,60,],[4,25,45,56,56,45,56,]),'mark':([173,],[212,]),'basic_loop':([166,],[204,]),'assign_stmt':([81,167,205,218,221,],[119,119,119,119,119,]),'def_id':([8,13,15,31,83,88,111,145,174,214,],[38,52,53,38,128,138,138,138,138,138,]),'decl_part':([8,],[39,]),'loop_stmt':([81,167,205,218,221,],[113,113,113,113,113,]),'name':([36,44,55,71,81,84,101,105,107,114,117,135,140,141,142,146,160,164,167,170,173,183,192,203,205,207,217,218,221,227,229,],[73,85,73,73,115,129,73,73,73,73,73,172,176,73,73,182,73,73,115,73,211,73,73,73,115,129,73,115,115,73,73,]),'value':([101,183,],[150,216,]),'if_stmt':([81,167,205,218,221,],[116,116,116,116,116,]),'decl_item_or_body':([8,31,],[41,62,]),'record_decl':([8,31,],[34,34,]),'statement_s':([81,205,218,221,],[125,225,232,234,]),'lambda_decl':([8,31,],[43,43,]),'def_id_s':([8,31,88,111,145,174,214,],[42,42,136,136,136,136,136,]),'term':([36,55,71,101,105,114,117,141,142,160,164,170,183,192,203,217,227,229,],[77,77,77,77,152,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'logical':([155,],[187,]),'value_s':([101,],[148,]),'range_s':([170,],[209,]),'procedure_call':([81,167,205,218,221,],[121,121,121,121,121,]),'simple_expression':([36,55,71,101,114,117,141,142,160,164,170,183,192,203,217,227,229,],[76,95,100,151,157,163,177,95,200,157,210,151,219,210,157,210,237,]),'N':([232,],[239,]),'object_decl':([8,31,],[46,46,]),'compilation':([0,],[1,]),'use_clause':([8,31,51,61,],[48,48,87,87,]),'iteration':([81,167,205,218,221,],[124,124,124,124,124,]),'param_s':([88,145,],[139,181,]),'statement':([81,167,205,218,221,],[118,206,118,118,118,]),'array_type':([84,],[133,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',20),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',28),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',29),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',33),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',34),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',39),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',40),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',44),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',45),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',50),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',51),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',52),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',53),
  ('decl -> access_decl','decl',1,'p_decl','grammar.py',54),
  ('type_decl -> TYPE IDENTIFIER ;','type_decl',3,'p_type_decl','grammar.py',59),
  ('access_decl -> TYPE IDENTIFIER IS ACCESS name ;','access_decl',6,'p_access_decl','grammar.py',74),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',92),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',127),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',128),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',133),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',138),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',139),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',144),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',163),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',168),
  ('array_type -> ARRAY iter_index_constraint OF type_ind','array_type',4,'p_array_type','grammar.py',179),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',192),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',197),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',198),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',203),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',208),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',209),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',213),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',214),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',215),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',220),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',221),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',226),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',227),
  ('body -> subprog_body','body',1,'p_body','grammar.py',232),
  ('name -> compound_name','name',1,'p_name','grammar.py',238),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',239),
  ('mark -> name','mark',1,'p_mark','grammar.py',247),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',252),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',257),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',258),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',266),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',267),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',272),
  ('indexed_comp -> name ( STRING )','indexed_comp',4,'p_indexed_comp','grammar.py',273),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',403),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',404),
  ('value -> simple_expression','value',1,'p_value','grammar.py',409),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',414),
  ('literal -> char_lit','literal',1,'p_literal','grammar.py',415),
  ('literal -> NuLL','literal',1,'p_literal','grammar.py',416),
  ('char_lit -> CHAR','char_lit',1,'p_char_lit','grammar.py',421),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',426),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',431),
  ('M -> <empty>','M',0,'p_M','grammar.py',436),
  ('expression -> relation','expression',1,'p_expression','grammar.py',441),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',442),
  ('logical -> AND','logical',1,'p_logical','grammar.py',464),
  ('logical -> OR','logical',1,'p_logical','grammar.py',465),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',470),
  ('relational -> =','relational',1,'p_relational','grammar.py',485),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',486),
  ('relational -> <','relational',1,'p_relational','grammar.py',487),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',488),
  ('relational -> >','relational',1,'p_relational','grammar.py',489),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',490),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',495),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',496),
  ('adding -> +','adding',1,'p_adding','grammar.py',543),
  ('adding -> -','adding',1,'p_adding','grammar.py',544),
  ('term -> factor','term',1,'p_term','grammar.py',549),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',550),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',586),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',587),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',588),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',589),
  ('factor -> primary','factor',1,'p_factor','grammar.py',595),
  ('primary -> literal','primary',1,'p_primary','grammar.py',600),
  ('primary -> name','primary',1,'p_primary','grammar.py',601),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',602),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',607),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',612),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',613),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',622),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',623),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',629),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',630),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',631),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',636),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',637),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',642),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',650),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',662),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',688),
  ('N -> <empty>','N',0,'p_N','grammar.py',696),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',703),
  ('condition -> expression','condition',1,'p_condition','grammar.py',710),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',721),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',722),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',732),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',741),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',742),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',760),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',765),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',770),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',771),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',780),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',785),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',786),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',804),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',805),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',810),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',815),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',816),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',824),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',838),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',850),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',863),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',871),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',876),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',877),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',882),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',883),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',884),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',888),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',889),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',893),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',894),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',895),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',899),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',903),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',904),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',908),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',909),
]
