
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolACCESS AND ARRAY ARROW ASSIGN BEGIN BODY BOX CHAR DOTDOT ELSE END FLOAT FOR FUNCTION GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LL LOOP MOD NEQ OF OR PRAGMA PROCEDURE RECORD RETURN RR STARSTAR STRING THEN TICK TYPE USE WHILE WITHgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\t   | access_decl\n\ttype_decl : TYPE IDENTIFIER ';'\n\taccess_decl : TYPE IDENTIFIER IS ACCESS name ';'\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\t\t| name '(' STRING ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\t\t\t\t| char_lit\n\tchar_lit : CHAR\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'(':([5,6,19,21,22,23,25,27,46,57,62,63,66,74,87,96,97,98,99,100,102,103,104,105,106,107,114,125,126,130,131,138,140,153,162,164,175,177,179,180,181,183,185,188,193,197,198,199,200,201,202,203,204,205,206,223,226,227,],[19,-45,57,76,-21,76,-46,-45,57,57,-42,-43,103,-46,103,-78,57,-79,-80,-81,57,57,-75,-74,57,57,-47,-60,103,57,57,103,177,103,57,57,103,57,-51,-50,57,103,-97,103,57,-64,-60,-63,-69,-70,-71,-66,-68,-67,57,57,57,57,]),'FUNCTION':([0,3,4,8,11,13,14,15,16,17,18,20,28,29,30,31,32,33,36,37,38,41,42,44,45,47,49,50,51,52,53,54,55,56,79,82,92,93,94,116,134,136,145,174,176,187,215,],[-127,7,-8,-139,7,7,-8,-136,-128,-138,-129,-2,-41,-15,-35,7,-39,-14,-40,-10,-12,-13,-37,-34,-11,-36,-112,-121,-8,-136,-134,-131,-132,-9,-135,-38,-130,-133,-137,-16,-124,-96,-3,-122,-18,-24,-17,]),'BEGIN':([11,20,28,29,30,31,32,33,36,37,38,40,41,42,44,45,47,49,50,82,116,134,136,145,174,176,187,215,],[-32,-2,-41,-15,-35,-33,-39,-14,-40,-10,-12,85,-13,-37,-34,-11,-36,-112,-121,-38,-16,-124,-96,-3,-122,-18,-24,-17,]),'.':([25,26,27,62,74,113,114,],[-46,81,-45,81,-46,81,-47,]),'=':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,203,-51,-50,]),'ASSIGN':([22,25,27,35,62,63,114,126,179,180,],[-21,-46,-45,83,-42,-43,-47,164,-51,-50,]),'PROCEDURE':([0,3,4,8,11,13,14,15,16,17,18,20,28,29,30,31,32,33,36,37,38,41,42,44,45,47,49,50,51,52,53,54,55,56,79,82,92,93,94,116,134,136,145,174,176,187,215,],[-127,9,-8,-139,9,9,-8,-136,-128,-138,-129,-2,-41,-15,-35,9,-39,-14,-40,-10,-12,-13,-37,-34,-11,-36,-112,-121,-8,-136,-134,-131,-132,-9,-135,-38,-130,-133,-137,-16,-124,-96,-3,-122,-18,-24,-17,]),'AND':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,168,169,179,180,224,234,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,199,-61,-51,-50,-65,-62,]),',':([22,24,25,26,27,35,48,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,87,88,110,112,113,114,137,143,144,146,147,149,150,151,152,175,179,180,209,211,213,235,236,],[-21,80,-46,-48,-45,-19,90,-4,-72,-56,-55,-42,-43,102,-85,-84,-59,-57,-76,-83,-58,-82,-6,-46,-125,135,90,-19,-49,-47,-20,-86,-77,-5,-52,181,-54,-73,-7,-126,-51,-50,226,-29,-53,-30,-26,]),'MOD':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,74,114,143,144,151,179,180,],[-46,-45,99,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-46,-47,-86,-77,99,-51,-50,]),'/':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,74,114,143,144,151,179,180,],[-46,-45,98,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-46,-47,-86,-77,98,-51,-50,]),'NEQ':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,205,-51,-50,]),'IN':([165,],[193,]),'WHILE':([85,118,119,120,121,122,123,127,129,132,163,171,173,190,194,196,207,208,216,217,218,220,222,231,233,239,],[125,-87,-89,-91,-92,-90,-95,-94,-93,-60,-123,-110,125,125,-60,-60,-111,-88,-105,-60,-98,125,125,-60,-60,-99,]),'ACCESS':([117,],[160,]),'LEQ':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,200,-51,-50,]),'FOR':([85,118,119,120,121,122,123,127,129,132,163,171,173,190,194,196,207,208,216,217,218,220,222,231,233,239,],[128,-87,-89,-91,-92,-90,-95,-94,-93,-60,-123,-110,128,128,-60,-60,-111,-88,-105,-60,-98,128,128,-60,-60,-99,]),'TYPE':([11,20,28,29,30,31,32,33,36,37,38,41,42,44,45,47,49,50,82,116,134,136,145,174,176,187,215,],[39,-2,-41,-15,-35,39,-39,-14,-40,-10,-12,-13,-37,-34,-11,-36,-112,-121,-38,-16,-124,-96,-3,-122,-18,-24,-17,]),'$end':([0,2,3,4,8,14,16,17,18,20,49,51,54,56,92,145,174,],[-127,0,-1,-8,-139,-8,-128,-138,-129,-2,-112,-8,-131,-9,-130,-3,-122,]),'*':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,74,114,143,144,151,179,180,],[-46,-45,96,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-46,-47,-86,-77,96,-51,-50,]),'OR':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,168,169,179,180,224,234,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,197,-61,-51,-50,-65,-62,]),'LAMBDA':([83,],[115,]),'DOTDOT':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,179,180,210,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,-51,-50,227,]),'RECORD':([117,229,],[158,237,]),'RETURN':([21,22,75,77,85,118,119,120,121,122,123,127,129,132,155,163,171,173,190,194,196,207,208,216,217,218,220,222,231,233,239,],[-115,-21,108,-116,131,-87,-89,-91,-92,-90,-95,-94,-93,-60,-117,-123,-110,131,131,-60,-60,-111,-88,-105,-60,-98,131,131,-60,-60,-99,]),'LOOP':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,124,143,144,151,161,168,169,179,180,191,219,224,230,234,236,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-60,-86,-77,-73,190,-102,-61,-51,-50,-106,-107,-65,238,-62,-26,]),'END':([86,118,119,120,121,122,123,127,129,132,163,166,171,195,207,208,214,216,217,218,231,233,239,240,],[133,-87,-89,-91,-92,-90,-95,-94,-93,-109,-123,-103,-110,221,-111,-88,229,-105,230,-98,-104,-100,-99,-101,]),'ELSE':([118,119,120,121,122,123,127,129,163,166,171,207,208,216,218,233,239,240,],[-87,-89,-91,-92,-90,-95,-94,-93,-123,194,-110,-111,-88,-105,-98,-100,-99,-101,]),'OF':([178,225,],[212,-28,]),'ARROW':([27,74,],[-45,107,]),'GEQ':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,202,-51,-50,]),'IDENTIFIER':([1,7,9,10,11,19,20,28,29,30,31,32,33,36,37,38,39,41,42,43,44,45,46,47,49,50,57,76,80,81,82,85,90,91,96,97,98,99,100,102,103,104,105,106,107,108,115,116,118,119,120,121,122,123,125,127,128,129,130,131,132,134,135,136,145,154,156,158,160,162,163,164,171,173,174,176,177,181,185,187,190,193,194,196,197,198,199,200,201,202,203,204,205,206,207,208,212,214,215,216,217,218,220,222,223,226,227,231,233,239,],[6,22,22,27,22,27,-2,-41,-15,-35,22,-39,-14,-40,-10,-12,84,-13,-37,27,-34,-11,27,-36,-112,-121,27,22,27,27,-38,27,22,27,-78,27,-79,-80,-81,27,27,-75,-74,27,27,27,22,-16,-87,-89,-91,-92,-90,-95,-60,-94,165,-93,27,27,-60,-124,27,-96,-3,22,27,22,27,27,-123,27,-110,27,-122,-18,27,27,-97,-24,27,27,-60,-60,-64,-60,-63,-69,-70,-71,-66,-68,-67,27,-111,-88,27,22,-17,-105,-60,-98,27,27,27,27,27,-60,-60,-99,]),'STARSTAR':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,74,114,143,144,151,179,180,],[-46,-45,100,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-46,-47,-86,-77,100,-51,-50,]),'WITH':([0,3,4,8,13,14,15,16,17,18,20,49,51,52,53,54,55,56,79,92,93,94,134,145,174,],[-127,10,-8,-139,10,-8,-136,-128,-138,-129,-2,-112,-8,-136,-134,-131,-132,-9,-135,-130,-133,-137,-124,-3,-122,]),'STRING':([103,],[148,]),'USE':([11,15,20,28,29,30,31,32,33,36,37,38,41,42,44,45,47,49,50,52,55,79,82,93,94,116,134,136,145,174,176,187,215,],[43,-136,-2,-41,-15,-35,43,-39,-14,-40,-10,-12,-13,-37,-34,-11,-36,-112,-121,-136,43,-135,-38,43,-137,-16,-124,-96,-3,-122,-18,-24,-17,]),'FLOAT':([19,46,57,96,97,98,99,100,102,103,104,105,106,107,125,130,131,162,164,177,181,185,193,197,198,199,200,201,202,203,204,205,206,223,226,227,],[67,67,67,-78,67,-79,-80,-81,67,67,-75,-74,67,67,-60,67,67,67,67,67,67,-97,67,-64,-60,-63,-69,-70,-71,-66,-68,-67,67,67,67,67,]),'+':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,89,95,114,143,144,150,151,152,170,172,179,180,192,210,224,236,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,105,-46,105,105,-47,-86,-77,105,-73,105,105,105,-51,-50,105,105,105,105,]),'IS':([12,22,23,25,27,34,62,63,77,78,84,114,153,155,179,180,],[50,-21,-115,-46,-45,50,-42,-43,-116,-113,117,-47,-114,-117,-51,-50,]),'PRAGMA':([0,4,8,11,13,14,15,17,18,20,28,29,30,31,32,33,36,37,38,41,42,44,45,47,49,50,51,52,53,54,55,56,79,82,92,93,94,116,134,136,145,174,176,187,215,],[1,-8,-139,1,1,-8,-136,-138,1,-2,-41,-15,-35,1,-39,-14,-40,-10,-12,-13,-37,-34,-11,-36,-112,-121,-8,-136,-134,1,-132,-9,-135,-38,1,-133,-137,-16,-124,-96,-3,-122,-18,-24,-17,]),'-':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74,89,95,114,143,144,150,151,152,170,172,179,180,192,210,224,236,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,104,-46,104,104,-47,-86,-77,104,-73,104,104,104,-51,-50,104,104,104,104,]),')':([25,27,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,95,109,111,114,143,144,146,147,148,149,150,151,152,179,180,182,183,184,209,211,213,235,236,],[-46,-45,-4,-72,-56,-55,-42,-43,101,-85,-84,-59,-57,-76,-83,-58,-82,-6,-46,143,155,-118,-47,-86,-77,-5,-52,179,180,-54,-73,-7,-51,-50,-119,-44,-120,225,-29,-53,-30,-26,]),'THEN':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,167,168,169,179,180,224,234,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,196,-102,-61,-51,-50,-65,-62,]),'ARRAY':([91,],[140,]),'>':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,201,-51,-50,]),'IF':([85,118,119,120,121,122,123,127,129,132,163,171,173,190,194,196,207,208,216,217,218,220,221,222,231,233,239,],[130,-87,-89,-91,-92,-90,-95,-94,-93,-60,-123,-110,130,130,-60,-60,-111,-88,-105,-60,-98,130,232,130,-60,-60,-99,]),'<':([25,27,59,60,61,62,63,65,66,67,68,69,70,71,72,114,143,144,151,170,179,180,],[-46,-45,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-47,-86,-77,-73,204,-51,-50,]),'INT':([19,46,57,96,97,98,99,100,102,103,104,105,106,107,125,130,131,162,164,177,181,185,193,197,198,199,200,201,202,203,204,205,206,223,226,227,],[71,71,71,-78,71,-79,-80,-81,71,71,-75,-74,71,71,-60,71,71,71,71,71,71,-97,71,-64,-60,-63,-69,-70,-71,-66,-68,-67,71,71,71,71,]),';':([6,12,22,23,24,25,26,27,34,59,60,61,62,63,65,66,67,68,69,70,71,72,77,78,84,87,88,89,101,109,111,113,114,126,131,133,138,139,141,142,143,144,151,153,155,159,172,175,179,180,182,183,184,186,188,189,192,228,232,237,238,],[20,49,-21,-115,79,-46,-48,-45,49,-72,-56,-55,-42,-43,-85,-84,-59,-57,-76,-83,-58,-82,-116,-113,116,-125,134,136,145,154,-118,-49,-47,163,171,174,-25,176,-23,-22,-86,-77,-73,-114,-117,187,207,-126,-51,-50,-119,-44,-120,214,215,216,218,-27,239,-31,-108,]),'CHAR':([19,46,57,96,97,98,99,100,102,103,104,105,106,107,125,130,131,162,164,177,181,185,193,197,198,199,200,201,202,203,204,205,206,223,226,227,],[68,68,68,-78,68,-79,-80,-81,68,68,-75,-74,68,68,-60,68,68,68,68,68,68,-97,68,-64,-60,-63,-69,-70,-71,-66,-68,-67,68,68,68,68,]),':':([22,25,27,35,48,62,63,110,112,114,137,157,179,180,183,184,],[-21,-46,-45,-19,91,-42,-43,156,-19,-47,-20,185,-51,-50,-44,-120,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'goal_symbol':([0,],[2,]),'simple_stmt':([85,173,190,220,222,],[119,119,119,119,119,]),'param_s':([76,158,],[109,186,]),'subprog_body':([3,11,13,31,],[8,28,8,28,]),'assign_stmt':([85,173,190,220,222,],[120,120,120,120,120,]),'formal_part_opt':([21,23,],[75,78,]),'unit':([3,13,],[14,51,]),'N':([233,],[240,]),'relation':([130,162,223,],[169,169,234,]),'M':([124,125,132,194,196,198,217,231,233,],[161,162,173,220,222,223,173,173,173,]),'loop_stmt':([85,173,190,220,222,],[123,123,123,123,123,]),'access_decl':([11,31,],[29,29,]),'multiplying':([59,151,],[97,97,]),'use_clause':([11,31,55,93,],[30,30,94,94,]),'else_opt':([166,],[195,]),'decl_item_or_body_s':([11,],[31,]),'value_s':([103,],[149,]),'numeric_lit':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'body':([11,31,],[32,32,]),'expression':([130,162,],[168,168,]),'compound_name':([10,19,43,46,57,80,85,91,97,102,103,106,107,108,130,131,135,156,160,162,164,173,177,181,190,193,206,212,220,222,223,226,227,],[26,62,62,62,62,113,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'subprog_spec':([3,11,13,31,],[12,34,12,34,]),'context_spec':([3,],[13,]),'iteration':([85,173,190,220,222,],[124,124,124,124,124,]),'def_id':([7,9,11,31,76,90,115,154,158,214,],[21,23,35,35,112,137,112,112,112,112,]),'decl_item':([11,31,],[36,36,]),'decl_part':([11,],[40,]),'parenthesized_primary':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'name':([19,43,46,57,85,91,97,102,103,106,107,108,130,131,135,156,160,162,164,173,177,181,190,193,206,212,220,222,223,226,227,],[66,87,66,66,126,138,66,66,66,66,66,153,66,66,175,183,188,66,66,126,66,66,126,66,66,138,126,126,66,66,66,]),'compilation':([0,],[3,]),'cond_clause':([130,],[166,]),'lambda_decl':([11,31,],[33,33,]),'statement_s':([85,190,220,222,],[132,217,231,233,]),'procedure_call':([85,173,190,220,222,],[129,129,129,129,129,]),'literal':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'def_id_s':([11,31,76,115,154,158,214,],[48,48,110,110,110,110,110,]),'relational':([170,],[206,]),'record_def':([117,],[159,]),'primary':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'simple_expression':([19,46,57,102,103,107,130,131,162,164,177,181,193,206,223,226,227,],[73,89,95,73,150,152,170,172,170,192,210,150,210,224,170,210,236,]),'statement':([85,173,190,220,222,],[118,208,118,118,118,]),'subprog_decl':([3,11,13,31,],[17,41,17,41,]),'comp_unit':([3,],[16,]),'pragma_s':([4,14,51,],[18,54,92,]),'decl_item_or_body':([11,31,],[42,82,]),'pragma_arg':([19,102,],[58,146,]),'condition':([130,162,],[167,191,]),'mark':([156,],[184,]),'block_body':([40,],[86,]),'use_clause_opt':([15,52,],[55,93,]),'value':([103,181,],[147,213,]),'iter_index_constraint':([140,],[178,]),'object_decl':([11,31,],[37,37,]),'range_s':([177,],[209,]),'name_s':([43,],[88,]),'param':([76,115,154,158,214,],[111,157,182,111,182,]),'subprog_spec_is_push':([3,11,13,31,],[11,11,11,11,]),'type_ind':([91,212,],[142,228,]),'term':([19,46,57,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[59,59,59,59,59,151,59,59,59,59,59,59,59,59,59,59,59,59,]),'char_lit':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'return_stmt':([85,173,190,220,222,],[121,121,121,121,121,]),'compound_stmt':([85,173,190,220,222,],[122,122,122,122,122,]),'indexed_comp':([19,43,46,57,85,91,97,102,103,106,107,108,130,131,135,156,160,162,164,173,177,181,190,193,206,212,220,222,223,226,227,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'formal_part':([21,23,],[77,77,]),'pragma_arg_s':([19,],[64,]),'decl':([11,31,],[44,44,]),'if_stmt':([85,173,190,220,222,],[127,127,127,127,127,]),'adding':([73,89,95,150,152,170,172,192,210,224,236,],[106,106,106,106,106,106,106,106,106,106,106,]),'type_decl':([11,31,],[45,45,]),'with_clause':([3,13,],[15,52,]),'lambda_begin':([11,31,],[46,46,]),'range':([177,193,226,],[211,219,235,]),'factor':([19,46,57,97,102,103,106,107,130,131,162,164,177,181,193,206,223,226,227,],[69,69,69,144,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'object_type_def':([91,],[139,]),'pragma':([0,11,13,18,31,54,92,],[4,47,53,56,47,56,56,]),'basic_loop':([161,],[189,]),'array_type':([91,],[141,]),'c_name_list':([10,],[24,]),'record_decl':([11,31,],[38,38,]),'logical':([168,],[198,]),'simple_name':([1,10,19,43,46,57,80,81,85,91,97,102,103,106,107,108,130,131,135,156,160,162,164,173,177,181,190,193,206,212,220,222,223,226,227,],[5,25,74,25,25,25,25,114,25,25,25,74,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',20),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',28),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',29),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',33),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',34),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',39),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',40),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',44),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',45),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',50),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',51),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',52),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',53),
  ('decl -> access_decl','decl',1,'p_decl','grammar.py',54),
  ('type_decl -> TYPE IDENTIFIER ;','type_decl',3,'p_type_decl','grammar.py',59),
  ('access_decl -> TYPE IDENTIFIER IS ACCESS name ;','access_decl',6,'p_access_decl','grammar.py',64),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',80),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',115),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',116),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',121),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',126),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',127),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',132),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',151),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',156),
  ('array_type -> ARRAY iter_index_constraint OF type_ind','array_type',4,'p_array_type','grammar.py',167),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',180),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',185),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',186),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',191),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',196),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',197),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',201),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',202),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',203),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',208),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',209),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',214),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',215),
  ('body -> subprog_body','body',1,'p_body','grammar.py',220),
  ('name -> compound_name','name',1,'p_name','grammar.py',226),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',227),
  ('mark -> name','mark',1,'p_mark','grammar.py',235),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',240),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',245),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',246),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',254),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',255),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',260),
  ('indexed_comp -> name ( STRING )','indexed_comp',4,'p_indexed_comp','grammar.py',261),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',391),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',392),
  ('value -> simple_expression','value',1,'p_value','grammar.py',397),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',402),
  ('literal -> char_lit','literal',1,'p_literal','grammar.py',403),
  ('char_lit -> CHAR','char_lit',1,'p_char_lit','grammar.py',408),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',413),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',418),
  ('M -> <empty>','M',0,'p_M','grammar.py',423),
  ('expression -> relation','expression',1,'p_expression','grammar.py',428),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',429),
  ('logical -> AND','logical',1,'p_logical','grammar.py',451),
  ('logical -> OR','logical',1,'p_logical','grammar.py',452),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',457),
  ('relational -> =','relational',1,'p_relational','grammar.py',472),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',473),
  ('relational -> <','relational',1,'p_relational','grammar.py',474),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',475),
  ('relational -> >','relational',1,'p_relational','grammar.py',476),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',477),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',482),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',483),
  ('adding -> +','adding',1,'p_adding','grammar.py',530),
  ('adding -> -','adding',1,'p_adding','grammar.py',531),
  ('term -> factor','term',1,'p_term','grammar.py',536),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',537),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',573),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',574),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',575),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',576),
  ('factor -> primary','factor',1,'p_factor','grammar.py',582),
  ('primary -> literal','primary',1,'p_primary','grammar.py',587),
  ('primary -> name','primary',1,'p_primary','grammar.py',588),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',589),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',594),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',599),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',600),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',609),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',610),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',616),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',617),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',618),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',623),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',624),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',629),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',637),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',649),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',675),
  ('N -> <empty>','N',0,'p_N','grammar.py',683),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',690),
  ('condition -> expression','condition',1,'p_condition','grammar.py',697),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',708),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',709),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',719),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',728),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',729),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',747),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',752),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',757),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',758),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',767),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',772),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',773),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',791),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',792),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',797),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',802),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',803),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',811),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',825),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',837),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',850),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',858),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',863),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',864),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',869),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',870),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',871),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',875),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',876),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',880),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',881),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',882),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',886),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',890),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',891),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',895),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',896),
]
