
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolACCESS AND ARRAY ARROW ASSIGN BEGIN BODY BOX CHAR DOTDOT ELSE END FLOAT FOR FUNCTION GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LL LOOP MOD NEQ NEW NuLL OF OR PRAGMA PROCEDURE RECORD RETURN RR STARSTAR STRING THEN TICK TYPE USE WHILE WITHgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\t   | access_decl\n\ttype_decl : TYPE IDENTIFIER ';'\n\taccess_decl : TYPE IDENTIFIER IS ACCESS name ';'\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\tderived_type : NEW type_ind\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\t\t| name '(' STRING ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\t\t\t\t| char_lit\n\t\t\t\t| NuLL\n\tchar_lit : CHAR\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | unary term\n\t   | simple_expression adding term\n\tunary : '+'\n\t\t\t| '-'\n\tadding  : '+'\n\t   | '-'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\t\t\t\t\t| name ASSIGN derived_type ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\t\t\t| def_id_s ':' array_type\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'FLOAT':([19,48,60,64,70,77,99,100,101,102,103,104,105,106,107,108,111,122,132,134,163,166,178,186,191,199,200,201,205,206,207,208,209,210,211,217,228,234,236,],[58,58,-77,-78,58,58,-86,58,-84,-85,-83,58,-79,-80,58,58,58,-62,58,58,58,58,58,58,58,-62,-65,-66,-72,-71,58,-68,-73,-70,-69,-102,58,58,58,]),'ACCESS':([146,],[181,]),'ARROW':([25,65,],[-46,107,]),',':([22,23,24,25,30,42,44,57,58,59,61,62,63,65,66,67,68,69,71,72,73,74,75,76,78,94,95,112,113,114,115,116,136,148,149,150,151,153,155,156,157,180,184,185,215,216,221,244,245,],[-49,-47,81,-46,-21,91,-19,-74,-61,-88,-81,-6,-43,-47,108,-58,-57,-90,-4,-60,-87,-89,-44,-56,-59,-132,144,-75,-48,-50,91,-19,-20,-82,-76,-7,-5,-91,-55,186,-53,-133,-52,-51,236,-30,-54,-27,-31,]),'+':([19,23,25,48,57,58,59,61,62,63,65,67,68,69,70,72,73,74,75,76,78,96,107,108,110,111,112,113,122,132,134,148,149,150,153,155,163,166,172,174,178,184,185,186,191,197,199,200,201,205,206,207,208,209,210,211,214,217,228,232,234,236,244,],[60,-47,-46,60,-74,-61,-88,-81,105,-43,-47,-58,-57,-90,60,-60,-87,-89,-44,-56,-59,105,60,60,105,60,-75,-48,-62,60,60,-82,-76,105,-91,105,60,60,105,105,60,-52,-51,60,60,105,-62,-65,-66,-72,-71,60,-68,-73,-70,-69,105,-102,60,105,60,60,105,]),'.':([22,23,25,63,65,113,114,],[79,-47,-46,79,-47,-48,79,]),'LEQ':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,206,-52,-51,]),'LOOP':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,127,148,149,153,164,168,171,184,185,192,222,232,239,240,244,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-62,-82,-76,-91,193,-108,-63,-52,-51,-112,-113,-67,247,-64,-27,]),'*':([23,25,57,58,59,61,63,65,67,68,69,72,73,74,75,76,78,112,113,148,149,153,184,185,],[-47,-46,103,-61,-88,-81,-43,-47,-58,-57,-90,-60,-87,-89,-44,-56,-59,103,-48,-82,103,-91,-52,-51,]),';':([6,18,22,23,24,25,29,30,41,57,58,59,61,63,67,68,69,72,73,74,75,76,78,84,86,94,95,96,97,109,112,113,114,117,118,130,134,135,137,138,139,140,148,149,153,159,161,174,180,183,184,185,187,188,189,190,194,196,197,218,219,227,233,241,247,250,],[20,55,-49,-47,80,-46,-121,-21,55,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-122,-119,-132,143,145,147,152,-75,-48,-50,-124,160,167,173,175,-22,176,-25,-23,-82,-76,-91,-123,-120,212,-133,220,-52,-51,-126,-45,-127,-125,224,225,226,237,238,-26,-28,248,-114,-32,]),'IN':([162,],[191,]),'IDENTIFIER':([1,9,12,13,14,19,20,32,33,34,35,36,37,38,40,43,45,46,47,48,49,50,51,52,55,56,60,64,70,77,79,81,85,88,89,91,92,99,100,101,102,103,104,105,106,107,108,111,119,120,121,122,123,124,125,126,128,129,131,132,133,134,142,143,144,145,147,152,158,160,163,165,166,167,173,175,176,178,181,182,186,191,193,195,198,199,200,201,203,204,205,206,207,208,209,210,211,212,213,217,220,223,224,225,226,228,230,231,234,236,237,238,242,243,248,],[6,25,30,30,30,25,-2,-15,-37,-10,-14,-38,-13,30,-41,-40,-11,-36,25,25,-12,-42,-35,97,-118,-128,-77,-78,25,25,25,25,30,-39,25,30,25,-86,25,-84,-85,-83,25,-79,-80,25,25,25,25,-92,162,-62,-100,-94,-99,-95,-98,-62,-97,25,-96,25,30,-131,25,-101,-16,-3,25,30,25,25,25,-130,-116,-129,-18,25,25,30,25,25,25,-93,25,-62,-65,-66,-62,-62,-72,-71,25,-68,-73,-70,-69,-117,25,-102,-24,-62,-111,-104,-103,25,25,25,25,25,-17,30,-62,-62,-105,]),'-':([19,23,25,48,57,58,59,61,62,63,65,67,68,69,70,72,73,74,75,76,78,96,107,108,110,111,112,113,122,132,134,148,149,150,153,155,163,166,172,174,178,184,185,186,191,197,199,200,201,205,206,207,208,209,210,211,214,217,228,232,234,236,244,],[64,-47,-46,64,-74,-61,-88,-81,106,-43,-47,-58,-57,-90,64,-60,-87,-89,-44,-56,-59,106,64,64,106,64,-75,-48,-62,64,64,-82,-76,106,-91,106,64,64,106,106,64,-52,-51,64,64,106,-62,-65,-66,-72,-71,64,-68,-73,-70,-69,106,-102,64,106,64,64,106,]),'WHILE':([89,120,123,124,125,126,128,129,131,133,165,167,173,193,195,203,204,212,223,224,225,226,230,231,242,243,248,],[122,-92,-100,-94,-99,-95,-98,-62,-97,-96,122,-130,-116,122,-93,-62,-62,-117,-62,-111,-104,-103,122,122,-62,-62,-105,]),'ARRAY':([92,158,],[141,141,]),'LAMBDA':([93,],[142,]),'$end':([0,2,3,4,7,8,11,16,17,20,21,28,54,55,83,152,175,],[-134,-8,0,-1,-136,-135,-145,-146,-8,-2,-9,-8,-138,-118,-137,-3,-129,]),'NuLL':([19,48,60,64,70,77,99,100,101,102,103,104,105,106,107,108,111,122,132,134,163,166,178,186,191,199,200,201,205,206,207,208,209,210,211,217,228,234,236,],[67,67,-77,-78,67,67,-86,67,-84,-85,-83,67,-79,-80,67,67,67,-62,67,67,67,67,67,67,67,-62,-65,-66,-72,-71,67,-68,-73,-70,-69,-102,67,67,67,]),'PRAGMA':([0,2,7,10,11,14,15,16,17,20,21,26,27,28,32,33,34,35,36,37,38,40,43,45,46,49,50,51,53,54,55,56,80,82,83,88,98,143,145,147,152,175,176,220,237,],[1,-8,1,1,-145,1,-143,-146,-8,-2,-9,-141,-143,-8,-15,-37,-10,-14,-38,-13,1,-41,-40,-11,-36,-12,-42,-35,-139,1,-118,-128,-142,-140,1,-39,-144,-131,-101,-16,-3,-129,-18,-24,-17,]),'PROCEDURE':([0,2,4,7,8,10,11,14,15,16,17,20,21,26,27,28,32,33,34,35,36,37,38,40,43,45,46,49,50,51,53,54,55,56,80,82,83,88,98,143,145,147,152,175,176,220,237,],[-134,-8,12,-136,-135,12,-145,12,-143,-146,-8,-2,-9,-141,-143,-8,-15,-37,-10,-14,-38,-13,12,-41,-40,-11,-36,-12,-42,-35,-139,-138,-118,-128,-142,-140,-137,-39,-144,-131,-101,-16,-3,-129,-18,-24,-17,]),'(':([5,6,19,23,25,29,30,31,48,60,63,64,65,70,74,75,77,94,99,100,101,102,103,104,105,106,107,108,111,113,122,130,132,134,139,141,161,163,166,178,180,184,185,186,188,191,199,200,201,205,206,207,208,209,210,211,217,218,228,234,236,],[19,-46,70,-47,-46,85,-21,85,70,-77,-43,-78,-47,70,111,-44,70,111,-86,70,-84,-85,-83,70,-79,-80,70,70,70,-48,-62,111,70,70,111,178,111,70,70,70,111,-52,-51,70,111,70,-62,-65,-66,-72,-71,70,-68,-73,-70,-69,-102,111,70,70,70,]),'FUNCTION':([0,2,4,7,8,10,11,14,15,16,17,20,21,26,27,28,32,33,34,35,36,37,38,40,43,45,46,49,50,51,53,54,55,56,80,82,83,88,98,143,145,147,152,175,176,220,237,],[-134,-8,13,-136,-135,13,-145,13,-143,-146,-8,-2,-9,-141,-143,-8,-15,-37,-10,-14,-38,-13,13,-41,-40,-11,-36,-12,-42,-35,-139,-138,-118,-128,-142,-140,-137,-39,-144,-131,-101,-16,-3,-129,-18,-24,-17,]),'STRING':([111,],[154,]),'MOD':([23,25,57,58,59,61,63,65,67,68,69,72,73,74,75,76,78,112,113,148,149,153,184,185,],[-47,-46,102,-61,-88,-81,-43,-47,-58,-57,-90,-60,-87,-89,-44,-56,-59,102,-48,-82,102,-91,-52,-51,]),'CHAR':([19,48,60,64,70,77,99,100,101,102,103,104,105,106,107,108,111,122,132,134,163,166,178,186,191,199,200,201,205,206,207,208,209,210,211,217,228,234,236,],[78,78,-77,-78,78,78,-86,78,-84,-85,-83,78,-79,-80,78,78,78,-62,78,78,78,78,78,78,78,-62,-65,-66,-72,-71,78,-68,-73,-70,-69,-102,78,78,78,]),'DOTDOT':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,184,185,214,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,-52,-51,234,]),'AND':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,168,171,184,185,232,240,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,200,-63,-52,-51,-67,-64,]),'RETURN':([30,31,84,87,89,120,123,124,125,126,128,129,131,133,159,165,167,173,193,195,203,204,212,223,224,225,226,230,231,242,243,248,],[-21,-121,-122,119,134,-92,-100,-94,-99,-95,-98,-62,-97,-96,-123,134,-130,-116,134,-93,-62,-62,-117,-62,-111,-104,-103,134,134,-62,-62,-105,]),'FOR':([89,120,123,124,125,126,128,129,131,133,165,167,173,193,195,203,204,212,223,224,225,226,230,231,242,243,248,],[121,-92,-100,-94,-99,-95,-98,-62,-97,-96,121,-130,-116,121,-93,-62,-62,-117,-62,-111,-104,-103,121,121,-62,-62,-105,]),'END':([90,120,123,124,125,126,128,129,131,133,167,169,173,195,202,212,223,224,225,226,238,242,243,248,249,],[135,-92,-100,-94,-99,-95,-98,-115,-97,-96,-130,-109,-116,-93,229,-117,239,-111,-104,-103,246,-110,-106,-105,-107,]),'/':([23,25,57,58,59,61,63,65,67,68,69,72,73,74,75,76,78,112,113,148,149,153,184,185,],[-47,-46,101,-61,-88,-81,-43,-47,-58,-57,-90,-60,-87,-89,-44,-56,-59,101,-48,-82,101,-91,-52,-51,]),'RECORD':([146,246,],[182,250,]),'THEN':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,168,170,171,184,185,232,240,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,-108,204,-63,-52,-51,-67,-64,]),'INT':([19,48,60,64,70,77,99,100,101,102,103,104,105,106,107,108,111,122,132,134,163,166,178,186,191,199,200,201,205,206,207,208,209,210,211,217,228,234,236,],[72,72,-77,-78,72,72,-86,72,-84,-85,-83,72,-79,-80,72,72,72,-62,72,72,72,72,72,72,72,-62,-65,-66,-72,-71,72,-68,-73,-70,-69,-102,72,72,72,]),'TYPE':([14,20,32,33,34,35,36,37,38,40,43,45,46,49,50,51,55,56,88,143,145,147,152,175,176,220,237,],[52,-2,-15,-37,-10,-14,-38,-13,52,-41,-40,-11,-36,-12,-42,-35,-118,-128,-39,-131,-101,-16,-3,-129,-18,-24,-17,]),'WITH':([0,2,4,7,8,10,11,15,16,17,20,21,26,27,28,53,54,55,80,82,83,98,143,152,175,],[-134,-8,9,-136,-135,9,-145,-143,-146,-8,-2,-9,-141,-143,-8,-139,-138,-118,-142,-140,-137,-144,-131,-3,-129,]),'>':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,205,-52,-51,]),'<':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,210,-52,-51,]),'OR':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,168,171,184,185,232,240,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,201,-63,-52,-51,-67,-64,]),'ELSE':([120,123,124,125,126,128,131,133,167,169,173,195,212,224,225,226,243,248,249,],[-92,-100,-94,-99,-95,-98,-97,-96,-130,203,-116,-93,-117,-111,-104,-103,-106,-105,-107,]),'USE':([14,15,20,27,32,33,34,35,36,37,38,40,43,45,46,49,50,51,53,55,56,80,82,88,98,143,145,147,152,175,176,220,237,],[47,-143,-2,-143,-15,-37,-10,-14,-38,-13,47,-41,-40,-11,-36,-12,-42,-35,47,-118,-128,-142,47,-39,-144,-131,-101,-16,-3,-129,-18,-24,-17,]),'OF':([177,235,],[213,-29,]),')':([23,25,57,58,59,61,62,63,65,66,67,68,69,71,72,73,74,75,76,78,110,112,113,117,118,139,148,149,150,151,153,154,155,156,157,184,185,187,188,189,190,215,216,221,233,244,245,],[-47,-46,-74,-61,-88,-81,-6,-43,-47,109,-58,-57,-90,-4,-60,-87,-89,-44,-56,-59,153,-75,-48,-124,159,-25,-82,-76,-7,-5,-91,184,-55,185,-53,-52,-51,-126,-45,-127,-125,235,-30,-54,-28,-27,-31,]),'IS':([18,23,25,29,30,41,63,75,84,86,97,113,159,161,184,185,],[56,-47,-46,-121,-21,56,-43,-44,-122,-119,146,-48,-123,-120,-52,-51,]),'STARSTAR':([23,25,57,58,59,61,63,65,67,68,69,72,73,74,75,76,78,112,113,148,149,153,184,185,],[-47,-46,99,-61,-88,-81,-43,-47,-58,-57,-90,-60,-87,-89,-44,-56,-59,99,-48,-82,99,-91,-52,-51,]),'NEW':([166,],[198,]),'IF':([89,120,123,124,125,126,128,129,131,133,165,167,173,193,195,203,204,212,223,224,225,226,229,230,231,242,243,248,],[132,-92,-100,-94,-99,-95,-98,-62,-97,-96,132,-130,-116,132,-93,-62,-62,-117,-62,-111,-104,-103,241,132,132,-62,-62,-105,]),'ASSIGN':([23,25,30,44,63,75,113,130,184,185,],[-47,-46,-21,93,-43,-44,-48,166,-52,-51,]),'BEGIN':([14,20,32,33,34,35,36,37,38,39,40,43,45,46,49,50,51,55,56,88,143,145,147,152,175,176,220,237,],[-33,-2,-15,-37,-10,-14,-38,-13,-34,89,-41,-40,-11,-36,-12,-42,-35,-118,-128,-39,-131,-101,-16,-3,-129,-18,-24,-17,]),'=':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,208,-52,-51,]),'GEQ':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,209,-52,-51,]),':':([23,25,30,42,44,63,75,113,115,116,136,139,179,184,185,187,188,189,233,],[-47,-46,-21,92,-19,-43,-44,-48,158,-19,-20,-25,217,-52,-51,-126,-45,-127,-28,]),'NEQ':([23,25,57,58,59,61,63,67,68,69,72,73,74,75,76,78,112,113,148,149,153,172,184,185,],[-47,-46,-74,-61,-88,-81,-43,-58,-57,-90,-60,-87,-89,-44,-56,-59,-75,-48,-82,-76,-91,211,-52,-51,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'access_decl':([14,38,],[32,32,]),'comp_unit':([4,],[8,]),'pragma':([0,7,10,14,38,54,83,],[2,21,26,33,33,21,21,]),'else_opt':([169,],[202,]),'loop_stmt':([89,165,193,230,231,],[123,123,123,123,123,]),'numeric_lit':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'lambda_decl':([14,38,],[35,35,]),'goal_symbol':([0,],[3,]),'body':([14,38,],[43,43,]),'iter_index_constraint':([141,],[177,]),'array_type':([92,158,],[140,189,]),'value_s':([111,],[156,]),'compound_name':([9,19,47,48,70,77,81,89,92,100,104,107,108,111,119,132,134,144,158,163,165,166,178,181,186,191,193,198,207,213,228,230,231,234,236,],[22,63,63,63,63,63,114,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'iteration':([89,165,193,230,231,],[127,127,127,127,127,]),'subprog_decl':([4,10,14,38,],[11,11,37,37,]),'cond_clause':([132,],[169,]),'derived_type':([166,],[196,]),'basic_loop':([164,],[194,]),'subprog_spec_is_push':([4,10,14,38,],[14,14,14,14,]),'relation':([132,163,228,],[171,171,240,]),'record_def':([146,],[183,]),'term':([19,48,70,77,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[57,57,57,112,149,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'decl_item_or_body_s':([14,],[38,]),'decl_part':([14,],[39,]),'simple_name':([1,9,19,47,48,70,77,79,81,89,92,100,104,107,108,111,119,132,134,144,158,163,165,166,178,181,186,191,193,198,207,213,228,230,231,234,236,],[5,23,65,23,23,23,23,113,23,23,23,23,23,23,65,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'type_ind':([92,198,213,],[137,227,233,]),'decl_item':([14,38,],[40,40,]),'primary':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'mark':([158,],[187,]),'object_decl':([14,38,],[34,34,]),'return_stmt':([89,165,193,230,231,],[131,131,131,131,131,]),'range_s':([178,],[215,]),'N':([243,],[249,]),'use_clause_opt':([15,27,],[53,82,]),'expression':([132,163,],[168,168,]),'subprog_spec':([4,10,14,38,],[18,18,41,41,]),'compilation':([0,],[4,]),'unary':([19,48,70,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'decl_item_or_body':([14,38,],[36,88,]),'statement':([89,165,193,230,231,],[120,195,120,120,120,]),'def_id_s':([14,38,85,142,160,182,238,],[42,42,115,115,115,115,115,]),'multiplying':([57,112,149,],[100,100,100,]),'literal':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'def_id':([12,13,14,38,85,91,142,160,182,238,],[29,31,44,44,116,136,116,116,116,116,]),'condition':([132,163,],[170,192,]),'char_lit':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'name_s':([47,],[95,]),'object_type_def':([92,],[138,]),'simple_expression':([19,48,70,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[62,96,110,150,62,155,172,174,172,197,214,155,214,232,172,244,214,]),'range':([178,191,236,],[216,222,245,]),'formal_part':([29,31,],[84,84,]),'type_decl':([14,38,],[45,45,]),'with_clause':([4,10,],[15,27,]),'context_spec':([4,],[10,]),'use_clause':([14,38,53,82,],[46,46,98,98,]),'procedure_call':([89,165,193,230,231,],[128,128,128,128,128,]),'statement_s':([89,193,230,231,],[129,223,242,243,]),'relational':([172,],[207,]),'parenthesized_primary':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'pragma_arg_s':([19,],[66,]),'indexed_comp':([19,47,48,70,77,89,92,100,104,107,108,111,119,132,134,144,158,163,165,166,178,181,186,191,193,198,207,213,228,230,231,234,236,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'param_s':([85,182,],[118,219,]),'logical':([168,],[199,]),'factor':([19,48,70,77,100,104,107,108,111,132,134,163,166,178,186,191,207,228,234,236,],[61,61,61,61,148,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'M':([122,127,129,199,203,204,223,242,243,],[163,164,165,228,230,231,165,165,165,]),'block_body':([39,],[90,]),'lambda_begin':([14,38,],[48,48,]),'pragma_arg':([19,108,],[71,151,]),'simple_stmt':([89,165,193,230,231,],[124,124,124,124,124,]),'record_decl':([14,38,],[49,49,]),'formal_part_opt':([29,31,],[86,87,]),'subprog_body':([4,10,14,38,],[16,16,50,50,]),'c_name_list':([9,],[24,]),'if_stmt':([89,165,193,230,231,],[125,125,125,125,125,]),'value':([111,186,],[157,221,]),'unit':([4,10,],[17,28,]),'adding':([62,96,110,150,155,172,174,197,214,232,244,],[104,104,104,104,104,104,104,104,104,104,104,]),'name':([19,47,48,70,77,89,92,100,104,107,108,111,119,132,134,144,158,163,165,166,178,181,186,191,193,198,207,213,228,230,231,234,236,],[74,94,74,74,74,130,139,74,74,74,74,74,161,74,74,180,188,74,130,74,74,218,74,74,130,139,74,139,74,130,130,74,74,]),'compound_stmt':([89,165,193,230,231,],[126,126,126,126,126,]),'decl':([14,38,],[51,51,]),'param':([85,142,160,182,238,],[117,179,190,117,190,]),'assign_stmt':([89,165,193,230,231,],[133,133,133,133,133,]),'pragma_s':([2,17,28,],[7,54,83,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',21),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',29),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',30),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',34),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',35),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',40),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',41),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',45),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',46),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',50),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',51),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',52),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',53),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',54),
  ('decl -> access_decl','decl',1,'p_decl','grammar.py',55),
  ('type_decl -> TYPE IDENTIFIER ;','type_decl',3,'p_type_decl','grammar.py',60),
  ('access_decl -> TYPE IDENTIFIER IS ACCESS name ;','access_decl',6,'p_access_decl','grammar.py',75),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',93),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',136),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',137),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',142),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',147),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',148),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',153),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',172),
  ('derived_type -> NEW type_ind','derived_type',2,'p_derived_type','grammar.py',177),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',187),
  ('array_type -> ARRAY iter_index_constraint OF type_ind','array_type',4,'p_array_type','grammar.py',198),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',211),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',216),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',217),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',222),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',227),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',228),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',232),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',233),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',234),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',239),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',240),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',245),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',246),
  ('body -> subprog_body','body',1,'p_body','grammar.py',251),
  ('name -> compound_name','name',1,'p_name','grammar.py',257),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',258),
  ('mark -> name','mark',1,'p_mark','grammar.py',266),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',271),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',276),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',277),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',285),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',286),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',291),
  ('indexed_comp -> name ( STRING )','indexed_comp',4,'p_indexed_comp','grammar.py',292),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',421),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',422),
  ('value -> simple_expression','value',1,'p_value','grammar.py',427),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',432),
  ('literal -> char_lit','literal',1,'p_literal','grammar.py',433),
  ('literal -> NuLL','literal',1,'p_literal','grammar.py',434),
  ('char_lit -> CHAR','char_lit',1,'p_char_lit','grammar.py',439),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',444),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',449),
  ('M -> <empty>','M',0,'p_M','grammar.py',454),
  ('expression -> relation','expression',1,'p_expression','grammar.py',459),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',460),
  ('logical -> AND','logical',1,'p_logical','grammar.py',482),
  ('logical -> OR','logical',1,'p_logical','grammar.py',483),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',488),
  ('relational -> =','relational',1,'p_relational','grammar.py',546),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',547),
  ('relational -> <','relational',1,'p_relational','grammar.py',548),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',549),
  ('relational -> >','relational',1,'p_relational','grammar.py',550),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',551),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',556),
  ('simple_expression -> unary term','simple_expression',2,'p_simple_expression','grammar.py',557),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',558),
  ('unary -> +','unary',1,'p_unary','grammar.py',617),
  ('unary -> -','unary',1,'p_unary','grammar.py',618),
  ('adding -> +','adding',1,'p_adding','grammar.py',623),
  ('adding -> -','adding',1,'p_adding','grammar.py',624),
  ('term -> factor','term',1,'p_term','grammar.py',629),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',630),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',668),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',669),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',670),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',671),
  ('factor -> primary','factor',1,'p_factor','grammar.py',677),
  ('primary -> literal','primary',1,'p_primary','grammar.py',682),
  ('primary -> name','primary',1,'p_primary','grammar.py',683),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',684),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',689),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',694),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',695),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',704),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',705),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',711),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',712),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',713),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',718),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',719),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',724),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',732),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',744),
  ('assign_stmt -> name ASSIGN derived_type ;','assign_stmt',4,'p_assign_stmt','grammar.py',745),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',781),
  ('N -> <empty>','N',0,'p_N','grammar.py',789),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',796),
  ('condition -> expression','condition',1,'p_condition','grammar.py',803),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',814),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',815),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',825),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',834),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',835),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',853),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',858),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',863),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',864),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',873),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',878),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',879),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',897),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',898),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',903),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',908),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',909),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',918),
  ('param -> def_id_s : array_type','param',3,'p_param','grammar.py',919),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',933),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',946),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',959),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',975),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',980),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',981),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',986),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',987),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',988),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',992),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',993),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',997),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',998),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',999),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',1003),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',1007),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',1008),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',1012),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',1013),
]
