
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolACCESS AND ARRAY ARROW ASSIGN BEGIN BODY BOX CHAR DOTDOT ELSE END FLOAT FOR FUNCTION GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LL LOOP MOD NEQ NuLL OF OR PRAGMA PROCEDURE RECORD RETURN RR STARSTAR STRING THEN TICK TYPE USE WHILE WITHgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\t   | access_decl\n\ttype_decl : TYPE IDENTIFIER ';'\n\taccess_decl : TYPE IDENTIFIER IS ACCESS name ';'\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\t\t| name '(' STRING ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\t\t\t\t| char_lit\n\t\t\t\t| NuLL\n\tchar_lit : CHAR\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | unary term\n\t   | simple_expression adding term\n\tunary : '+'\n\t\t\t| '-'\n\tadding  : '+'\n\t   | '-'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'OF':([181,231,],[216,-28,]),'WITH':([0,2,3,7,9,10,11,14,16,18,19,21,22,23,26,27,54,56,79,80,84,96,143,156,175,],[-131,13,-8,13,-140,-8,-142,-143,-132,-133,-2,-140,-8,-138,-136,-135,-116,-9,-137,-134,-141,-139,-128,-3,-126,]),';':([5,15,24,48,49,50,51,52,55,57,58,59,60,62,63,64,67,68,70,71,73,74,75,81,88,89,92,93,98,101,107,116,117,118,120,133,137,139,140,141,146,147,152,154,157,158,161,163,176,182,185,186,187,188,189,192,195,211,212,233,236,242,245,],[19,54,-21,54,-48,-45,-46,96,-119,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-120,135,136,-129,143,-117,-74,156,160,-122,162,166,175,179,-25,-23,-22,-47,-49,-90,-75,-81,-118,-121,190,210,-130,-50,-51,-124,-44,-123,219,221,228,229,-27,243,-112,-31,]),'<':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,205,-50,-51,]),'/':([50,51,57,58,59,60,62,63,64,66,67,68,70,71,73,74,75,101,146,152,154,157,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-86,-42,-89,-56,110,110,-47,-90,110,-81,-50,-51,]),'PRAGMA':([0,3,7,9,10,11,12,14,18,19,21,22,23,26,27,28,29,32,33,35,36,38,39,40,42,43,45,46,47,53,54,56,79,80,84,85,96,135,136,143,156,175,179,210,229,],[1,-8,1,-140,-8,-142,1,-143,1,-2,-140,-8,-138,-136,1,1,-13,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,-9,-137,1,-141,-38,-139,-16,-100,-128,-3,-126,-18,-24,-17,]),'LEQ':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,208,-50,-51,]),':':([24,37,44,50,51,68,71,114,115,142,146,183,185,186,187,188,],[-21,90,-19,-45,-46,-43,-42,159,-19,-20,-47,217,-50,-51,-124,-44,]),'FLOAT':([20,34,61,65,76,77,99,102,103,104,105,106,108,109,110,111,112,118,121,132,165,167,180,184,194,199,200,201,202,203,204,205,206,207,208,217,225,230,232,],[62,62,62,62,-77,-76,62,62,-79,-78,62,62,-84,62,-83,-85,-82,62,-61,62,62,62,62,62,62,-65,-64,-61,-72,-67,62,-69,-71,-68,-70,-101,62,62,62,]),'END':([87,119,123,124,125,126,127,129,130,131,162,166,170,190,191,198,219,221,222,228,235,238,243,244,],[133,-113,-99,-97,-95,-91,-94,-93,-98,-96,-114,-127,-107,-115,-92,224,-102,-109,234,239,-108,-104,-103,-105,]),'TYPE':([12,19,28,29,32,33,35,36,38,39,40,42,43,45,46,47,53,54,85,135,136,143,156,175,179,210,229,],[31,-2,31,-13,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,-38,-16,-100,-128,-3,-126,-18,-24,-17,]),'IN':([168,],[194,]),'FOR':([86,119,123,124,125,126,127,129,130,131,162,164,166,190,191,196,197,209,219,221,222,223,227,235,238,243,],[122,-61,-99,-97,-95,-91,-94,-93,-98,-96,-114,122,-127,-115,-92,122,-61,-61,-102,-109,-61,122,122,-61,-61,-103,]),'ASSIGN':([24,44,50,51,68,71,120,146,185,186,],[-21,94,-45,-46,-43,-42,165,-47,-50,-51,]),'RECORD':([134,239,],[177,245,]),'STRING':([99,],[151,]),'OR':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,171,172,185,186,226,237,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,-62,199,-50,-51,-66,-63,]),'LOOP':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,128,146,152,154,157,169,171,172,185,186,193,220,226,234,237,241,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-61,-47,-90,-75,-81,196,-62,-106,-50,-51,-110,-111,-66,242,-63,-26,]),'ARROW':([50,66,],[-45,102,]),'IDENTIFIER':([1,8,12,13,17,19,20,28,29,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,53,54,61,65,76,77,83,85,86,90,91,95,97,99,102,103,104,105,106,108,109,110,111,112,113,118,119,121,122,123,124,125,126,127,129,130,131,132,135,136,143,144,145,156,159,160,162,164,165,166,167,175,177,178,179,180,184,190,191,194,196,197,199,200,201,202,203,204,205,206,207,208,209,210,216,217,219,221,222,223,225,227,228,229,230,232,235,238,243,],[5,24,24,50,24,-2,50,24,-13,88,-37,-39,50,-11,-15,-35,-40,-14,50,-12,-36,-34,-41,-10,-125,-116,50,50,-77,-76,24,-38,50,50,24,50,50,50,50,-79,-78,50,50,-84,50,-83,-85,-82,50,50,-61,-61,168,-99,-97,-95,-91,-94,-93,-98,-96,50,-16,-100,-128,50,24,-3,50,24,-114,50,50,-127,50,-126,24,50,-18,50,50,-115,-92,50,50,-61,-65,-64,-61,-72,-67,50,-69,-71,-68,-70,-61,-24,50,-101,-102,-109,-61,50,50,50,24,-17,50,50,-61,-61,-103,]),'-':([20,34,50,51,57,58,59,60,61,62,63,64,66,67,68,69,70,71,73,74,75,89,99,100,101,102,106,118,121,132,146,149,152,153,154,157,163,165,167,173,180,184,185,186,192,194,199,200,201,202,203,204,205,206,207,208,215,217,225,226,230,232,241,],[76,76,-45,-46,-80,-59,-87,-88,76,-60,-57,-58,-46,-55,-43,103,-86,-42,-89,-56,-73,103,76,103,-74,76,76,76,-61,76,-47,103,-90,103,-75,-81,103,76,76,103,76,76,-50,-51,103,76,-65,-64,-61,-72,-67,76,-69,-71,-68,-70,103,-101,76,103,76,76,103,]),'STARSTAR':([50,51,57,58,59,60,62,63,64,66,67,68,70,71,73,74,75,101,146,152,154,157,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-86,-42,-89,-56,111,111,-47,-90,111,-81,-50,-51,]),'ELSE':([123,124,125,126,127,129,130,131,162,166,170,190,191,219,221,238,243,244,],[-99,-97,-95,-91,-94,-93,-98,-96,-114,-127,197,-115,-92,-102,-109,-104,-103,-105,]),'PROCEDURE':([0,2,3,7,9,10,11,12,14,16,18,19,21,22,23,26,27,28,29,32,33,35,36,38,39,40,42,43,45,46,47,53,54,56,79,80,84,85,96,135,136,143,156,175,179,210,229,],[-131,17,-8,17,-140,-8,-142,17,-143,-132,-133,-2,-140,-8,-138,-136,-135,17,-13,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,-9,-137,-134,-141,-38,-139,-16,-100,-128,-3,-126,-18,-24,-17,]),'GEQ':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,202,-50,-51,]),'FUNCTION':([0,2,3,7,9,10,11,12,14,16,18,19,21,22,23,26,27,28,29,32,33,35,36,38,39,40,42,43,45,46,47,53,54,56,79,80,84,85,96,135,136,143,156,175,179,210,229,],[-131,8,-8,8,-140,-8,-142,8,-143,-132,-133,-2,-140,-8,-138,-136,-135,8,-13,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,-9,-137,-134,-141,-38,-139,-16,-100,-128,-3,-126,-18,-24,-17,]),'=':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,203,-50,-51,]),'USE':([9,12,19,21,26,28,29,32,33,35,36,38,39,40,42,43,45,46,47,53,54,79,84,85,96,135,136,143,156,175,179,210,229,],[-140,41,-2,-140,41,41,-13,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,41,-141,-38,-139,-16,-100,-128,-3,-126,-18,-24,-17,]),'*':([50,51,57,58,59,60,62,63,64,66,67,68,70,71,73,74,75,101,146,152,154,157,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-86,-42,-89,-56,112,112,-47,-90,112,-81,-50,-51,]),'THEN':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,171,172,174,185,186,226,237,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,-62,-106,209,-50,-51,-66,-63,]),'DOTDOT':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,185,186,215,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,-50,-51,232,]),',':([24,37,44,49,50,51,52,57,58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,78,92,93,101,114,115,142,146,147,148,149,150,152,153,154,155,157,182,185,186,213,214,218,240,241,],[-21,91,-19,-48,-45,-46,97,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-6,-86,-42,106,-89,-56,-73,-4,-129,144,-74,91,-19,-20,-47,-49,-52,-54,184,-90,-7,-75,-5,-81,-130,-50,-51,-29,230,-53,-30,-26,]),'BEGIN':([12,19,28,29,30,32,33,35,36,38,39,40,42,43,45,46,47,53,54,85,135,136,143,156,175,179,210,229,],[-32,-2,-33,-13,86,-37,-39,-11,-15,-35,-40,-14,-12,-36,-34,-41,-10,-125,-116,-38,-16,-100,-128,-3,-126,-18,-24,-17,]),'(':([5,6,20,24,25,34,50,51,55,60,61,65,66,68,71,76,77,92,99,102,103,104,105,106,108,109,110,111,112,118,120,121,132,138,139,146,158,165,167,180,182,184,185,186,188,194,199,200,201,202,203,204,205,206,207,208,212,217,225,230,232,],[-45,20,61,-21,83,61,-45,-46,83,99,61,61,-46,-43,-42,-77,-76,99,61,61,-79,-78,61,61,-84,61,-83,-85,-82,61,99,-61,61,180,99,-47,99,61,61,61,99,61,-50,-51,99,61,-65,-64,-61,-72,-67,61,-69,-71,-68,-70,99,-101,61,61,61,]),'CHAR':([20,34,61,65,76,77,99,102,103,104,105,106,108,109,110,111,112,118,121,132,165,167,180,184,194,199,200,201,202,203,204,205,206,207,208,217,225,230,232,],[64,64,64,64,-77,-76,64,64,-79,-78,64,64,-84,64,-83,-85,-82,64,-61,64,64,64,64,64,64,-65,-64,-61,-72,-67,64,-69,-71,-68,-70,-101,64,64,64,]),'WHILE':([86,119,123,124,125,126,127,129,130,131,162,164,166,190,191,196,197,209,219,221,222,223,227,235,238,243,],[121,-61,-99,-97,-95,-91,-94,-93,-98,-96,-114,121,-127,-115,-92,121,-61,-61,-102,-109,-61,121,121,-61,-61,-103,]),'+':([20,34,50,51,57,58,59,60,61,62,63,64,66,67,68,69,70,71,73,74,75,89,99,100,101,102,106,118,121,132,146,149,152,153,154,157,163,165,167,173,180,184,185,186,192,194,199,200,201,202,203,204,205,206,207,208,215,217,225,226,230,232,241,],[77,77,-45,-46,-80,-59,-87,-88,77,-60,-57,-58,-46,-55,-43,104,-86,-42,-89,-56,-73,104,77,104,-74,77,77,77,-61,77,-47,104,-90,104,-75,-81,104,77,77,104,77,77,-50,-51,104,77,-65,-64,-61,-72,-67,77,-69,-71,-68,-70,104,-101,77,104,77,77,104,]),'ACCESS':([134,],[178,]),'RETURN':([24,25,81,82,86,119,123,124,125,126,127,129,130,131,161,162,164,166,190,191,196,197,209,219,221,222,223,227,235,238,243,],[-21,-119,-120,113,118,-61,-99,-97,-95,-91,-94,-93,-98,-96,-121,-114,118,-127,-115,-92,118,-61,-61,-102,-109,-61,118,118,-61,-61,-103,]),'NuLL':([20,34,61,65,76,77,99,102,103,104,105,106,108,109,110,111,112,118,121,132,165,167,180,184,194,199,200,201,202,203,204,205,206,207,208,217,225,230,232,],[63,63,63,63,-77,-76,63,63,-79,-78,63,63,-84,63,-83,-85,-82,63,-61,63,63,63,63,63,63,-65,-64,-61,-72,-67,63,-69,-71,-68,-70,-101,63,63,63,]),'AND':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,171,172,185,186,226,237,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,-62,200,-50,-51,-66,-63,]),'.':([49,50,51,66,71,146,147,],[95,-45,-46,-46,95,-47,95,]),'$end':([0,2,3,4,10,11,14,16,18,19,22,27,54,56,80,156,175,],[-131,-1,-8,0,-8,-142,-143,-132,-133,-2,-8,-135,-116,-9,-134,-3,-126,]),'ARRAY':([90,],[138,]),'>':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,206,-50,-51,]),'NEQ':([50,51,57,58,59,60,62,63,64,67,68,70,71,73,74,75,101,146,152,154,157,173,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-55,-43,-86,-42,-89,-56,-73,-74,-47,-90,-75,-81,207,-50,-51,]),'IF':([86,119,123,124,125,126,127,129,130,131,162,164,166,190,191,196,197,209,219,221,222,223,224,227,235,238,243,],[132,-61,-99,-97,-95,-91,-94,-93,-98,-96,-114,132,-127,-115,-92,132,-61,-61,-102,-109,-61,132,236,132,-61,-61,-103,]),'MOD':([50,51,57,58,59,60,62,63,64,66,67,68,70,71,73,74,75,101,146,152,154,157,185,186,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-86,-42,-89,-56,108,108,-47,-90,108,-81,-50,-51,]),')':([50,51,57,58,59,60,62,63,64,66,67,68,69,70,71,72,73,74,75,78,100,101,116,117,146,148,149,150,151,152,153,154,155,157,185,186,187,188,189,213,214,218,240,241,],[-45,-46,-80,-59,-87,-88,-60,-57,-58,-46,-55,-43,-6,-86,-42,107,-89,-56,-73,-4,152,-74,161,-122,-47,-52,-54,185,186,-90,-7,-75,-5,-81,-50,-51,-124,-44,-123,-29,231,-53,-30,-26,]),'IS':([15,24,48,50,51,55,68,71,81,88,98,146,158,161,185,186,],[53,-21,53,-45,-46,-119,-43,-42,-120,134,-117,-47,-118,-121,-50,-51,]),'LAMBDA':([94,],[145,]),'INT':([20,34,61,65,76,77,99,102,103,104,105,106,108,109,110,111,112,118,121,132,165,167,180,184,194,199,200,201,202,203,204,205,206,207,208,217,225,230,232,],[58,58,58,58,-77,-76,58,58,-79,-78,58,58,-84,58,-83,-85,-82,58,-61,58,58,58,58,58,58,-65,-64,-61,-72,-67,58,-69,-71,-68,-70,-101,58,58,58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'factor':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[57,57,57,57,57,57,57,57,157,57,57,57,57,57,57,57,57,57,57,57,]),'cond_clause':([132,],[170,]),'statement_s':([86,196,223,227,],[119,222,235,238,]),'else_opt':([170,],[198,]),'basic_loop':([169,],[195,]),'array_type':([90,],[140,]),'mark':([159,],[187,]),'with_clause':([2,7,],[9,21,]),'param_s':([83,177,],[116,211,]),'decl_item_or_body_s':([12,],[28,]),'decl_item':([12,28,],[39,39,]),'range':([180,194,230,],[213,220,240,]),'iteration':([86,164,196,223,227,],[128,128,128,128,128,]),'record_def':([134,],[176,]),'name_s':([41,],[93,]),'compound_name':([13,20,34,41,61,65,86,90,97,99,102,105,106,109,113,118,132,144,159,164,165,167,178,180,184,194,196,204,216,223,225,227,230,232,],[49,71,71,71,71,71,71,71,147,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'subprog_decl':([2,7,12,28,],[11,11,29,29,]),'adding':([69,89,100,149,153,163,173,192,215,226,241,],[105,105,105,105,105,105,105,105,105,105,105,]),'record_decl':([12,28,],[42,42,]),'unary':([20,34,61,99,102,106,118,132,165,167,180,184,194,204,225,230,232,],[65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'value':([99,184,],[148,218,]),'decl_part':([12,],[30,]),'loop_stmt':([86,164,196,223,227,],[123,123,123,123,123,]),'indexed_comp':([20,34,41,61,65,86,90,99,102,105,106,109,113,118,132,144,159,164,165,167,178,180,184,194,196,204,216,223,225,227,230,232,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'decl_item_or_body':([12,28,],[32,85,]),'primary':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'relational':([173,],[204,]),'simple_stmt':([86,164,196,223,227,],[129,129,129,129,129,]),'body':([12,28,],[33,33,]),'compilation':([0,],[2,]),'procedure_call':([86,164,196,223,227,],[124,124,124,124,124,]),'lambda_begin':([12,28,],[34,34,]),'use_clause_opt':([9,21,],[26,79,]),'c_name_list':([13,],[52,]),'type_decl':([12,28,],[35,35,]),'comp_unit':([2,],[16,]),'pragma_arg_s':([20,],[72,]),'expression':([132,167,],[172,172,]),'access_decl':([12,28,],[36,36,]),'def_id_s':([12,28,83,145,160,177,228,],[37,37,114,114,114,114,114,]),'relation':([132,167,225,],[171,171,237,]),'use_clause':([12,26,28,79,],[38,84,38,84,]),'multiplying':([75,101,154,],[109,109,109,]),'context_spec':([2,],[7,]),'object_type_def':([90,],[137,]),'lambda_decl':([12,28,],[40,40,]),'formal_part_opt':([25,55,],[82,98,]),'iter_index_constraint':([138,],[181,]),'param':([83,145,160,177,228,],[117,183,189,117,189,]),'N':([238,],[244,]),'literal':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'name':([20,34,41,61,65,86,90,99,102,105,106,109,113,118,132,144,159,164,165,167,178,180,184,194,196,204,216,223,225,227,230,232,],[60,60,92,60,60,120,139,60,60,60,60,60,158,60,60,182,188,120,60,60,212,60,60,60,120,60,139,120,60,120,60,60,]),'unit':([2,7,],[10,22,]),'formal_part':([25,55,],[81,81,]),'pragma_s':([3,10,22,],[18,27,80,]),'simple_expression':([20,34,61,99,102,106,118,132,165,167,180,184,194,204,225,230,232,],[69,89,100,149,153,69,163,173,192,173,215,149,215,226,173,215,241,]),'range_s':([180,],[214,]),'goal_symbol':([0,],[4,]),'def_id':([8,12,17,28,83,91,145,160,177,228,],[25,44,55,44,115,142,115,115,115,115,]),'decl':([12,28,],[45,45,]),'type_ind':([90,216,],[141,233,]),'simple_name':([1,13,20,34,41,61,65,86,90,95,97,99,102,105,106,109,113,118,132,144,159,164,165,167,178,180,184,194,196,204,216,223,225,227,230,232,],[6,51,66,51,51,51,51,51,51,146,51,51,51,51,66,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'block_body':([30,],[87,]),'numeric_lit':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'value_s':([99,],[150,]),'assign_stmt':([86,164,196,223,227,],[125,125,125,125,125,]),'subprog_body':([2,7,12,28,],[14,14,46,46,]),'compound_stmt':([86,164,196,223,227,],[127,127,127,127,127,]),'object_decl':([12,28,],[47,47,]),'if_stmt':([86,164,196,223,227,],[130,130,130,130,130,]),'parenthesized_primary':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'pragma':([0,7,12,18,27,28,80,],[3,23,43,56,56,43,56,]),'subprog_spec_is_push':([2,7,12,28,],[12,12,12,12,]),'pragma_arg':([20,106,],[78,155,]),'return_stmt':([86,164,196,223,227,],[131,131,131,131,131,]),'condition':([132,167,],[174,193,]),'term':([20,34,61,65,99,102,105,106,118,132,165,167,180,184,194,204,225,230,232,],[75,75,75,101,75,75,154,75,75,75,75,75,75,75,75,75,75,75,75,]),'statement':([86,164,196,223,227,],[126,191,126,126,126,]),'subprog_spec':([2,7,12,28,],[15,15,48,48,]),'char_lit':([20,34,61,65,99,102,105,106,109,118,132,165,167,180,184,194,204,225,230,232,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'logical':([172,],[201,]),'M':([119,121,128,197,201,209,222,235,238,],[164,167,169,223,225,227,164,164,164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',20),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',28),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',29),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',33),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',34),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',39),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',40),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',44),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',45),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',50),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',51),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',52),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',53),
  ('decl -> access_decl','decl',1,'p_decl','grammar.py',54),
  ('type_decl -> TYPE IDENTIFIER ;','type_decl',3,'p_type_decl','grammar.py',59),
  ('access_decl -> TYPE IDENTIFIER IS ACCESS name ;','access_decl',6,'p_access_decl','grammar.py',74),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',92),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',135),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',136),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',141),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',146),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',147),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',152),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',171),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',176),
  ('array_type -> ARRAY iter_index_constraint OF type_ind','array_type',4,'p_array_type','grammar.py',187),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',200),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',205),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',206),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',211),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',216),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',217),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',221),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',222),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',223),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',228),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',229),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',234),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',235),
  ('body -> subprog_body','body',1,'p_body','grammar.py',240),
  ('name -> compound_name','name',1,'p_name','grammar.py',246),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',247),
  ('mark -> name','mark',1,'p_mark','grammar.py',255),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',260),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',265),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',266),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',274),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',275),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',280),
  ('indexed_comp -> name ( STRING )','indexed_comp',4,'p_indexed_comp','grammar.py',281),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',411),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',412),
  ('value -> simple_expression','value',1,'p_value','grammar.py',417),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',422),
  ('literal -> char_lit','literal',1,'p_literal','grammar.py',423),
  ('literal -> NuLL','literal',1,'p_literal','grammar.py',424),
  ('char_lit -> CHAR','char_lit',1,'p_char_lit','grammar.py',429),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',434),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',439),
  ('M -> <empty>','M',0,'p_M','grammar.py',444),
  ('expression -> relation','expression',1,'p_expression','grammar.py',449),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',450),
  ('logical -> AND','logical',1,'p_logical','grammar.py',472),
  ('logical -> OR','logical',1,'p_logical','grammar.py',473),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',478),
  ('relational -> =','relational',1,'p_relational','grammar.py',513),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',514),
  ('relational -> <','relational',1,'p_relational','grammar.py',515),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',516),
  ('relational -> >','relational',1,'p_relational','grammar.py',517),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',518),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',523),
  ('simple_expression -> unary term','simple_expression',2,'p_simple_expression','grammar.py',524),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',525),
  ('unary -> +','unary',1,'p_unary','grammar.py',581),
  ('unary -> -','unary',1,'p_unary','grammar.py',582),
  ('adding -> +','adding',1,'p_adding','grammar.py',587),
  ('adding -> -','adding',1,'p_adding','grammar.py',588),
  ('term -> factor','term',1,'p_term','grammar.py',593),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',594),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',630),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',631),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',632),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',633),
  ('factor -> primary','factor',1,'p_factor','grammar.py',639),
  ('primary -> literal','primary',1,'p_primary','grammar.py',644),
  ('primary -> name','primary',1,'p_primary','grammar.py',645),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',646),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',651),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',656),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',657),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',666),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',667),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',673),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',674),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',675),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',680),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',681),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',686),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',694),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',706),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',736),
  ('N -> <empty>','N',0,'p_N','grammar.py',744),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',751),
  ('condition -> expression','condition',1,'p_condition','grammar.py',758),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',769),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',770),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',780),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',789),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',790),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',808),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',813),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',818),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',819),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',828),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',833),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',834),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',852),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',853),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',858),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',863),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',864),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',872),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',886),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',899),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',913),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',929),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',934),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',935),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',940),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',941),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',942),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',946),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',947),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',951),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',952),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',953),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',957),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',961),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',962),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',966),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',967),
]
