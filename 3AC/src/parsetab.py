
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolABORT ABS ABSTRACT ACCEPT ACCESS ALIASED ALL AND ARRAY ARROW ASSIGN AT BEGIN BODY BOX CASE CHAR CONSTANT DECLARE DELAY DELTA DIGITS DO DOTDOT ELSE ELSIF END ENTRY EXCEPTION EXIT FIN FLOAT FOR FUNCTION GENERIC GEQ IDENTIFIER IF IN INT IS LEQ LIMITED LL LOOP MOD NEQ NEW NOT NuLL OF OR OTHERS OUT PACKAGE PRAGMA PRIVATE PROCEDURE PROTECTED RAISE RANGE RECORD REM RENAMES REQUEUE RETURN REVERSE RR SELECT SEPARATE STARSTAR STRING SUBTYPE TAGGED TASK TERMINATE THEN TICK TYPE UNTIL USE WHEN WHILE WITH XORgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | subtype_decl\n\t   | subprog_decl\n\tobject_decl : def_id_s ':' object_subtype_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_subtype_def : subtype_ind\n\t   | array_type\n\ttype_decl : TYPE IDENTIFIER discrim_part_opt type_completion ';'\n\tdiscrim_part_opt :\n\t   | discrim_part\n\t   | '(' BOX ')'\n\ttype_completion :\n\t   | IS type_def\n\ttype_def : integer_type\n\t   | array_type\n\t   | record_type\n\tsubtype_decl : SUBTYPE IDENTIFIER IS subtype_ind ';'\n\tsubtype_ind : name\n\trange_constraint : RANGE range\n\trange : simple_expression DOTDOT simple_expression\n\tinteger_type : range_spec\n\t   | MOD expression\n\trange_spec : range_constraint\n\tarray_type : constr_array_type\n\tconstr_array_type : ARRAY iter_index_constraint OF component_subtype_def\n\tcomponent_subtype_def : subtype_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_type : record_def\n\trecord_def : RECORD pragma_s comp_list END RECORD\n\t   | NuLL RECORD\n\tcomp_list : NuLL ';' pragma_s\n\tdiscrim_part : '(' discrim_spec_s ')'\n\tdiscrim_spec_s : discrim_spec\n\t   | discrim_spec_s ';' discrim_spec\n\tdiscrim_spec : def_id_s ':' mark\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : simple_name\n\t   | indexed_comp\n\t   | selected_comp\n\t   | operator_symbol\n\tmark : simple_name\n\t   | mark '.' simple_name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tused_char : CHAR\n\toperator_symbol : STRING\n\tindexed_comp : name '(' value_s ')'\n    value_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tselected_comp : name '.' simple_name\n\t   | name '.' used_char\n\t   | name '.' operator_symbol\n\t   | name '.' ALL\n\tliteral : INT\n\t   | NuLL\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\t   | '&'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\t\t\t| NOT primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\t   | block\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock : block_decl block_body END ';'\n\tblock_decl :\n\t   | DECLARE decl_part\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\t   | USE TYPE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'=':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,212,-73,]),'IS':([14,26,28,32,47,55,63,64,69,78,82,87,88,92,146,147,150,151,152,153,154,164,165,194,223,224,],[33,-66,-17,-141,33,-62,-61,-63,-72,-142,-139,141,-60,-21,-22,191,-79,-71,-77,-78,-80,-143,-140,-73,-23,-46,]),'STARSTAR':([26,55,56,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,194,],[-66,-62,-60,-106,-110,-109,-61,-63,-81,-82,-72,109,-108,-100,-60,-107,109,-79,-71,-77,-78,-80,-111,-101,-73,]),'SUBTYPE':([18,20,33,34,39,40,41,42,43,45,48,49,51,52,53,54,93,136,143,160,168,169,186,222,238,],[38,-2,-147,-138,-12,-11,-10,-58,-13,-55,-54,-59,-57,38,-52,-53,-56,38,-150,-3,-14,-148,-151,-29,-20,]),'USE':([9,18,20,22,29,33,34,39,40,41,42,43,45,48,49,51,52,53,54,73,75,80,93,136,143,160,168,169,186,222,238,],[-163,46,-2,46,-163,-147,-138,-12,-11,-10,-58,-13,-55,-54,-59,-57,46,-52,-53,-164,-162,46,-56,46,-150,-3,-14,-148,-151,-29,-20,]),'LEQ':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,218,-73,]),'BOX':([145,],[187,]),'GEQ':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,217,-73,]),'BEGIN':([18,20,33,34,37,39,40,41,42,43,45,48,49,51,52,53,54,86,93,124,126,127,128,129,130,133,134,135,136,138,139,143,160,168,169,172,174,176,177,186,203,205,206,220,221,222,238,246,247,248,249,253,254,267,268,272,],[-50,-2,-147,-138,86,-12,-11,-10,-58,-13,-55,-54,-59,-57,-51,-52,-53,-133,-56,86,-83,-119,-117,-118,-121,-112,-120,-116,-50,-115,-114,-150,-3,-14,-148,-133,-136,-149,-134,-151,-133,-113,-137,-83,-83,-29,-20,-132,-83,-129,-122,-133,-133,-83,-83,-123,]),',':([23,24,25,26,28,36,44,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,88,89,91,95,110,111,113,122,144,148,149,150,151,152,153,154,155,156,157,158,159,161,185,190,194,200,201,239,262,263,],[-69,-67,76,-66,-17,84,-15,-62,-60,-106,-6,-110,-109,-61,-63,103,-81,-4,-82,-72,-95,-108,-100,-60,142,-152,-107,-68,-70,84,-16,142,-7,-96,-79,-71,-77,-78,-80,193,-76,-74,-111,-5,-101,-153,84,-73,-40,245,-75,-32,-41,]),'/':([26,55,56,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,194,],[-66,-62,-60,-106,-110,-109,-61,-63,-81,-82,-72,105,-108,-100,-60,-107,105,-79,-71,-77,-78,-80,-111,-101,-73,]),'<':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,213,-73,]),'MOD':([26,55,56,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,191,194,],[-66,-62,-60,-106,-110,-109,-61,-63,-81,-82,-72,108,-108,-100,-60,-107,108,-79,-71,-77,-78,-80,-111,-101,235,-73,]),'OR':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,179,183,194,251,260,265,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,211,-84,-73,-88,211,-85,]),'RETURN':([27,28,78,79,86,126,127,128,129,130,133,134,135,138,139,164,172,174,176,203,205,206,220,221,246,247,248,249,253,254,267,268,272,],[-141,-17,-142,115,131,-83,-119,-117,-118,-121,-112,-120,-116,-115,-114,-143,131,-136,-149,131,-113,-137,-83,-83,-132,-83,-129,-122,131,131,-83,-83,-123,]),';':([6,14,23,24,25,26,28,32,47,55,58,60,61,63,64,66,68,69,70,71,72,78,82,88,89,91,92,95,104,110,111,112,114,116,118,119,120,121,123,131,132,144,146,147,149,150,151,152,153,154,158,161,164,165,173,183,184,185,188,189,192,194,195,196,197,202,204,207,223,224,227,228,229,233,234,236,237,241,242,251,255,256,257,258,260,261,262,265,266,269,271,277,],[20,34,-69,-67,75,-66,-17,-141,34,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-142,-139,-60,143,-152,-21,-107,160,-68,-70,-144,163,-19,-18,168,-30,-36,169,174,176,186,-22,-24,-96,-79,-71,-77,-78,-80,-111,-101,-143,-140,206,-84,222,-153,-47,225,238,-73,-146,-64,-145,246,248,249,-23,-46,-27,-25,-42,-33,-26,-28,-35,-37,-38,-88,-48,-49,-31,-44,-34,-65,-32,-85,272,274,-131,-43,]),'DECLARE':([86,126,127,128,129,130,133,134,135,138,139,172,174,176,203,205,206,220,221,246,247,248,249,253,254,267,268,272,],[136,-83,-119,-117,-118,-121,-112,-120,-116,-115,-114,136,-136,-149,136,-113,-137,-83,-83,-132,-83,-129,-122,136,136,-83,-83,-123,]),'>':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,215,-73,]),'NEQ':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,180,194,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,216,-73,]),'LOOP':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,125,149,150,151,152,153,154,158,161,171,179,183,194,208,251,264,265,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-83,-96,-79,-71,-77,-78,-80,-111,-101,203,-126,-84,-73,-130,-88,271,-85,]),'INT':([19,57,62,94,96,97,98,99,101,103,105,106,107,108,109,131,137,140,167,175,178,193,209,210,211,212,213,214,215,216,217,218,230,235,243,245,250,],[66,66,66,66,-97,-98,66,-99,66,66,-103,66,-102,-104,-105,66,-83,66,66,66,66,66,-83,-86,-87,-89,-91,66,-93,-90,-94,-92,66,66,66,66,66,]),'END':([20,21,85,126,127,128,129,130,133,134,135,138,139,160,170,174,176,181,205,206,219,246,247,248,249,267,268,270,272,273,274,276,],[-2,-9,123,-135,-119,-117,-118,-121,-112,-120,-116,-115,-114,-3,202,-136,-149,-127,-113,-137,252,-132,264,-129,-122,-128,-124,275,-123,-125,-8,-45,]),'WHILE':([86,126,127,128,129,130,133,134,135,138,139,172,174,176,203,205,206,220,221,246,247,248,249,253,254,267,268,272,],[137,-83,-119,-117,-118,-121,-112,-120,-116,-115,-114,137,-136,-149,137,-113,-137,-83,-83,-132,-83,-129,-122,137,137,-83,-83,-123,]),'RANGE':([191,],[230,]),'ARRAY':([83,191,],[117,117,]),'-':([26,55,56,58,59,60,61,63,64,66,68,69,70,71,72,88,95,102,148,149,150,151,152,153,154,156,158,161,173,180,194,199,207,251,262,],[-66,-62,-60,-106,97,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,97,97,-96,-79,-71,-77,-78,-80,97,-111,-101,97,97,-73,97,97,97,97,]),'IDENTIFIER':([1,10,11,13,18,19,20,33,34,38,39,40,41,42,43,45,46,48,49,50,51,52,53,54,57,62,74,76,77,83,84,86,90,93,94,96,97,98,99,100,101,103,105,106,107,108,109,115,126,127,128,129,130,131,133,134,135,136,137,138,139,140,141,142,143,145,160,162,163,167,168,169,172,174,175,176,178,186,193,198,203,205,206,209,210,211,212,213,214,215,216,217,218,220,221,222,225,226,230,235,238,240,243,245,246,247,248,249,250,253,254,267,268,272,],[6,26,28,28,28,26,-2,-147,-138,87,-12,-11,-10,-58,-13,-55,26,-54,-59,92,-57,28,-52,-53,26,26,26,26,28,26,28,26,26,-56,26,-97,-98,26,-99,26,26,26,-103,26,-102,-104,-105,26,-83,-119,-117,-118,-121,26,-112,-120,-116,28,-83,-115,-114,26,26,26,-150,28,-3,26,28,26,-14,-148,26,-136,26,-149,26,-151,26,26,26,-113,-137,-83,-86,-87,-89,-91,26,-93,-90,-94,-92,-83,-83,-29,28,26,26,26,-20,26,26,26,-132,-83,-129,-122,26,26,26,-83,-83,-123,]),'$end':([0,2,3,4,7,8,15,16,17,20,21,30,34,35,81,160,169,],[-154,-8,0,-1,-156,-166,-165,-8,-155,-2,-9,-8,-138,-158,-157,-3,-148,]),'DOTDOT':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,194,199,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,-73,243,]),'&':([26,55,56,58,59,60,61,63,64,66,68,69,70,71,72,88,95,102,148,149,150,151,152,153,154,156,158,161,173,180,194,199,207,251,262,],[-66,-62,-60,-106,99,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,99,99,-96,-79,-71,-77,-78,-80,99,-111,-101,99,99,-73,99,99,99,99,]),'ASSIGN':([26,55,63,64,69,88,132,150,151,152,153,154,194,],[-66,-62,-61,-63,-72,-60,175,-79,-71,-77,-78,-80,-73,]),'NOT':([19,62,94,96,97,98,99,101,103,105,106,107,108,109,131,137,140,167,175,178,193,209,210,211,212,213,214,215,216,217,218,230,235,243,245,250,],[57,57,57,-97,-98,57,-99,57,57,-103,57,-102,-104,-105,57,-83,57,57,57,57,57,-83,-86,-87,-89,-91,57,-93,-90,-94,-92,57,57,57,57,57,]),')':([26,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,88,95,102,112,114,148,149,150,151,152,153,154,155,156,157,158,159,161,187,188,189,194,195,196,197,200,201,239,255,256,261,262,263,],[-66,-62,-60,-106,-6,-110,-109,-61,-63,104,-81,-4,-82,-72,-95,-108,-100,-60,-107,158,-144,164,-7,-96,-79,-71,-77,-78,-80,194,-76,-74,-111,-5,-101,223,-47,224,-73,-146,-64,-145,-40,244,-75,-48,-49,-65,-32,-41,]),'*':([26,55,56,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,194,],[-66,-62,-60,-106,-110,-109,-61,-63,-81,-82,-72,107,-108,-100,-60,-107,107,-79,-71,-77,-78,-80,-111,-101,-73,]),'WITH':([0,2,4,7,8,9,12,15,16,17,20,21,22,29,30,31,34,35,73,75,80,81,143,160,169,186,],[-154,-8,10,-156,-166,-163,10,-165,-8,-155,-2,-9,-159,-163,-8,-161,-138,-158,-164,-162,-160,-157,-150,-3,-148,-151,]),'AND':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,179,183,194,251,260,265,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,210,-84,-73,-88,210,-85,]),'STRING':([19,46,57,62,83,86,90,94,96,97,98,99,100,101,103,105,106,107,108,109,115,126,127,128,129,130,131,133,134,135,137,138,139,140,141,142,167,172,174,175,176,178,193,198,203,205,206,209,210,211,212,213,214,215,216,217,218,220,221,230,235,243,245,246,247,248,249,250,253,254,267,268,272,],[69,69,69,69,69,69,69,69,-97,-98,69,-99,69,69,69,-103,69,-102,-104,-105,69,-83,-119,-117,-118,-121,69,-112,-120,-116,-83,-115,-114,69,69,69,69,69,-136,69,-149,69,69,69,69,-113,-137,-83,-86,-87,-89,-91,69,-93,-90,-94,-92,-83,-83,69,69,69,69,-132,-83,-129,-122,69,69,69,-83,-83,-123,]),'(':([5,6,19,26,27,28,32,55,56,57,61,62,63,64,69,88,91,92,94,96,97,98,99,101,103,105,106,107,108,109,117,120,131,132,137,140,150,151,152,153,154,165,167,175,178,185,193,194,209,210,211,212,213,214,215,216,217,218,230,235,243,245,250,],[19,-66,62,-66,77,-17,77,-62,-60,62,101,62,-61,-63,-72,-60,101,145,62,-97,-98,62,-99,62,62,-103,62,-102,-104,-105,167,101,62,101,-83,62,-79,-71,-77,-78,-80,101,62,62,62,101,62,-73,-83,-86,-87,-89,-91,62,-93,-90,-94,-92,62,62,62,62,62,]),'THEN':([26,55,58,60,61,63,64,66,68,69,70,71,72,88,95,149,150,151,152,153,154,158,161,179,182,183,194,251,265,],[-66,-62,-106,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,-96,-79,-71,-77,-78,-80,-111,-101,-126,221,-84,-73,-88,-85,]),'PRAGMA':([0,2,7,8,9,12,15,16,18,20,21,22,29,30,31,33,34,35,39,40,41,42,43,45,48,49,51,52,53,54,73,75,80,81,93,136,143,160,168,169,186,222,232,238,259,274,276,],[1,-8,1,-166,-163,1,-165,-8,1,-2,-9,-159,-163,-8,-161,-147,-138,1,-12,-11,-10,-58,-13,-55,-54,-59,-57,1,-52,-53,-164,-162,-160,1,-56,1,-150,-3,-14,-148,-151,-29,-8,-20,1,-8,1,]),'PROCEDURE':([0,2,4,7,8,9,12,15,16,17,18,20,21,22,29,30,31,33,34,35,39,40,41,42,43,45,48,49,51,52,53,54,73,75,80,81,93,136,143,160,168,169,186,222,238,],[-154,-8,13,-156,-166,-163,13,-165,-8,-155,13,-2,-9,-159,-163,-8,-161,-147,-138,-158,-12,-11,-10,-58,-13,-55,-54,-59,-57,13,-52,-53,-164,-162,-160,-157,-56,13,-150,-3,-14,-148,-151,-29,-20,]),'RECORD':([191,231,275,],[232,258,277,]),'FUNCTION':([0,2,4,7,8,9,12,15,16,17,18,20,21,22,29,30,31,33,34,35,39,40,41,42,43,45,48,49,51,52,53,54,73,75,80,81,93,136,143,160,168,169,186,222,238,],[-154,-8,11,-156,-166,-163,11,-165,-8,-155,11,-2,-9,-159,-163,-8,-161,-147,-138,-158,-12,-11,-10,-58,-13,-55,-54,-59,-57,11,-52,-53,-164,-162,-160,-157,-56,11,-150,-3,-14,-148,-151,-29,-20,]),'OF':([166,244,],[198,-39,]),'IF':([86,126,127,128,129,130,133,134,135,138,139,172,174,176,203,205,206,220,221,246,247,248,249,252,253,254,267,268,272,],[140,-83,-119,-117,-118,-121,-112,-120,-116,-115,-114,140,-136,-149,140,-113,-137,-83,-83,-132,-83,-129,-122,266,140,140,-83,-83,-123,]),'.':([23,24,26,55,56,61,63,64,69,88,91,110,111,120,132,150,151,152,153,154,165,185,194,195,196,256,261,],[74,-67,-66,-62,-60,100,-61,-63,-72,-60,100,-68,74,100,100,-79,-71,-77,-78,-80,100,100,-73,240,-64,240,-65,]),'CHAR':([100,],[151,]),'NuLL':([19,20,21,57,62,94,96,97,98,99,101,103,105,106,107,108,109,131,137,140,160,167,175,178,191,193,209,210,211,212,213,214,215,216,217,218,230,232,235,243,245,250,259,],[68,-2,-9,68,68,68,-97,-98,68,-99,68,68,-103,68,-102,-104,-105,68,-83,68,-3,68,68,68,231,68,-83,-86,-87,-89,-91,68,-93,-90,-94,-92,68,-8,68,68,68,68,269,]),':':([28,36,44,113,122,190,],[-17,83,-15,162,-16,226,]),'TYPE':([18,20,33,34,39,40,41,42,43,45,46,48,49,51,52,53,54,93,136,143,160,168,169,186,222,238,],[50,-2,-147,-138,-12,-11,-10,-58,-13,-55,90,-54,-59,-57,50,-52,-53,-56,50,-150,-3,-14,-148,-151,-29,-20,]),'ELSE':([127,128,129,130,133,134,135,138,139,174,176,181,205,206,246,248,249,268,272,273,],[-119,-117,-118,-121,-112,-120,-116,-115,-114,-136,-149,220,-113,-137,-132,-129,-122,-124,-123,-125,]),'ALL':([100,],[154,]),'ARROW':([26,56,],[-66,94,]),'+':([26,55,56,58,59,60,61,63,64,66,68,69,70,71,72,88,95,102,148,149,150,151,152,153,154,156,158,161,173,180,194,199,207,251,262,],[-66,-62,-60,-106,96,-110,-109,-61,-63,-81,-82,-72,-95,-108,-100,-60,-107,96,96,-96,-79,-71,-77,-78,-80,96,-111,-101,96,96,-73,96,96,96,96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'else_opt':([181,],[219,]),'discrim_part':([92,],[146,]),'mark':([162,226,],[195,256,]),'selected_comp':([19,46,57,62,83,86,90,94,98,101,103,106,115,131,140,141,142,167,172,175,178,193,198,203,214,230,235,243,245,250,253,254,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'simple_expression':([19,62,94,101,103,131,140,167,175,178,193,214,230,235,243,245,250,],[59,102,148,156,59,173,180,199,207,180,156,251,199,180,262,199,180,]),'context_spec':([4,],[12,]),'relation':([140,178,235,250,],[183,183,183,265,]),'parenthesized_primary':([19,57,62,94,98,101,103,106,131,140,167,175,178,193,214,230,235,243,245,250,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'c_name_list':([10,],[25,]),'object_decl':([18,52,136,],[41,41,41,]),'cond_clause':([140,],[181,]),'subprog_body':([4,12,18,52,136,],[8,8,49,49,49,]),'pragma_arg':([19,103,],[67,159,]),'compound_name':([10,76,],[23,111,]),'compilation':([0,],[4,]),'block_decl':([86,172,203,253,254,],[124,124,124,124,124,]),'decl_part':([18,136,],[37,177,]),'operator_symbol':([19,46,57,62,83,86,90,94,98,100,101,103,106,115,131,140,141,142,167,172,175,178,193,198,203,214,230,235,243,245,250,253,254,],[64,64,64,64,64,64,64,64,64,150,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'with_clause':([4,12,],[9,29,]),'discrim_spec_s':([145,],[189,]),'expression':([140,178,235,],[179,179,260,]),'name_s':([46,90,],[89,144,]),'if_stmt':([86,172,203,253,254,],[127,127,127,127,127,]),'assign_stmt':([86,172,203,253,254,],[135,135,135,135,135,]),'iteration':([86,172,203,253,254,],[125,125,125,125,125,]),'decl_item':([18,52,136,],[42,42,42,]),'object_subtype_def':([83,],[119,]),'logical':([179,260,],[209,209,]),'subprog_spec':([4,12,18,52,136,],[14,14,47,47,47,]),'basic_loop':([171,],[204,]),'discrim_spec':([145,225,],[188,255,]),'pragma':([0,7,12,18,35,52,81,136,259,276,],[2,21,31,48,21,48,21,48,21,21,]),'adding':([59,102,148,156,173,180,199,207,251,262,],[98,98,98,98,98,98,98,98,98,98,]),'component_subtype_def':([198,],[241,]),'N':([268,],[273,]),'record_type':([191,],[236,]),'range_s':([167,],[201,]),'constr_array_type':([83,191,],[121,121,]),'block_body':([37,124,],[85,170,]),'factor':([19,62,94,98,101,103,106,131,140,167,175,178,193,214,230,235,243,245,250,],[72,72,72,72,72,72,161,72,72,72,72,72,72,72,72,72,72,72,72,]),'array_type':([83,191,],[116,227,]),'use_clause_opt':([9,29,],[22,80,]),'statement_s':([86,203,253,254,],[126,247,267,268,]),'value_s':([101,],[155,]),'literal':([19,57,62,94,98,101,103,106,131,140,167,175,178,193,214,230,235,243,245,250,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'type_decl':([18,52,136,],[40,40,40,]),'type_def':([191,],[228,]),'integer_type':([191,],[234,]),'block':([86,172,203,253,254,],[130,130,130,130,130,]),'subtype_ind':([83,141,198,],[118,184,242,]),'range':([167,230,245,],[200,257,263,]),'subtype_decl':([18,52,136,],[39,39,39,]),'def_id_s':([18,52,77,136,145,163,225,],[36,36,113,36,190,113,190,]),'name':([19,46,57,62,83,86,90,94,98,101,103,106,115,131,140,141,142,167,172,175,178,193,198,203,214,230,235,243,245,250,253,254,],[61,91,61,61,120,132,91,61,61,61,61,61,165,61,61,120,185,61,132,61,61,61,120,132,61,61,61,61,61,61,132,132,]),'relational':([180,],[214,]),'statement':([86,172,203,253,254,],[133,205,133,133,133,]),'formal_part':([27,32,],[78,78,]),'condition':([140,178,],[182,208,]),'unit':([4,12,],[16,30,]),'M':([125,126,137,209,220,221,247,267,268,],[171,172,178,250,253,254,172,172,172,]),'simple_name':([1,10,19,46,57,62,74,76,83,86,90,94,98,100,101,103,106,115,131,140,141,142,162,167,172,175,178,193,198,203,214,226,230,235,240,243,245,250,253,254,],[5,24,56,88,88,88,110,24,88,88,88,88,88,152,88,56,88,88,88,88,88,88,196,88,88,88,88,88,88,88,88,196,88,88,261,88,88,88,88,88,]),'comp_unit':([4,],[17,]),'value':([101,193,],[157,239,]),'goal_symbol':([0,],[3,]),'term':([19,62,94,98,101,103,131,140,167,175,178,193,214,230,235,243,245,250,],[70,70,70,149,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'simple_stmt':([86,172,203,253,254,],[139,139,139,139,139,]),'iter_index_constraint':([117,],[166,]),'primary':([19,57,62,94,98,101,103,106,131,140,167,175,178,193,214,230,235,243,245,250,],[58,95,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'param_s':([77,],[114,]),'return_stmt':([86,172,203,253,254,],[128,128,128,128,128,]),'procedure_call':([86,172,203,253,254,],[129,129,129,129,129,]),'pragma_s':([2,16,30,232,274,],[7,35,81,259,276,]),'multiplying':([70,149,],[106,106,]),'used_char':([100,],[153,]),'discrim_part_opt':([92,],[147,]),'decl_item_or_body':([18,52,136,],[45,93,45,]),'type_completion':([147,],[192,]),'def_id':([11,13,18,52,77,84,136,145,163,225,],[27,32,44,44,44,122,44,44,44,44,]),'subprog_decl':([4,12,18,52,136,],[15,15,43,43,43,]),'loop_stmt':([86,172,203,253,254,],[134,134,134,134,134,]),'param':([77,163,],[112,197,]),'record_def':([191,],[229,]),'decl':([18,52,136,],[53,53,53,]),'pragma_arg_s':([19,],[65,]),'range_spec':([191,],[233,]),'use_clause':([18,22,52,80,136,],[54,73,54,73,54,]),'range_constraint':([191,],[237,]),'indexed_comp':([19,46,57,62,83,86,90,94,98,101,103,106,115,131,140,141,142,167,172,175,178,193,198,203,214,230,235,243,245,250,253,254,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'compound_stmt':([86,172,203,253,254,],[138,138,138,138,138,]),'body':([18,52,136,],[51,51,51,]),'decl_item_or_body_s':([18,136,],[52,52,]),'comp_list':([259,],[270,]),'subprog_spec_is_push':([4,12,18,52,136,],[18,18,18,18,18,]),'formal_part_opt':([27,32,],[79,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',15),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',21),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',22),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',26),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',27),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',32),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',33),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',37),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',38),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',42),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',43),
  ('decl -> subtype_decl','decl',1,'p_decl','grammar.py',44),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',45),
  ('object_decl -> def_id_s : object_subtype_def ;','object_decl',4,'p_object_decl','grammar.py',49),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',63),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',64),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',69),
  ('object_subtype_def -> subtype_ind','object_subtype_def',1,'p_object_subtype_def','grammar.py',74),
  ('object_subtype_def -> array_type','object_subtype_def',1,'p_object_subtype_def','grammar.py',75),
  ('type_decl -> TYPE IDENTIFIER discrim_part_opt type_completion ;','type_decl',5,'p_type_decl','grammar.py',80),
  ('discrim_part_opt -> <empty>','discrim_part_opt',0,'p_discrim_part_opt','grammar.py',84),
  ('discrim_part_opt -> discrim_part','discrim_part_opt',1,'p_discrim_part_opt','grammar.py',85),
  ('discrim_part_opt -> ( BOX )','discrim_part_opt',3,'p_discrim_part_opt','grammar.py',86),
  ('type_completion -> <empty>','type_completion',0,'p_type_completion','grammar.py',90),
  ('type_completion -> IS type_def','type_completion',2,'p_type_completion','grammar.py',91),
  ('type_def -> integer_type','type_def',1,'p_type_def','grammar.py',95),
  ('type_def -> array_type','type_def',1,'p_type_def','grammar.py',96),
  ('type_def -> record_type','type_def',1,'p_type_def','grammar.py',97),
  ('subtype_decl -> SUBTYPE IDENTIFIER IS subtype_ind ;','subtype_decl',5,'p_subtype_decl','grammar.py',102),
  ('subtype_ind -> name','subtype_ind',1,'p_subtype_ind','grammar.py',106),
  ('range_constraint -> RANGE range','range_constraint',2,'p_range_constraint','grammar.py',111),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',115),
  ('integer_type -> range_spec','integer_type',1,'p_integer_type','grammar.py',122),
  ('integer_type -> MOD expression','integer_type',2,'p_integer_type','grammar.py',123),
  ('range_spec -> range_constraint','range_spec',1,'p_range_spec','grammar.py',127),
  ('array_type -> constr_array_type','array_type',1,'p_array_type','grammar.py',131),
  ('constr_array_type -> ARRAY iter_index_constraint OF component_subtype_def','constr_array_type',4,'p_constr_array_type','grammar.py',136),
  ('component_subtype_def -> subtype_ind','component_subtype_def',1,'p_component_subtype_def','grammar.py',149),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',154),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',159),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',160),
  ('record_type -> record_def','record_type',1,'p_record_type','grammar.py',165),
  ('record_def -> RECORD pragma_s comp_list END RECORD','record_def',5,'p_record_def','grammar.py',169),
  ('record_def -> NuLL RECORD','record_def',2,'p_record_def','grammar.py',170),
  ('comp_list -> NuLL ; pragma_s','comp_list',3,'p_comp_list','grammar.py',174),
  ('discrim_part -> ( discrim_spec_s )','discrim_part',3,'p_discrim_part','grammar.py',178),
  ('discrim_spec_s -> discrim_spec','discrim_spec_s',1,'p_discrim_spec_s','grammar.py',182),
  ('discrim_spec_s -> discrim_spec_s ; discrim_spec','discrim_spec_s',3,'p_discrim_spec_s','grammar.py',183),
  ('discrim_spec -> def_id_s : mark','discrim_spec',3,'p_discrim_spec','grammar.py',188),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',192),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',193),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',197),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',198),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',199),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',203),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',204),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',209),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',210),
  ('body -> subprog_body','body',1,'p_body','grammar.py',215),
  ('name -> simple_name','name',1,'p_name','grammar.py',220),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',221),
  ('name -> selected_comp','name',1,'p_name','grammar.py',222),
  ('name -> operator_symbol','name',1,'p_name','grammar.py',223),
  ('mark -> simple_name','mark',1,'p_mark','grammar.py',229),
  ('mark -> mark . simple_name','mark',3,'p_mark','grammar.py',230),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',237),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',243),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',244),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',250),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',251),
  ('used_char -> CHAR','used_char',1,'p_used_char','grammar.py',256),
  ('operator_symbol -> STRING','operator_symbol',1,'p_operator_symbol','grammar.py',260),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',264),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',298),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',299),
  ('value -> simple_expression','value',1,'p_value','grammar.py',305),
  ('selected_comp -> name . simple_name','selected_comp',3,'p_selected_comp','grammar.py',310),
  ('selected_comp -> name . used_char','selected_comp',3,'p_selected_comp','grammar.py',311),
  ('selected_comp -> name . operator_symbol','selected_comp',3,'p_selected_comp','grammar.py',312),
  ('selected_comp -> name . ALL','selected_comp',3,'p_selected_comp','grammar.py',313),
  ('literal -> INT','literal',1,'p_literal','grammar.py',317),
  ('literal -> NuLL','literal',1,'p_literal','grammar.py',318),
  ('M -> <empty>','M',0,'p_M','grammar.py',323),
  ('expression -> relation','expression',1,'p_expression','grammar.py',328),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',329),
  ('logical -> AND','logical',1,'p_logical','grammar.py',347),
  ('logical -> OR','logical',1,'p_logical','grammar.py',348),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',354),
  ('relational -> =','relational',1,'p_relational','grammar.py',364),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',365),
  ('relational -> <','relational',1,'p_relational','grammar.py',366),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',367),
  ('relational -> >','relational',1,'p_relational','grammar.py',368),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',369),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',374),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',375),
  ('adding -> +','adding',1,'p_adding','grammar.py',386),
  ('adding -> -','adding',1,'p_adding','grammar.py',387),
  ('adding -> &','adding',1,'p_adding','grammar.py',388),
  ('term -> factor','term',1,'p_term','grammar.py',393),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',394),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',405),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',406),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',407),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',408),
  ('factor -> primary','factor',1,'p_factor','grammar.py',414),
  ('factor -> NOT primary','factor',2,'p_factor','grammar.py',415),
  ('primary -> literal','primary',1,'p_primary','grammar.py',421),
  ('primary -> name','primary',1,'p_primary','grammar.py',422),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',423),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',429),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',434),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',435),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',444),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',445),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',451),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',452),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',453),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',458),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',459),
  ('compound_stmt -> block','compound_stmt',1,'p_compound_stmt','grammar.py',460),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',466),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',474),
  ('N -> <empty>','N',0,'p_N','grammar.py',482),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',489),
  ('condition -> expression','condition',1,'p_condition','grammar.py',496),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',501),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',502),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',512),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',521),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',527),
  ('block -> block_decl block_body END ;','block',4,'p_block','grammar.py',532),
  ('block_decl -> <empty>','block_decl',0,'p_block_decl','grammar.py',536),
  ('block_decl -> DECLARE decl_part','block_decl',2,'p_block_decl','grammar.py',537),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',541),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',546),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',547),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',555),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',562),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',563),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',574),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',575),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',580),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',585),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',586),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',595),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',605),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',609),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',613),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',617),
  ('use_clause -> USE TYPE name_s ;','use_clause',4,'p_use_clause','grammar.py',618),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',622),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',623),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',628),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',629),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',630),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',634),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',635),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',639),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',640),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',641),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',645),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',649),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',650),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',654),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',655),
]
