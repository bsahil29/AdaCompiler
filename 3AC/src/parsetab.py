
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolABORT ABS ABSTRACT ACCEPT ACCESS ALIASED ALL AND ARRAY ARROW ASSIGN AT BEGIN BODY BOX CASE CHAR CONSTANT DECLARE DELAY DELTA DIGITS DO DOTDOT ELSE ELSIF END ENTRY EXCEPTION EXIT FIN FLOAT FOR FUNCTION GENERIC GEQ IDENTIFIER IF IN INT IS LEQ LIMITED LL LOOP MOD NEQ NEW NOT NuLL OF OR OTHERS OUT PACKAGE PRAGMA PRIVATE PROCEDURE PROTECTED RAISE RANGE RECORD REM RENAMES REQUEUE RETURN REVERSE RR SELECT SEPARATE STARSTAR STRING SUBTYPE TAGGED TASK TERMINATE THEN TICK TYPE UNTIL USE WHEN WHILE WITH XORgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | type_decl\n\t   | subtype_decl\n\t   | subprog_decl\n\tobject_decl : def_id_s ':' object_subtype_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_subtype_def : subtype_ind\n\t   | array_type\n\ttype_decl : TYPE IDENTIFIER discrim_part_opt type_completion ';'\n\tdiscrim_part_opt :\n\t   | discrim_part\n\t   | '(' BOX ')'\n\ttype_completion :\n\t   | IS type_def\n\ttype_def : integer_type\n\t   | array_type\n\t   | record_type\n\tsubtype_decl : SUBTYPE IDENTIFIER IS subtype_ind ';'\n\tsubtype_ind : name\n\trange_constraint : RANGE range\n\trange : simple_expression DOTDOT simple_expression\n\tinteger_type : range_spec\n\t   | MOD expression\n\trange_spec : range_constraint\n\tarray_type : constr_array_type\n\tconstr_array_type : ARRAY iter_index_constraint OF component_subtype_def\n\tcomponent_subtype_def : subtype_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_type : record_def\n\trecord_def : RECORD pragma_s comp_list END RECORD\n\t   | NuLL RECORD\n\tcomp_list : NuLL ';' pragma_s\n\tdiscrim_part : '(' discrim_spec_s ')'\n\tdiscrim_spec_s : discrim_spec\n\t   | discrim_spec_s ';' discrim_spec\n\tdiscrim_spec : def_id_s ':' mark\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : simple_name\n\t   | indexed_comp\n\t   | selected_comp\n\t   | operator_symbol\n\tmark : simple_name\n\t   | mark '.' simple_name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tused_char : CHAR\n\toperator_symbol : STRING\n\tindexed_comp : name '(' value_s ')'\n    value_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tselected_comp : name '.' simple_name\n\t   | name '.' used_char\n\t   | name '.' operator_symbol\n\t   | name '.' ALL\n\tliteral : INT\n\t   | NuLL\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\t   | '&'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\t\t\t| NOT primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\t   | block\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock : block_decl block_body END ';'\n\tblock_decl :\n\t   | DECLARE decl_part\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\t   | FUNCTION def_id\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\t   | USE TYPE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {uLL':([52,53,54,83,84,101,125,126,128,134,136,137,138,139,140,143,144,145,146,147,164,169,176,185,188,196,207,208,209,210,211,212,213,214,215,216,232,235,236,243,244,250,259,],[-9,93,-2,93,93,93,93,-83,93,93,-103,93,-104,-105,-102,93,-97,-98,-99,93,93,93,93,237,-3,93,-87,-83,-86,-90,93,-94,-89,-92,-91,-93,93,93,-8,93,93,93,270,]),'+':([31,67,68,70,71,73,82,85,86,87,88,89,90,91,92,93,141,142,152,153,154,155,156,158,172,177,189,190,191,192,197,199,206,251,262,],[-66,-63,-60,-61,-72,-62,-95,144,-106,-110,-108,-100,-109,-60,-81,-82,-107,144,-78,-71,-77,-80,-79,144,144,144,-101,-111,-96,144,-73,144,144,144,144,]),',':([26,28,29,30,31,35,38,66,67,68,69,70,71,73,80,81,82,85,86,87,88,89,90,91,92,93,97,98,99,104,105,141,152,153,154,155,156,157,158,159,160,184,187,189,190,191,192,197,200,201,240,262,263,],[-17,63,-67,-69,-66,-15,74,-153,-63,-60,103,-61,-72,-62,-4,134,-95,-6,-106,-110,-108,-100,-109,-60,-81,-82,74,-70,-68,103,-16,-107,-78,-71,-77,-80,-79,-74,-76,196,-154,74,-5,-101,-111,-96,-7,-73,244,-40,-75,-32,-41,]),'ELSE':([112,115,116,118,120,121,122,123,127,170,174,178,202,221,246,248,249,266,272,273,],[-114,-112,-119,-118,-121,-117,-116,-120,-115,-150,219,-136,-113,-137,-129,-132,-122,-124,-125,-123,]),'OF':([163,245,],[198,-39,]),'-':([31,67,68,70,71,73,82,85,86,87,88,89,90,91,92,93,141,142,152,153,154,155,156,158,172,177,189,190,191,192,197,199,206,251,262,],[-66,-63,-60,-61,-72,-62,-95,145,-106,-110,-108,-100,-109,-60,-81,-82,-107,145,-78,-71,-77,-80,-79,145,145,145,-101,-111,-96,145,-73,145,145,145,145,]),'NOT':([53,84,101,125,126,128,134,136,137,138,139,140,143,144,145,146,147,164,169,176,196,207,208,209,210,211,212,213,214,215,216,232,235,243,244,250,],[83,83,83,83,-83,83,83,-103,83,-104,-105,-102,83,-97,-98,-99,83,83,83,83,83,-87,-83,-86,-90,83,-94,-89,-92,-91,-93,83,83,83,83,83,]),'STARSTAR':([31,67,68,70,71,73,82,86,87,88,89,90,91,92,93,141,152,153,154,155,156,189,190,191,197,],[-66,-63,-60,-61,-72,-62,139,-106,-110,-108,-100,-109,-60,-81,-82,-107,-78,-71,-77,-80,-79,-101,-111,139,-73,]),'THEN':([31,67,68,70,71,73,82,86,87,88,89,90,92,93,141,152,153,154,155,156,171,173,175,189,190,191,197,251,265,],[-66,-63,-60,-61,-72,-62,-95,-106,-110,-108,-100,-109,-81,-82,-107,-78,-71,-77,-80,-79,-126,217,-84,-101,-111,-96,-73,-88,-85,]),')':([31,67,68,70,71,73,80,81,82,85,86,87,88,89,90,91,92,93,95,96,141,142,152,153,154,155,156,157,158,159,181,182,183,187,189,190,191,192,193,194,195,197,200,201,240,255,256,261,262,263,],[-66,-63,-60,-61,-72,-62,-4,135,-95,-6,-106,-110,-108,-100,-109,-60,-81,-82,-145,150,-107,190,-78,-71,-77,-80,-79,-74,-76,197,223,225,-47,-5,-101,-111,-96,-7,-146,-64,-147,-73,245,-40,-75,-48,-49,-65,-32,-41,]),'MOD':([31,67,68,70,71,73,82,86,87,88,89,90,91,92,93,141,152,153,154,155,156,185,189,190,191,197,],[-66,-63,-60,-61,-72,-62,138,-106,-110,-108,-100,-109,-60,-81,-82,-107,-78,-71,-77,-80,-79,235,-101,-111,138,-73,]),'PRAGMA':([0,2,5,6,10,12,14,15,16,19,20,21,22,23,24,32,33,34,37,39,41,42,44,46,47,48,49,50,52,54,55,56,57,62,65,102,114,161,162,179,188,222,236,238,259,275,277,],[3,-8,3,-164,-167,-166,-8,3,3,-164,-162,-8,-160,-148,-138,3,3,-57,-58,-54,-53,-55,-52,-12,-10,-59,-13,-11,-9,-2,-161,3,-165,-163,-56,-151,3,-152,-14,-149,-3,-29,-8,-20,3,-8,3,]),'ARROW':([31,91,],[-66,147,]),'AND':([31,67,68,70,71,73,82,86,87,88,89,90,92,93,141,152,153,154,155,156,171,175,189,190,191,197,251,258,265,],[-66,-63,-60,-61,-72,-62,-95,-106,-110,-108,-100,-109,-81,-82,-107,-78,-71,-77,-80,-79,209,-84,-101,-111,-96,-73,-88,209,-85,]),'>':([31,67,68,70,71,73,82,86,87,88,89,90,92,93,141,152,153,154,155,156,172,189,190,191,197,],[-66,-63,-60,-61,-72,-62,-95,-106,-110,-108,-100,-109,-81,-82,-107,-78,-71,-77,-80,-79,216,-101,-111,-96,-73,]),'WHILE':([76,112,113,115,116,118,120,121,122,123,127,165,170,178,202,204,217,219,221,246,247,248,249,252,254,266,268,273,],[126,-114,-83,-112,-119,-118,-121,-117,-116,-120,-115,126,-150,-136,-113,126,-83,-83,-137,-129,-83,-132,-122,126,126,-83,-83,-123,]),'SUBTYPE':([15,23,24,33,34,37,39,41,42,44,46,47,48,49,50,54,65,102,114,161,162,179,188,222,238,],[45,-148,-138,45,-57,-58,-54,-53,-55,-52,-12,-10,-59,-13,-11,-2,-56,-151,45,-152,-14,-149,-3,-29,-20,]),'$end':([0,1,2,4,10,12,13,14,16,21,24,32,52,54,56,179,188,],[-155,-1,-8,0,-167,-166,-156,-8,-157,-8,-138,-159,-9,-2,-158,-149,-3,]),':':([26,35,38,97,105,184,],[-17,-15,75,151,-16,226,]),'WITH':([0,1,2,5,6,10,12,13,14,16,19,20,21,22,24,32,52,54,55,56,57,62,102,161,179,188,],[-155,11,-8,11,-164,-167,-166,-156,-8,-157,-164,-162,-8,-160,-138,-159,-9,-2,-161,-158,-165,-163,-151,-152,-149,-3,]),';':([7,18,25,26,27,28,29,30,31,43,58,61,66,67,68,69,70,71,73,79,82,86,87,88,89,90,92,93,95,96,98,99,104,106,107,108,109,110,124,128,129,132,133,135,141,148,150,152,153,154,155,156,160,175,177,180,182,183,186,189,190,191,193,194,195,197,203,205,206,223,225,227,228,229,230,231,233,234,241,242,251,255,256,257,258,260,261,262,265,267,270,271,276,],[24,54,-141,-17,-142,62,-67,-69,-66,24,-143,-139,-153,-63,-60,102,-61,-72,-62,-21,-95,-106,-110,-108,-100,-109,-81,-82,-145,149,-70,-68,161,-18,162,-30,-19,-36,170,178,179,-22,-24,188,-107,-140,-144,-78,-71,-77,-80,-79,-154,-84,221,222,224,-47,238,-101,-111,-96,-146,-64,-147,-73,246,248,249,-23,-46,-42,-35,-25,-28,-27,-33,-26,-38,-37,-88,-48,-49,-31,-34,-44,-65,-32,-85,273,275,-131,-43,]),'RECORD':([185,237,274,],[236,260,276,]),'PROCEDURE':([0,1,2,5,6,10,12,13,14,15,16,19,20,21,22,23,24,32,33,34,37,39,41,42,44,46,47,48,49,50,52,54,55,56,57,62,65,102,114,161,162,179,188,222,238,],[-155,9,-8,9,-164,-167,-166,-156,-8,9,-157,-164,-162,-8,-160,-148,-138,-159,9,-57,-58,-54,-53,-55,-52,-12,-10,-59,-13,-11,-9,-2,-161,-158,-165,-163,-56,-151,9,-152,-14,-149,-3,-29,-20,]),'.':([29,30,31,66,67,68,70,71,73,90,91,98,99,108,124,148,152,153,154,155,156,160,194,195,197,256,261,],[-67,64,-66,100,-63,-60,-61,-72,-62,100,-60,64,-68,100,100,100,-78,-71,-77,-80,-79,100,-64,239,-73,239,-65,]),'BEGIN':([15,23,24,33,34,37,39,40,41,42,44,46,47,48,49,50,54,65,76,102,112,113,114,115,116,118,119,120,121,122,123,127,161,162,165,166,170,178,179,188,202,204,217,219,221,222,238,246,247,248,249,252,254,266,268,273,],[-50,-148,-138,-51,-57,-58,-54,76,-53,-55,-52,-12,-10,-59,-13,-11,-2,-56,-133,-151,-114,-83,-50,-112,-119,-118,76,-121,-117,-116,-120,-115,-152,-14,-133,-134,-150,-136,-149,-3,-113,-133,-83,-83,-137,-29,-20,-129,-83,-132,-122,-133,-133,-83,-83,-123,]),'ARRAY':([75,185,],[111,111,]),'<':([31,67,68,70,71,73,82,86,87,88,89,90,92,93,141,152,153,154,155,156,172,189,190,191,197,],[-66,-63,-60,-61,-72,-62,-95,-106,-110,-108,-100,-109,-81,-82,-107,-78,-71,-77,-80,-79,215,-101,-111,-96,-73,]),'&':([31,67,68,70,71,73,82,85,86,87,88,89,90,91,92,93,141,142,152,153,154,155,156,158,172,177,189,190,191,192,197,199,206,251,262,],[-66,-63,-60,-61,-72,-62,-95,146,-106,-110,-108,-100,-109,-60,-81,-82,-107,146,-78,-71,-77,-80,-79,146,146,146,-101,-111,-96,146,-73,146,146,146,146,]),'DOTDOT':([31,67,68,70,71,73,82,86,87,88,89,90,92,93,141,152,153,154,155,156,189,190,191,197,199,],[-66,-63,-60,-61,-72,-62,-95,-106,-110,-108,-100,-109,-81,-82,-107,-78,-71,-77,-80,-79,-101,-111,-96,-73,243,]),'TYPE':([15,23,24,33,34,36,37,39,41,42,44,46,47,48,49,50,54,65,102,114,161,162,179,188,222,238,],[51,-148,-138,51,-57,72,-58,-54,-53,-55,-52,-12,-10,-59,-13,-11,-2,-56,-151,51,-152,-14,-149,-3,-29,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'pragma_arg':([53,134,],[80,187,]),'iter_index_constraint':([111,],[163,]),'body':([15,33,114,],[34,34,34,]),'pragma_arg_s':([53,],[81,]),'simple_stmt':([76,165,204,252,254,],[112,112,112,112,112,]),'record_type':([185,],[230,]),'iteration':([76,165,204,252,254,],[117,117,117,117,117,]),'adding':([85,142,158,172,177,192,199,206,251,262,],[143,143,143,143,143,143,143,143,143,143,]),'use_clause_opt':([6,19,],[22,55,]),'def_id_s':([15,33,60,114,131,149,224,],[38,38,97,38,184,97,184,]),'parenthesized_primary':([53,83,84,101,125,128,134,137,143,147,164,169,176,196,211,232,235,243,244,250,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'subprog_spec':([1,5,15,33,114,],[7,7,43,43,43,]),'selected_comp':([36,53,72,75,76,83,84,94,101,103,125,128,130,134,137,143,147,164,165,169,176,196,198,204,211,232,235,243,244,250,252,254,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'literal':([53,83,84,101,125,128,134,137,143,147,164,169,176,196,211,232,235,243,244,250,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'subprog_decl':([1,5,15,33,114,],[12,12,49,49,49,]),'param':([60,149,],[95,193,]),'relational':([172,],[211,]),'assign_stmt':([76,165,204,252,254,],[122,122,122,122,122,]),'subtype_decl':([15,33,114,],[46,46,46,]),'object_decl':([15,33,114,],[47,47,47,]),'statement':([76,165,204,252,254,],[115,202,115,115,115,]),'decl_item_or_body':([15,33,114,],[42,65,42,]),'type_decl':([15,33,114,],[50,50,50,]),'c_name_list':([11,],[28,]),'basic_loop':([167,],[203,]),'compound_stmt':([76,165,204,252,254,],[127,127,127,127,127,]),'discrim_spec':([131,224,],[183,255,]),'compilation':([0,],[1,]),'M':([113,117,126,208,217,219,247,266,268,],[165,167,176,250,252,254,165,165,165,]),'unit':([1,5,],[14,21,]),'name_s':([36,72,],[69,104,]),'subtype_ind':([75,130,198,],[106,180,241,]),'object_subtype_def':([75,],[107,]),'N':([266,],[272,]),'type_def':([185,],[229,]),'with_clause':([1,5,],[6,19,]),'decl_item':([15,33,114,],[37,37,37,]),'primary':([53,83,84,101,125,128,134,137,143,147,164,169,176,196,211,232,235,243,244,250,],[86,141,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'value':([101,196,],[157,240,]),'range_constraint':([185,],[228,]),'range_s':([164,],[200,]),'decl':([15,33,114,],[44,44,44,]),'loop_stmt':([76,165,204,252,254,],[123,123,123,123,123,]),'mark':([151,226,],[195,256,]),'block_decl':([76,165,204,252,254,],[119,119,119,119,119,]),'subprog_body':([1,5,15,33,114,],[10,10,48,48,48,]),'formal_part':([25,27,],[58,58,]),'simple_name':([3,11,36,53,63,64,72,75,76,83,84,94,100,101,103,125,128,130,134,137,143,147,151,164,165,169,176,196,198,204,211,226,232,235,239,243,244,250,252,254,],[17,29,68,91,29,99,68,68,68,68,68,68,154,68,68,68,68,68,91,68,68,68,194,68,68,68,68,68,68,68,68,194,68,68,261,68,68,68,68,68,]),'else_opt':([174,],[218,]),'condition':([125,176,],[173,220,]),'discrim_part_opt':([79,],[133,]),'context_spec':([1,],[5,]),'record_def':([185,],[227,]),'compound_name':([11,63,],[30,98,]),'comp_unit':([1,],[13,]),'if_stmt':([76,165,204,252,254,],[116,116,116,116,116,]),'def_id':([8,9,15,33,60,74,114,131,149,224,],[25,27,35,35,35,105,35,35,35,35,]),'type_completion':([133,],[186,]),'decl_part':([15,114,],[40,166,]),'component_subtype_def':([198,],[242,]),'array_type':([75,185,],[109,231,]),'pragma_s':([2,14,21,236,275,],[16,32,56,259,277,]),'formal_part_opt':([25,27,],[59,61,]),'param_s':([60,],[96,]),'factor':([53,84,101,125,128,134,137,143,147,164,169,176,196,211,232,235,243,244,250,],[89,89,89,89,89,89,189,89,89,89,89,89,89,89,89,89,89,89,89,]),'discrim_spec_s':([131,],[182,]),'term':([53,84,101,125,128,134,143,147,164,169,176,196,211,232,235,243,244,250,],[82,82,82,82,82,82,191,82,82,82,82,82,82,82,82,82,82,82,]),'range_spec':([185,],[233,]),'comp_list':([259,],[269,]),'used_char':([100,],[152,]),'indexed_comp':([36,53,72,75,76,83,84,94,101,103,125,128,130,134,137,143,147,164,165,169,176,196,198,204,211,232,235,243,244,250,252,254,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'goal_symbol':([0,],[4,]),'use_clause':([15,22,33,55,114,],[41,57,41,57,41,]),'decl_item_or_body_s':([15,114,],[33,33,]),'logical':([171,258,],[208,208,]),'block_body':([40,119,],[77,168,]),'discrim_part':([79,],[132,]),'statement_s':([76,204,252,254,],[113,247,266,268,]),'expression':([125,176,235,],[171,171,258,]),'operator_symbol':([36,53,72,75,76,83,84,94,100,101,103,125,128,130,134,137,143,147,164,165,169,176,196,198,204,211,232,235,243,244,250,252,254,],[67,67,67,67,67,67,67,67,156,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'multiplying':([82,191,],[137,137,]),'simple_expression':([53,84,101,125,128,134,147,164,169,176,196,211,232,235,243,244,250,],[85,142,158,172,177,85,192,199,206,172,158,251,199,172,262,199,172,]),'value_s':([101,],[159,]),'pragma':([0,5,15,16,32,33,56,114,259,277,],[2,20,39,52,52,39,52,39,52,52,]),'cond_clause':([125,],[174,]),'procedure_call':([76,165,204,252,254,],[118,118,118,118,118,]),'block':([76,165,204,252,254,],[120,120,120,120,120,]),'return_stmt':([76,165,204,252,254,],[121,121,121,121,121,]),'name':([36,53,72,75,76,83,84,94,101,103,125,128,130,134,137,143,147,164,165,169,176,196,198,204,211,232,235,243,244,250,252,254,],[66,90,66,108,124,90,90,148,90,160,90,90,108,90,90,90,90,90,124,90,90,90,108,124,90,90,90,90,90,90,124,124,]),'subprog_spec_is_push':([1,5,15,33,114,],[15,15,15,15,15,]),'constr_array_type':([75,185,],[110,110,]),'relation':([125,176,235,250,],[175,175,175,265,]),'range':([164,232,244,],[201,257,263,]),'integer_type':([185,],[234,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',15),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',21),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',22),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',26),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',27),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',32),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',33),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',37),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',38),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',42),
  ('decl -> type_decl','decl',1,'p_decl','grammar.py',43),
  ('decl -> subtype_decl','decl',1,'p_decl','grammar.py',44),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',45),
  ('object_decl -> def_id_s : object_subtype_def ;','object_decl',4,'p_object_decl','grammar.py',49),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',63),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',64),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',69),
  ('object_subtype_def -> subtype_ind','object_subtype_def',1,'p_object_subtype_def','grammar.py',74),
  ('object_subtype_def -> array_type','object_subtype_def',1,'p_object_subtype_def','grammar.py',75),
  ('type_decl -> TYPE IDENTIFIER discrim_part_opt type_completion ;','type_decl',5,'p_type_decl','grammar.py',80),
  ('discrim_part_opt -> <empty>','discrim_part_opt',0,'p_discrim_part_opt','grammar.py',84),
  ('discrim_part_opt -> discrim_part','discrim_part_opt',1,'p_discrim_part_opt','grammar.py',85),
  ('discrim_part_opt -> ( BOX )','discrim_part_opt',3,'p_discrim_part_opt','grammar.py',86),
  ('type_completion -> <empty>','type_completion',0,'p_type_completion','grammar.py',90),
  ('type_completion -> IS type_def','type_completion',2,'p_type_completion','grammar.py',91),
  ('type_def -> integer_type','type_def',1,'p_type_def','grammar.py',95),
  ('type_def -> array_type','type_def',1,'p_type_def','grammar.py',96),
  ('type_def -> record_type','type_def',1,'p_type_def','grammar.py',97),
  ('subtype_decl -> SUBTYPE IDENTIFIER IS subtype_ind ;','subtype_decl',5,'p_subtype_decl','grammar.py',102),
  ('subtype_ind -> name','subtype_ind',1,'p_subtype_ind','grammar.py',106),
  ('range_constraint -> RANGE range','range_constraint',2,'p_range_constraint','grammar.py',111),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',115),
  ('integer_type -> range_spec','integer_type',1,'p_integer_type','grammar.py',122),
  ('integer_type -> MOD expression','integer_type',2,'p_integer_type','grammar.py',123),
  ('range_spec -> range_constraint','range_spec',1,'p_range_spec','grammar.py',127),
  ('array_type -> constr_array_type','array_type',1,'p_array_type','grammar.py',131),
  ('constr_array_type -> ARRAY iter_index_constraint OF component_subtype_def','constr_array_type',4,'p_constr_array_type','grammar.py',136),
  ('component_subtype_def -> subtype_ind','component_subtype_def',1,'p_component_subtype_def','grammar.py',149),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',154),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',159),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',160),
  ('record_type -> record_def','record_type',1,'p_record_type','grammar.py',165),
  ('record_def -> RECORD pragma_s comp_list END RECORD','record_def',5,'p_record_def','grammar.py',169),
  ('record_def -> NuLL RECORD','record_def',2,'p_record_def','grammar.py',170),
  ('comp_list -> NuLL ; pragma_s','comp_list',3,'p_comp_list','grammar.py',174),
  ('discrim_part -> ( discrim_spec_s )','discrim_part',3,'p_discrim_part','grammar.py',178),
  ('discrim_spec_s -> discrim_spec','discrim_spec_s',1,'p_discrim_spec_s','grammar.py',182),
  ('discrim_spec_s -> discrim_spec_s ; discrim_spec','discrim_spec_s',3,'p_discrim_spec_s','grammar.py',183),
  ('discrim_spec -> def_id_s : mark','discrim_spec',3,'p_discrim_spec','grammar.py',188),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',192),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',193),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',197),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',198),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',199),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',203),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',204),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',209),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',210),
  ('body -> subprog_body','body',1,'p_body','grammar.py',215),
  ('name -> simple_name','name',1,'p_name','grammar.py',220),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',221),
  ('name -> selected_comp','name',1,'p_name','grammar.py',222),
  ('name -> operator_symbol','name',1,'p_name','grammar.py',223),
  ('mark -> simple_name','mark',1,'p_mark','grammar.py',229),
  ('mark -> mark . simple_name','mark',3,'p_mark','grammar.py',230),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',237),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',243),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',244),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',250),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',251),
  ('used_char -> CHAR','used_char',1,'p_used_char','grammar.py',256),
  ('operator_symbol -> STRING','operator_symbol',1,'p_operator_symbol','grammar.py',260),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',264),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',298),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',299),
  ('value -> simple_expression','value',1,'p_value','grammar.py',305),
  ('selected_comp -> name . simple_name','selected_comp',3,'p_selected_comp','grammar.py',310),
  ('selected_comp -> name . used_char','selected_comp',3,'p_selected_comp','grammar.py',311),
  ('selected_comp -> name . operator_symbol','selected_comp',3,'p_selected_comp','grammar.py',312),
  ('selected_comp -> name . ALL','selected_comp',3,'p_selected_comp','grammar.py',313),
  ('literal -> INT','literal',1,'p_literal','grammar.py',317),
  ('literal -> NuLL','literal',1,'p_literal','grammar.py',318),
  ('M -> <empty>','M',0,'p_M','grammar.py',323),
  ('expression -> relation','expression',1,'p_expression','grammar.py',328),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',329),
  ('logical -> AND','logical',1,'p_logical','grammar.py',347),
  ('logical -> OR','logical',1,'p_logical','grammar.py',348),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',354),
  ('relational -> =','relational',1,'p_relational','grammar.py',364),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',365),
  ('relational -> <','relational',1,'p_relational','grammar.py',366),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',367),
  ('relational -> >','relational',1,'p_relational','grammar.py',368),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',369),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',374),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',375),
  ('adding -> +','adding',1,'p_adding','grammar.py',386),
  ('adding -> -','adding',1,'p_adding','grammar.py',387),
  ('adding -> &','adding',1,'p_adding','grammar.py',388),
  ('term -> factor','term',1,'p_term','grammar.py',393),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',394),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',405),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',406),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',407),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',408),
  ('factor -> primary','factor',1,'p_factor','grammar.py',414),
  ('factor -> NOT primary','factor',2,'p_factor','grammar.py',415),
  ('primary -> literal','primary',1,'p_primary','grammar.py',421),
  ('primary -> name','primary',1,'p_primary','grammar.py',422),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',423),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',429),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',434),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',435),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',444),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',445),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',451),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',452),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',453),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',458),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',459),
  ('compound_stmt -> block','compound_stmt',1,'p_compound_stmt','grammar.py',460),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',466),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',474),
  ('N -> <empty>','N',0,'p_N','grammar.py',482),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',489),
  ('condition -> expression','condition',1,'p_condition','grammar.py',496),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',501),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',502),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',512),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',521),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',527),
  ('block -> block_decl block_body END ;','block',4,'p_block','grammar.py',532),
  ('block_decl -> <empty>','block_decl',0,'p_block_decl','grammar.py',536),
  ('block_decl -> DECLARE decl_part','block_decl',2,'p_block_decl','grammar.py',537),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',541),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',546),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',547),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',551),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',558),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',559),
  ('subprog_spec -> FUNCTION def_id','subprog_spec',2,'p_subprog_spec','grammar.py',560),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',569),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',570),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',575),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',580),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',581),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',590),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',599),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',603),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',607),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',611),
  ('use_clause -> USE TYPE name_s ;','use_clause',4,'p_use_clause','grammar.py',612),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',616),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',617),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',622),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',623),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',624),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',628),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',629),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',633),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',634),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',635),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',639),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',643),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',644),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',648),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',649),
]
