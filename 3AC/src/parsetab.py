
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolABORT ABS ABSTRACT ACCEPT ACCESS ALIASED ALL AND ARRAY ARROW ASSIGN AT BEGIN BODY BOX CASE CHAR CONSTANT DECLARE DELAY DELTA DIGITS DO DOTDOT ELSE ELSIF END ENTRY EXCEPTION EXIT FLOAT FOR FUNCTION GENERIC GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LIMITED LL LOOP MOD NEQ NEW NOT NuLL OF OR OTHERS OUT PACKAGE PRAGMA PRIVATE PROCEDURE PROTECTED RAISE RANGE RECORD REM RENAMES REQUEUE RETURN REVERSE RR SELECT SEPARATE STARSTAR STRING SUBTYPE TAGGED TASK TERMINATE THEN TICK TYPE UNTIL USE WHAT WHEN WHILE WITH XORgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : constr_array_type\n\tconstr_array_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\t\t| name '(' STRING ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'IDENTIFIER':([4,5,6,7,9,27,29,30,31,32,33,34,35,36,37,40,42,43,44,45,47,48,53,54,55,59,60,63,64,65,68,76,95,106,107,108,109,111,112,114,115,116,117,118,119,120,121,123,124,125,126,127,129,130,131,132,133,134,135,136,138,139,140,143,144,146,149,157,158,160,161,162,172,180,182,183,184,185,186,187,188,190,191,192,193,194,195,196,197,198,201,203,206,207,209,211,212,213,215,217,218,219,226,228,232,],[17,19,19,22,19,-33,19,-10,-12,-36,-38,66,-37,-34,-32,-11,-13,22,22,-31,-116,-107,-2,22,19,22,22,22,19,-35,22,22,22,19,-85,22,22,-90,-86,159,-88,-84,-82,-55,-87,-55,-89,22,-73,-74,-75,-76,22,22,-69,-70,-91,22,-119,22,22,22,19,-14,22,19,-105,-118,22,22,22,-117,-3,22,-20,-92,-106,-58,-59,-55,-55,-55,-64,-65,22,-63,-61,-62,-66,22,22,-83,22,22,22,19,22,22,22,-55,-100,-93,-55,-55,-94,]),'LEQ':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,191,-72,-81,-68,-48,-47,]),')':([22,24,70,71,72,73,74,75,77,78,79,80,81,87,88,89,90,92,93,96,128,163,164,165,166,167,168,169,171,173,174,175,176,177,179,204,205,221,222,223,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-43,137,-4,-6,-113,141,-44,164,-72,-81,-49,204,205,-51,-68,-7,-5,-41,-115,-114,208,-26,-48,-47,-50,-27,-22,]),'-':([22,24,70,71,72,73,74,75,77,78,79,80,81,82,87,90,96,128,150,155,163,164,168,169,171,178,200,204,205,216,223,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,132,-43,132,-44,132,132,132,-72,-81,132,-68,132,132,132,-48,-47,132,132,]),';':([11,17,19,21,22,23,24,25,38,57,58,70,71,72,73,74,75,77,78,79,80,81,82,83,84,92,93,96,97,98,99,100,101,102,108,113,122,137,141,142,147,150,163,164,169,170,174,175,176,181,199,200,204,205,210,227,230,233,],[48,53,-17,-110,-42,-45,-43,61,48,-111,-108,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,133,-120,135,-113,140,-44,-46,-19,-21,-18,-23,143,149,157,162,172,-112,-109,182,184,-72,-81,-68,-121,-41,-115,-114,211,218,219,-48,-47,-24,232,-28,-103,]),'IN':([159,],[201,]),'ARRAY':([63,],[103,]),'.':([22,23,24,70,87,96,97,],[-42,59,-43,59,-43,-44,59,]),'NEQ':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,196,-72,-81,-68,-48,-47,]),'DOTDOT':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,163,164,169,178,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,-72,-81,-68,209,-48,-47,]),'IS':([11,19,21,22,24,38,57,58,66,70,75,96,141,142,204,205,],[47,-17,-110,-42,-43,47,-111,-108,105,-39,-40,-44,-112,-109,-48,-47,]),'ASSIGN':([19,22,24,39,70,75,96,113,204,205,],[-17,-42,-43,67,-39,-40,-44,158,-48,-47,]),'AND':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,151,152,163,164,169,204,205,216,225,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,-56,185,-72,-81,-68,-48,-47,-60,-57,]),'LAMBDA':([67,],[106,]),'INT':([43,54,76,108,109,118,123,124,125,126,127,129,130,131,132,136,138,144,158,160,183,185,186,187,191,192,193,194,195,196,197,201,206,207,209,212,],[78,78,78,78,78,-55,78,-73,-74,-75,-76,78,78,-69,-70,78,78,78,78,78,-92,-58,-59,-55,-64,-65,78,-63,-61,-62,-66,78,78,78,78,78,]),'RECORD':([105,224,],[146,230,]),'/':([22,24,70,71,72,73,74,75,77,78,79,80,81,87,96,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,125,-40,-79,-53,-71,-78,-54,-43,-44,-72,-81,125,-48,-47,]),',':([19,22,23,24,25,28,39,70,71,72,73,74,75,77,78,79,80,81,83,84,87,88,89,90,91,94,96,97,104,163,164,165,167,168,169,170,171,173,177,179,204,205,221,222,223,],[-17,-42,-45,-43,60,64,-15,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-120,134,-43,138,-4,-6,64,-15,-44,-46,-16,-72,-81,-49,206,-51,-68,-121,-7,-5,207,-26,-48,-47,-50,-27,-22,]),'TYPE':([9,27,29,30,31,32,33,35,36,37,40,42,45,47,48,53,65,133,135,143,162,172,182,],[34,-33,34,-10,-12,-36,-38,-37,-34,-32,-11,-13,-31,-116,-107,-2,-35,-91,-119,-14,-117,-3,-20,]),'THEN':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,151,152,153,163,164,169,204,205,216,225,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,-56,-97,188,-72,-81,-68,-48,-47,-60,-57,]),'END':([69,107,111,112,115,116,117,119,120,121,149,154,157,184,189,203,211,217,218,219,226,228,231,232,],[122,-85,-90,-86,-88,-84,-82,-87,-104,-89,-105,-98,-118,-106,214,-83,224,229,-100,-93,-95,-99,-96,-94,]),'WHILE':([68,107,111,112,115,116,117,119,120,121,149,157,161,184,188,190,198,203,213,215,217,218,219,226,228,232,],[118,-85,-90,-86,-88,-84,-82,-87,-55,-89,-105,-118,118,-106,-55,-55,118,-83,118,118,-55,-100,-93,-55,-55,-94,]),'LOOP':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,110,151,152,156,163,164,169,202,204,205,216,220,223,225,229,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,-55,-56,-97,198,-72,-81,-68,-101,-48,-47,-60,-102,-22,-57,233,]),'FLOAT':([43,54,76,108,109,118,123,124,125,126,127,129,130,131,132,136,138,144,158,160,183,185,186,187,191,192,193,194,195,196,197,201,206,207,209,212,],[81,81,81,81,81,-55,81,-73,-74,-75,-76,81,81,-69,-70,81,81,81,81,81,-92,-58,-59,-55,-64,-65,81,-63,-61,-62,-66,81,81,81,81,81,]),'PRAGMA':([0,3,8,9,10,12,13,14,16,26,27,29,30,31,32,33,35,36,37,40,42,45,46,47,48,49,50,51,52,53,61,62,65,85,86,133,135,143,162,172,182,],[4,-8,-131,4,-8,-133,-134,4,4,-127,-33,4,-10,-12,-36,-38,-37,-34,-32,-11,-13,-31,4,-116,-107,-129,-131,-8,-9,-2,-130,-132,-35,-128,4,-91,-119,-14,-117,-3,-20,]),'BEGIN':([9,27,29,30,31,32,33,35,36,37,40,41,42,45,47,48,53,65,133,135,143,162,172,182,],[-29,-33,-30,-10,-12,-36,-38,-37,-34,-32,-11,68,-13,-31,-116,-107,-2,-35,-91,-119,-14,-117,-3,-20,]),'FUNCTION':([0,2,3,8,9,10,12,13,14,15,16,26,27,29,30,31,32,33,35,36,37,40,42,45,46,47,48,49,50,51,52,53,61,62,65,85,86,133,135,143,162,172,182,],[-122,5,-8,-131,5,-8,-133,-134,5,-123,-124,-127,-33,5,-10,-12,-36,-38,-37,-34,-32,-11,-13,-31,-126,-116,-107,-129,-131,-8,-9,-2,-130,-132,-35,-128,-125,-91,-119,-14,-117,-3,-20,]),'(':([17,18,19,20,21,22,24,43,54,70,75,76,77,83,87,96,99,103,108,109,113,118,123,124,125,126,127,129,130,131,132,136,138,142,144,158,160,170,174,183,185,186,187,191,192,193,194,195,196,197,201,204,205,206,207,209,212,],[-42,54,-17,55,55,-42,-43,76,76,-39,-40,76,129,129,-43,-44,129,144,76,76,129,-55,76,-73,-74,-75,-76,76,76,-69,-70,76,76,129,76,76,76,129,129,-92,-58,-59,-55,-64,-65,76,-63,-61,-62,-66,76,-48,-47,76,76,76,76,]),'PROCEDURE':([0,2,3,8,9,10,12,13,14,15,16,26,27,29,30,31,32,33,35,36,37,40,42,45,46,47,48,49,50,51,52,53,61,62,65,85,86,133,135,143,162,172,182,],[-122,6,-8,-131,6,-8,-133,-134,6,-123,-124,-127,-33,6,-10,-12,-36,-38,-37,-34,-32,-11,-13,-31,-126,-116,-107,-129,-131,-8,-9,-2,-130,-132,-35,-128,-125,-91,-119,-14,-117,-3,-20,]),'MOD':([22,24,70,71,72,73,74,75,77,78,79,80,81,87,96,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,126,-40,-79,-53,-71,-78,-54,-43,-44,-72,-81,126,-48,-47,]),'WITH':([0,2,3,8,10,12,13,14,15,16,26,46,48,49,50,51,52,53,61,62,85,86,135,162,172,],[-122,7,-8,-131,-8,-133,-134,7,-123,-124,-127,-126,-107,-129,-131,-8,-9,-2,-130,-132,-128,-125,-119,-117,-3,]),'ARROW':([22,87,],[-42,136,]),'<':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,194,-72,-81,-68,-48,-47,]),'=':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,195,-72,-81,-68,-48,-47,]),'USE':([8,9,26,27,29,30,31,32,33,35,36,37,40,42,45,47,48,50,53,61,62,65,85,133,135,143,162,172,182,],[-131,44,44,-33,44,-10,-12,-36,-38,-37,-34,-32,-11,-13,-31,-116,-107,-131,-2,-130,-132,-35,44,-91,-119,-14,-117,-3,-20,]),'OR':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,151,152,163,164,169,204,205,216,225,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,-56,186,-72,-81,-68,-48,-47,-60,-57,]),'RETURN':([19,20,56,57,68,107,111,112,115,116,117,119,120,121,141,149,157,161,184,188,190,198,203,213,215,217,218,219,226,228,232,],[-17,-110,95,-111,108,-85,-90,-86,-88,-84,-82,-87,-55,-89,-112,-105,-118,108,-106,-55,-55,108,-83,108,108,-55,-100,-93,-55,-55,-94,]),'GEQ':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,197,-72,-81,-68,-48,-47,]),'IF':([68,107,111,112,115,116,117,119,120,121,149,157,161,184,188,190,198,203,213,214,215,217,218,219,226,228,232,],[109,-85,-90,-86,-88,-84,-82,-87,-55,-89,-105,-118,109,-106,-55,-55,109,-83,109,227,109,-55,-100,-93,-55,-55,-94,]),'FOR':([68,107,111,112,115,116,117,119,120,121,149,157,161,184,188,190,198,203,213,215,217,218,219,226,228,232,],[114,-85,-90,-86,-88,-84,-82,-87,-55,-89,-105,-118,114,-106,-55,-55,114,-83,114,114,-55,-100,-93,-55,-55,-94,]),'STRING':([129,],[166,]),'$end':([0,1,2,3,10,12,13,15,16,46,48,51,52,53,86,162,172,],[-122,0,-1,-8,-8,-133,-134,-123,-124,-126,-107,-8,-9,-2,-125,-117,-3,]),'ELSE':([107,111,112,115,116,117,119,121,149,154,157,184,203,218,219,226,231,232,],[-85,-90,-86,-88,-84,-82,-87,-89,-105,190,-118,-106,-83,-100,-93,-95,-96,-94,]),'OF':([145,208,],[180,-25,]),'>':([22,24,70,71,72,73,74,75,77,78,79,80,81,96,155,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,-44,192,-72,-81,-68,-48,-47,]),'+':([22,24,70,71,72,73,74,75,77,78,79,80,81,82,87,90,96,128,150,155,163,164,168,169,171,178,200,204,205,216,223,],[-42,-43,-39,-52,-80,-77,-67,-40,-79,-53,-71,-78,-54,131,-43,131,-44,131,131,131,-72,-81,131,-68,131,131,131,-48,-47,131,131,]),'STARSTAR':([22,24,70,71,72,73,74,75,77,78,79,80,81,87,96,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,127,-40,-79,-53,-71,-78,-54,-43,-44,-72,-81,127,-48,-47,]),':':([19,22,24,28,39,70,75,91,94,96,104,148,174,175,204,205,],[-17,-42,-43,63,-15,-39,-40,139,-15,-44,-16,183,-41,-115,-48,-47,]),'*':([22,24,70,71,72,73,74,75,77,78,79,80,81,87,96,163,164,169,204,205,],[-42,-43,-39,-52,-80,-77,124,-40,-79,-53,-71,-78,-54,-43,-44,-72,-81,124,-48,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'compilation':([0,],[2,]),'pragma':([0,9,14,16,29,46,86,],[3,27,49,52,27,52,52,]),'record_def':([105,],[147,]),'param':([55,106,140,146,211,],[92,148,176,92,176,]),'simple_stmt':([68,161,198,213,215,],[116,116,116,116,116,]),'compound_stmt':([68,161,198,213,215,],[107,107,107,107,107,]),'expression':([109,160,],[152,152,]),'with_clause':([2,14,],[8,50,]),'subprog_spec':([2,9,14,29,],[11,38,11,38,]),'decl':([9,29,],[45,45,]),'range':([144,201,207,],[179,220,222,]),'statement':([68,161,198,213,215,],[117,203,117,117,117,]),'decl_item_or_body_s':([9,],[29,]),'comp_unit':([2,],[15,]),'if_stmt':([68,161,198,213,215,],[121,121,121,121,121,]),'compound_name':([7,43,44,54,60,63,68,76,95,108,109,123,129,130,134,136,138,139,144,158,160,161,180,193,198,201,206,207,209,212,213,215,],[23,70,70,70,97,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'basic_loop':([156,],[199,]),'formal_part':([20,21,],[57,57,]),'c_name_list':([7,],[25,]),'object_decl':([9,29,],[30,30,]),'subprog_decl':([2,9,14,29,],[12,31,12,31,]),'use_clause_opt':([8,50,],[26,85,]),'pragma_s':([3,10,51,],[16,46,86,]),'cond_clause':([109,],[154,]),'assign_stmt':([68,161,198,213,215,],[112,112,112,112,112,]),'subprog_body':([2,9,14,29,],[13,33,13,33,]),'mark':([139,],[175,]),'literal':([43,54,76,108,109,123,129,130,136,138,144,158,160,193,201,206,207,209,212,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'term':([43,54,76,108,109,129,130,136,138,144,158,160,193,201,206,207,209,212,],[74,74,74,74,74,74,169,74,74,74,74,74,74,74,74,74,74,74,]),'procedure_call':([68,161,198,213,215,],[115,115,115,115,115,]),'adding':([82,90,128,150,155,168,171,178,200,216,223,],[130,130,130,130,130,130,130,130,130,130,130,]),'constr_array_type':([63,],[101,]),'indexed_comp':([43,44,54,63,68,76,95,108,109,123,129,130,134,136,138,139,144,158,160,161,180,193,198,201,206,207,209,212,213,215,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'factor':([43,54,76,108,109,123,129,130,136,138,144,158,160,193,201,206,207,209,212,],[79,79,79,79,79,163,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'relation':([109,160,212,],[151,151,225,]),'loop_stmt':([68,161,198,213,215,],[111,111,111,111,111,]),'statement_s':([68,198,213,215,],[120,217,226,228,]),'return_stmt':([68,161,198,213,215,],[119,119,119,119,119,]),'body':([9,29,],[32,32,]),'object_type_def':([63,],[102,]),'multiplying':([74,169,],[123,123,]),'decl_item':([9,29,],[35,35,]),'goal_symbol':([0,],[1,]),'relational':([155,],[193,]),'simple_name':([4,7,43,44,54,59,60,63,68,76,95,108,109,123,129,130,134,136,138,139,144,158,160,161,180,193,198,201,206,207,209,212,213,215,],[18,24,24,24,87,96,24,24,24,24,24,24,24,24,24,24,24,24,87,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'array_type':([63,],[98,]),'pragma_arg_s':([54,],[88,]),'type_ind':([63,180,],[100,210,]),'numeric_lit':([43,54,76,108,109,123,129,130,136,138,144,158,160,193,201,206,207,209,212,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'subprog_spec_is_push':([2,9,14,29,],[9,9,9,9,]),'iter_index_constraint':([103,],[145,]),'parenthesized_primary':([43,54,76,108,109,123,129,130,136,138,144,158,160,193,201,206,207,209,212,],[72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'value':([129,206,],[165,221,]),'decl_item_or_body':([9,29,],[36,65,]),'use_clause':([9,26,29,85,],[37,62,37,62,]),'unit':([2,14,],[10,51,]),'def_id_s':([9,29,55,106,140,146,211,],[28,28,91,91,91,91,91,]),'block_body':([41,],[69,]),'def_id':([5,6,9,29,55,64,106,140,146,211,],[20,21,39,39,94,104,94,94,94,94,]),'record_decl':([9,29,],[40,40,]),'decl_part':([9,],[41,]),'lambda_decl':([9,29,],[42,42,]),'name':([43,44,54,63,68,76,95,108,109,123,129,130,134,136,138,139,144,158,160,161,180,193,198,201,206,207,209,212,213,215,],[77,83,77,99,113,77,142,77,77,77,77,77,170,77,77,174,77,77,77,113,99,77,113,77,77,77,77,77,113,113,]),'N':([226,],[231,]),'iteration':([68,161,198,213,215,],[110,110,110,110,110,]),'else_opt':([154,],[189,]),'condition':([109,160,],[153,202,]),'param_s':([55,146,],[93,181,]),'name_s':([44,],[84,]),'M':([110,118,120,187,188,190,217,226,228,],[156,160,161,212,213,215,161,161,161,]),'lambda_begin':([9,29,],[43,43,]),'primary':([43,54,76,108,109,123,129,130,136,138,144,158,160,193,201,206,207,209,212,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'range_s':([144,],[177,]),'logical':([152,],[187,]),'pragma_arg':([54,138,],[89,173,]),'value_s':([129,],[167,]),'simple_expression':([43,54,76,108,109,129,136,138,144,158,160,193,201,206,207,209,212,],[82,90,128,150,155,168,171,90,178,200,155,216,178,168,178,223,155,]),'formal_part_opt':([20,21,],[56,58,]),'context_spec':([2,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',18),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',26),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',27),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',31),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',32),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',37),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',38),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',42),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',43),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',47),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',48),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',50),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',55),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',90),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',91),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',96),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',101),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',102),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',107),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',123),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',128),
  ('array_type -> constr_array_type','array_type',1,'p_array_type','grammar.py',139),
  ('constr_array_type -> ARRAY iter_index_constraint OF type_ind','constr_array_type',4,'p_constr_array_type','grammar.py',144),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',157),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',162),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',163),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',168),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',173),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',174),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',178),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',179),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',180),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',185),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',186),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',191),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',192),
  ('body -> subprog_body','body',1,'p_body','grammar.py',197),
  ('name -> compound_name','name',1,'p_name','grammar.py',203),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',204),
  ('mark -> name','mark',1,'p_mark','grammar.py',212),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',217),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',222),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',223),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',231),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',232),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',237),
  ('indexed_comp -> name ( STRING )','indexed_comp',4,'p_indexed_comp','grammar.py',238),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',308),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',309),
  ('value -> simple_expression','value',1,'p_value','grammar.py',315),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',320),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',325),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',330),
  ('M -> <empty>','M',0,'p_M','grammar.py',335),
  ('expression -> relation','expression',1,'p_expression','grammar.py',340),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',341),
  ('logical -> AND','logical',1,'p_logical','grammar.py',363),
  ('logical -> OR','logical',1,'p_logical','grammar.py',364),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',370),
  ('relational -> =','relational',1,'p_relational','grammar.py',385),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',386),
  ('relational -> <','relational',1,'p_relational','grammar.py',387),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',388),
  ('relational -> >','relational',1,'p_relational','grammar.py',389),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',390),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',395),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',396),
  ('adding -> +','adding',1,'p_adding','grammar.py',429),
  ('adding -> -','adding',1,'p_adding','grammar.py',430),
  ('term -> factor','term',1,'p_term','grammar.py',435),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',436),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',472),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',473),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',474),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',475),
  ('factor -> primary','factor',1,'p_factor','grammar.py',481),
  ('primary -> literal','primary',1,'p_primary','grammar.py',486),
  ('primary -> name','primary',1,'p_primary','grammar.py',487),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',488),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',494),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',499),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',500),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',509),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',510),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',516),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',517),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',518),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',523),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',524),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',529),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',537),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',550),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',565),
  ('N -> <empty>','N',0,'p_N','grammar.py',573),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',580),
  ('condition -> expression','condition',1,'p_condition','grammar.py',587),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',598),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',599),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',609),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',618),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',619),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',637),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',643),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',648),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',649),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',658),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',665),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',666),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',684),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',685),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',690),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',695),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',696),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',704),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',719),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',729),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',737),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',746),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',751),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',752),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',757),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',758),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',759),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',763),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',764),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',768),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',769),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',770),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',774),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',778),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',779),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',783),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',784),
]
