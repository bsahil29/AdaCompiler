
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolABORT ABS ABSTRACT ACCEPT ACCESS ALIASED ALL AND ARRAY ARROW ASSIGN AT BEGIN BODY BOX CASE CHAR CONSTANT DECLARE DELAY DELTA DIGITS DO DOTDOT ELSE ELSIF END ENTRY EXCEPTION EXIT FLOAT FOR FUNCTION GENERIC GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LIMITED LL LOOP MOD NEQ NEW NOT NuLL OF OR OTHERS OUT PACKAGE PRAGMA PRIVATE PROCEDURE PROTECTED RAISE RANGE RECORD REM RENAMES REQUEUE RETURN REVERSE RR SELECT SEPARATE STARSTAR STRING SUBTYPE TAGGED TASK TERMINATE THEN TICK TYPE UNTIL USE WHAT WHEN WHILE WITH XORgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : constr_array_type\n\tconstr_array_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\t   | '&'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\t   | block\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock : block_decl block_body END ';'\n\tblock_decl :\n\t   | DECLARE decl_part\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\t   | USE TYPE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'NEQ':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,202,-47,]),'IS':([14,23,30,49,52,53,60,63,73,79,88,143,155,157,183,],[44,-17,44,-114,-42,-43,-39,-40,-115,119,-112,-44,-116,-113,-47,]),'ELSE':([120,122,126,127,129,132,133,134,137,164,165,173,194,198,221,223,230,236,241,242,],[-89,-87,-82,-86,-85,-84,-91,-90,-88,-122,-109,210,-110,-83,-94,-101,-105,-96,-97,-95,]),'IDENTIFIER':([1,9,13,16,17,19,20,25,26,28,29,31,32,33,34,35,37,38,39,40,41,42,44,45,61,72,75,76,77,80,83,89,91,92,93,95,96,97,98,100,101,102,103,104,105,110,118,120,122,123,124,126,127,128,129,130,131,132,133,134,135,137,140,141,142,149,154,156,158,159,162,163,164,165,169,175,178,179,182,190,191,194,195,197,198,199,200,201,202,203,204,205,206,207,208,209,210,214,216,218,220,221,223,224,225,227,228,230,236,237,242,],[5,23,23,23,52,-2,52,23,-10,-12,-11,-31,52,-36,-33,79,52,-38,-34,-37,-13,-32,-120,-111,52,23,-35,52,23,52,52,52,52,52,52,-70,-69,52,-68,-73,-76,-75,52,-74,52,52,-92,-89,-87,52,167,-82,-86,-54,-85,52,-54,-84,-91,-90,23,-88,-123,52,23,-3,52,23,-14,52,23,52,-122,-109,52,52,-121,-124,52,52,-20,-110,52,52,-83,-58,-57,-54,-61,-60,52,-62,-64,-65,-63,-54,-54,-93,52,52,23,-94,-101,-54,52,52,52,-105,-54,-54,-95,]),'LAMBDA':([85,],[142,]),'RETURN':([23,24,73,74,80,120,122,126,127,128,129,132,133,134,137,155,164,165,169,194,197,198,209,210,221,223,224,227,228,230,236,237,242,],[-17,-114,-115,110,123,-89,-87,-82,-86,-54,-85,-84,-91,-90,-88,-116,-122,-109,123,-110,123,-83,-54,-54,-94,-101,-54,123,123,-105,-54,-54,-95,]),'IN':([167,],[195,]),'BEGIN':([13,19,25,26,28,29,31,33,34,36,38,39,40,41,42,44,45,75,80,118,120,122,126,127,128,129,132,133,134,135,136,137,140,149,158,164,165,169,176,178,179,191,194,197,198,209,210,221,223,224,227,228,230,236,237,242,],[-29,-2,-30,-10,-12,-11,-31,-36,-33,80,-38,-34,-37,-13,-32,-120,-111,-35,-106,-92,-89,-87,-82,-86,-54,-85,-84,-91,-90,-29,80,-88,-123,-3,-14,-122,-109,-106,-107,-121,-124,-20,-110,-106,-83,-54,-54,-94,-101,-54,-106,-106,-105,-54,-54,-95,]),'STARSTAR':([52,53,55,57,58,60,62,63,64,65,66,67,68,70,143,150,151,152,183,],[-42,-43,-79,-77,-51,-39,-80,-40,101,-43,-52,-71,-53,-78,-44,101,-81,-72,-47,]),'-':([52,53,55,57,58,59,60,62,63,64,65,66,67,68,70,78,99,143,147,150,151,152,153,166,171,183,188,193,226,231,],[-42,-43,-79,-77,-51,96,-39,-80,-40,-66,-43,-52,-71,-53,-78,96,96,-44,96,-67,-81,-72,96,96,96,-47,96,96,96,96,]),'END':([81,120,122,126,127,128,129,132,133,134,137,164,165,173,177,194,198,211,220,221,223,224,230,236,237,241,242,],[138,-89,-87,-82,-86,-108,-85,-84,-91,-90,-88,-122,-109,-99,213,-110,-83,229,233,-94,-101,234,-105,-96,-100,-97,-95,]),'<':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,205,-47,]),'(':([5,6,20,23,24,32,49,52,53,55,60,61,63,65,82,92,93,95,96,97,98,100,101,102,103,104,105,111,115,121,123,130,131,143,157,159,163,175,180,182,183,185,195,199,200,201,202,203,204,205,206,207,208,214,216,218,225,],[-42,20,61,-17,72,61,72,-42,-43,92,-39,61,-40,-43,92,61,61,-70,-69,61,-68,-73,-76,-75,61,-74,61,92,159,92,61,61,-54,-44,92,61,61,61,92,61,-47,92,61,-58,-57,-54,-61,-60,61,-62,-64,-65,-63,-93,61,61,61,]),'=':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,203,-47,]),'INT':([20,32,61,92,93,95,96,97,98,100,101,102,103,104,105,123,130,131,159,163,175,182,195,199,200,201,202,203,204,205,206,207,208,214,216,218,225,],[66,66,66,66,66,-70,-69,66,-68,-73,-76,-75,66,-74,66,66,66,-54,66,66,66,66,66,-58,-57,-54,-61,-60,66,-62,-64,-65,-63,-93,66,66,66,]),'THEN':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,170,172,174,183,226,235,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,-98,209,-55,-47,-59,-56,]),'DOTDOT':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,183,188,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,-47,216,]),'$end':([0,2,3,4,7,10,11,12,18,19,21,45,46,54,86,149,178,],[-127,-1,0,-8,-8,-138,-139,-128,-129,-2,-131,-111,-8,-9,-130,-3,-121,]),'WHILE':([80,120,122,126,127,128,129,132,133,134,137,164,165,169,194,197,198,209,210,221,223,224,227,228,230,236,237,242,],[131,-89,-87,-82,-86,-54,-85,-84,-91,-90,-88,-122,-109,131,-110,131,-83,-54,-54,-94,-101,-54,131,131,-105,-54,-54,-95,]),'PROCEDURE':([0,2,4,7,8,10,11,12,13,15,18,19,21,22,25,26,28,29,31,33,34,38,39,40,41,42,44,45,46,47,48,54,71,75,86,87,90,118,135,140,149,158,178,179,191,],[-127,16,-8,-8,-136,-138,-139,-128,16,16,-129,-2,-131,-132,16,-10,-12,-11,-31,-36,-33,-38,-34,-37,-13,-32,-120,-111,-8,-136,-134,-9,-137,-35,-130,-133,-135,-92,16,-123,-3,-14,-121,-124,-20,]),'TYPE':([13,19,25,26,28,29,31,33,34,37,38,39,40,41,42,44,45,75,118,135,140,149,158,178,179,191,],[35,-2,35,-10,-12,-11,-31,-36,-33,83,-38,-34,-37,-13,-32,-120,-111,-35,-92,35,-123,-3,-14,-121,-124,-20,]),'RECORD':([119,233,],[162,239,]),'&':([52,53,55,57,58,59,60,62,63,64,65,66,67,68,70,78,99,143,147,150,151,152,153,166,171,183,188,193,226,231,],[-42,-43,-79,-77,-51,95,-39,-80,-40,-66,-43,-52,-71,-53,-78,95,95,-44,95,-67,-81,-72,95,95,95,-47,95,95,95,95,]),'FLOAT':([20,32,61,92,93,95,96,97,98,100,101,102,103,104,105,123,130,131,159,163,175,182,195,199,200,201,202,203,204,205,206,207,208,214,216,218,225,],[68,68,68,68,68,-70,-69,68,-68,-73,-76,-75,68,-74,68,68,68,-54,68,68,68,68,68,-58,-57,-54,-61,-60,68,-62,-64,-65,-63,-93,68,68,68,]),'PRAGMA':([0,4,7,8,10,11,13,15,18,19,21,22,25,26,28,29,31,33,34,38,39,40,41,42,44,45,46,47,48,54,71,75,86,87,90,118,135,140,149,158,178,179,191,],[1,-8,-8,-136,-138,-139,1,1,1,-2,1,-132,1,-10,-12,-11,-31,-36,-33,-38,-34,-37,-13,-32,-120,-111,-8,-136,-134,-9,-137,-35,1,-133,-135,-92,1,-123,-3,-14,-121,-124,-20,]),';':([5,14,23,30,49,50,51,52,53,55,57,58,60,62,63,64,66,67,68,70,73,78,82,84,88,94,108,109,111,112,113,114,116,121,123,138,139,143,144,150,151,152,155,157,161,166,180,183,184,185,186,192,193,196,213,219,238,239,240,],[19,45,-17,45,-114,-45,90,-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-115,118,-125,140,-112,149,-117,156,-21,-18,-23,158,-19,164,165,178,179,-44,-46,-67,-81,-72,-116,-113,191,194,-126,-47,-119,-41,-118,220,221,223,230,-24,242,-28,-104,]),'+':([52,53,55,57,58,59,60,62,63,64,65,66,67,68,70,78,99,143,147,150,151,152,153,166,171,183,188,193,226,231,],[-42,-43,-79,-77,-51,98,-39,-80,-40,-66,-43,-52,-71,-53,-78,98,98,-44,98,-67,-81,-72,98,98,98,-47,98,98,98,98,]),'/':([52,53,55,57,58,60,62,63,64,65,66,67,68,70,143,150,151,152,183,],[-42,-43,-79,-77,-51,-39,-80,-40,104,-43,-52,-71,-53,-78,-44,104,-81,-72,-47,]),'FUNCTION':([0,2,4,7,8,10,11,12,13,15,18,19,21,22,25,26,28,29,31,33,34,38,39,40,41,42,44,45,46,47,48,54,71,75,86,87,90,118,135,140,149,158,178,179,191,],[-127,9,-8,-8,-136,-138,-139,-128,9,9,-129,-2,-131,-132,9,-10,-12,-11,-31,-36,-33,-38,-34,-37,-13,-32,-120,-111,-8,-136,-134,-9,-137,-35,-130,-133,-135,-92,9,-123,-3,-14,-121,-124,-20,]),'MOD':([52,53,55,57,58,60,62,63,64,65,66,67,68,70,143,150,151,152,183,],[-42,-43,-79,-77,-51,-39,-80,-40,102,-43,-52,-71,-53,-78,-44,102,-81,-72,-47,]),'OR':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,170,174,183,226,235,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,199,-55,-47,-59,-56,]),',':([23,27,43,50,51,52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,82,84,106,107,117,139,143,144,145,146,147,148,150,151,152,153,180,183,187,189,215,231,232,],[-17,77,-15,-45,91,-42,-43,-79,93,-77,-51,-6,-39,-80,-40,-66,-43,-52,-71,-53,-4,-78,-125,141,77,-15,-16,141,-44,-46,-48,182,-50,-5,-67,-81,-72,-7,-126,-47,-26,218,-49,-22,-27,]),'AND':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,170,174,183,226,235,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,200,-55,-47,-59,-56,]),'USE':([8,13,19,22,25,26,28,29,31,33,34,38,39,40,41,42,44,45,47,71,75,87,90,118,135,140,149,158,178,179,191,],[-136,37,-2,37,37,-10,-12,-11,-31,-36,-33,-38,-34,-37,-13,-32,-120,-111,-136,-137,-35,37,-135,-92,37,-123,-3,-14,-121,-124,-20,]),'FOR':([80,120,122,126,127,128,129,132,133,134,137,164,165,169,194,197,198,209,210,221,223,224,227,228,230,236,237,242,],[124,-89,-87,-82,-86,-54,-85,-84,-91,-90,-88,-122,-109,124,-110,124,-83,-54,-54,-94,-101,-54,124,124,-105,-54,-54,-95,]),'LOOP':([52,53,55,57,58,60,62,63,64,66,67,68,70,125,143,150,151,152,168,170,174,183,212,222,226,231,234,235,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-54,-44,-67,-81,-72,197,-98,-55,-47,-102,-103,-59,-22,240,-56,]),'GEQ':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,207,-47,]),'IF':([80,120,122,126,127,128,129,132,133,134,137,164,165,169,194,197,198,209,210,221,223,224,227,228,229,230,236,237,242,],[130,-89,-87,-82,-86,-54,-85,-84,-91,-90,-88,-122,-109,130,-110,130,-83,-54,-54,-94,-101,-54,130,130,238,-105,-54,-54,-95,]),'ARROW':([52,65,],[-42,105,]),'OF':([160,217,],[190,-25,]),'*':([52,53,55,57,58,60,62,63,64,65,66,67,68,70,143,150,151,152,183,],[-42,-43,-79,-77,-51,-39,-80,-40,100,-43,-52,-71,-53,-78,-44,100,-81,-72,-47,]),':':([23,27,43,52,53,60,63,106,107,117,143,181,183,184,185,],[-17,76,-15,-42,-43,-39,-40,154,-15,-16,-44,214,-47,-119,-41,]),'ASSIGN':([23,43,52,53,60,63,121,143,183,],[-17,85,-42,-43,-39,-40,163,-44,-47,]),'ARRAY':([76,],[115,]),')':([52,53,55,56,57,58,59,60,62,63,64,65,66,67,68,69,70,99,108,109,143,145,146,147,148,150,151,152,153,183,184,185,186,187,189,215,231,232,],[-42,-43,-79,94,-77,-51,-6,-39,-80,-40,-66,-43,-52,-71,-53,-4,-78,151,-117,155,-44,-48,183,-50,-5,-67,-81,-72,-7,-47,-119,-41,-118,-26,217,-49,-22,-27,]),'>':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,206,-47,]),'DECLARE':([80,120,122,126,127,128,129,132,133,134,137,164,165,169,194,197,198,209,210,221,223,224,227,228,230,236,237,242,],[135,-89,-87,-82,-86,-54,-85,-84,-91,-90,-88,-122,-109,135,-110,135,-83,-54,-54,-94,-101,-54,135,135,-105,-54,-54,-95,]),'.':([50,52,53,60,65,143,144,],[89,-42,-43,89,-43,-44,89,]),'WITH':([0,2,4,7,8,10,11,12,15,18,19,21,22,45,46,47,48,54,71,86,87,90,140,149,178,179,],[-127,17,-8,-8,-136,-138,-139,-128,17,-129,-2,-131,-132,-111,-8,-136,-134,-9,-137,-130,-133,-135,-123,-3,-121,-124,]),'LEQ':([52,53,55,57,58,60,62,63,64,66,67,68,70,143,150,151,152,171,183,],[-42,-43,-79,-77,-51,-39,-80,-40,-66,-52,-71,-53,-78,-44,-67,-81,-72,208,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'range_s':([159,],[189,]),'lambda_begin':([13,25,135,],[32,32,32,]),'M':([125,128,131,201,209,210,224,236,237,],[168,169,175,225,227,228,169,169,169,]),'unit':([2,15,],[7,46,]),'object_decl':([13,25,135,],[26,26,26,]),'primary':([20,32,61,92,93,97,103,105,123,130,159,163,175,182,195,204,216,218,225,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'if_stmt':([80,169,197,227,228,],[120,120,120,120,120,]),'with_clause':([2,15,],[8,47,]),'param':([72,142,156,162,220,],[108,181,186,108,186,]),'body':([13,25,135,],[33,33,33,]),'pragma_s':([4,7,46,],[18,21,86,]),'param_s':([72,162,],[109,192,]),'decl_item_or_body_s':([13,135,],[25,25,]),'simple_stmt':([80,169,197,227,228,],[132,132,132,132,132,]),'statement':([80,169,197,227,228,],[126,198,126,126,126,]),'def_id_s':([13,25,72,135,142,156,162,220,],[27,27,106,27,106,106,106,106,]),'assign_stmt':([80,169,197,227,228,],[127,127,127,127,127,]),'use_clause':([13,22,25,87,135,],[42,71,42,71,42,]),'record_decl':([13,25,135,],[29,29,29,]),'procedure_call':([80,169,197,227,228,],[137,137,137,137,137,]),'subprog_decl':([2,13,15,25,135,],[10,28,10,28,28,]),'mark':([154,],[184,]),'basic_loop':([168,],[196,]),'indexed_comp':([20,32,37,61,76,80,83,92,93,97,103,105,110,123,130,141,154,159,163,169,175,182,190,195,197,204,216,218,225,227,228,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'term':([20,32,61,92,93,97,105,123,130,159,163,175,182,195,204,216,218,225,],[64,64,64,64,64,150,64,64,64,64,64,64,64,64,64,64,64,64,]),'record_def':([119,],[161,]),'value':([92,182,],[145,215,]),'range':([159,195,218,],[187,222,232,]),'statement_s':([80,197,227,228,],[128,224,236,237,]),'cond_clause':([130,],[173,]),'subprog_spec':([2,13,15,25,135,],[14,30,14,30,30,]),'context_spec':([2,],[15,]),'value_s':([92,],[146,]),'relational':([171,],[204,]),'iter_index_constraint':([115,],[160,]),'iteration':([80,169,197,227,228,],[125,125,125,125,125,]),'block':([80,169,197,227,228,],[133,133,133,133,133,]),'logical':([170,],[201,]),'condition':([130,175,],[172,212,]),'pragma_arg':([20,93,],[69,148,]),'N':([236,],[241,]),'formal_part_opt':([24,49,],[74,88,]),'pragma':([0,13,15,18,21,25,86,135,],[4,34,48,54,54,34,54,34,]),'compound_stmt':([80,169,197,227,228,],[129,129,129,129,129,]),'name':([20,32,37,61,76,80,83,92,93,97,103,105,110,123,130,141,154,159,163,169,175,182,190,195,197,204,216,218,225,227,228,],[55,55,82,55,111,121,82,55,55,55,55,55,157,55,55,180,185,55,55,121,55,55,111,55,121,55,55,55,55,121,121,]),'pragma_arg_s':([20,],[56,]),'type_ind':([76,190,],[112,219,]),'numeric_lit':([20,32,61,92,93,97,103,105,123,130,159,163,175,182,195,204,216,218,225,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'literal':([20,32,61,92,93,97,103,105,123,130,159,163,175,182,195,204,216,218,225,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'array_type':([76,],[116,]),'name_s':([37,83,],[84,139,]),'comp_unit':([2,],[12,]),'decl_part':([13,135,],[36,176,]),'use_clause_opt':([8,47,],[22,87,]),'parenthesized_primary':([20,32,61,92,93,97,103,105,123,130,159,163,175,182,195,204,216,218,225,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'relation':([130,175,225,],[174,174,235,]),'loop_stmt':([80,169,197,227,228,],[134,134,134,134,134,]),'subprog_body':([2,13,15,25,135,],[11,38,11,38,38,]),'compound_name':([17,20,32,37,61,76,80,83,91,92,93,97,103,105,110,123,130,141,154,159,163,169,175,182,190,195,197,204,216,218,225,227,228,],[50,60,60,60,60,60,60,60,144,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'return_stmt':([80,169,197,227,228,],[122,122,122,122,122,]),'decl_item_or_body':([13,25,135,],[39,75,39,]),'simple_expression':([20,32,61,92,93,105,123,130,159,163,175,182,195,204,216,218,225,],[59,78,99,147,59,153,166,171,188,193,171,147,188,226,231,188,171,]),'subprog_spec_is_push':([2,13,15,25,135,],[13,13,13,13,13,]),'decl_item':([13,25,135,],[40,40,40,]),'simple_name':([1,17,20,32,37,61,76,80,83,89,91,92,93,97,103,105,110,123,130,141,154,159,163,169,175,182,190,195,197,204,216,218,225,227,228,],[6,53,65,53,53,53,53,53,53,143,53,53,65,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'multiplying':([64,150,],[103,103,]),'constr_array_type':([76,],[113,]),'expression':([130,175,],[170,170,]),'else_opt':([173,],[211,]),'lambda_decl':([13,25,135,],[41,41,41,]),'compilation':([0,],[2,]),'object_type_def':([76,],[114,]),'adding':([59,78,99,147,153,166,171,188,193,226,231,],[97,97,97,97,97,97,97,97,97,97,97,]),'decl':([13,25,135,],[31,31,31,]),'formal_part':([24,49,],[73,73,]),'goal_symbol':([0,],[3,]),'block_body':([36,136,],[81,177,]),'def_id':([9,13,16,25,72,77,135,142,156,162,220,],[24,43,49,43,107,117,43,107,107,107,107,]),'c_name_list':([17,],[51,]),'block_decl':([80,169,197,227,228,],[136,136,136,136,136,]),'factor':([20,32,61,92,93,97,103,105,123,130,159,163,175,182,195,204,216,218,225,],[67,67,67,67,67,67,152,67,67,67,67,67,67,67,67,67,67,67,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',18),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',26),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',27),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',31),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',32),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',37),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',38),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',42),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',43),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',47),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',48),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',50),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',54),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',89),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',90),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',95),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',100),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',101),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',106),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',122),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',127),
  ('array_type -> constr_array_type','array_type',1,'p_array_type','grammar.py',138),
  ('constr_array_type -> ARRAY iter_index_constraint OF type_ind','constr_array_type',4,'p_constr_array_type','grammar.py',143),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',156),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',161),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',162),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',167),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',172),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',173),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',177),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',178),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',179),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',183),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',184),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',189),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',190),
  ('body -> subprog_body','body',1,'p_body','grammar.py',195),
  ('name -> compound_name','name',1,'p_name','grammar.py',201),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',202),
  ('mark -> name','mark',1,'p_mark','grammar.py',207),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',213),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',218),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',219),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',227),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',228),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',233),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',287),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',288),
  ('value -> simple_expression','value',1,'p_value','grammar.py',294),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',299),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',304),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',309),
  ('M -> <empty>','M',0,'p_M','grammar.py',314),
  ('expression -> relation','expression',1,'p_expression','grammar.py',319),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',320),
  ('logical -> AND','logical',1,'p_logical','grammar.py',342),
  ('logical -> OR','logical',1,'p_logical','grammar.py',343),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',349),
  ('relational -> =','relational',1,'p_relational','grammar.py',364),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',365),
  ('relational -> <','relational',1,'p_relational','grammar.py',366),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',367),
  ('relational -> >','relational',1,'p_relational','grammar.py',368),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',369),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',374),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',375),
  ('adding -> +','adding',1,'p_adding','grammar.py',393),
  ('adding -> -','adding',1,'p_adding','grammar.py',394),
  ('adding -> &','adding',1,'p_adding','grammar.py',395),
  ('term -> factor','term',1,'p_term','grammar.py',400),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',401),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',419),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',420),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',421),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',422),
  ('factor -> primary','factor',1,'p_factor','grammar.py',428),
  ('primary -> literal','primary',1,'p_primary','grammar.py',434),
  ('primary -> name','primary',1,'p_primary','grammar.py',435),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',436),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',442),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',447),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',448),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',457),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',458),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',464),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',465),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',466),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',471),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',472),
  ('compound_stmt -> block','compound_stmt',1,'p_compound_stmt','grammar.py',473),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',478),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',486),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',499),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',515),
  ('N -> <empty>','N',0,'p_N','grammar.py',523),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',530),
  ('condition -> expression','condition',1,'p_condition','grammar.py',537),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',548),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',549),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',559),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',568),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',569),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',587),
  ('block -> block_decl block_body END ;','block',4,'p_block','grammar.py',592),
  ('block_decl -> <empty>','block_decl',0,'p_block_decl','grammar.py',596),
  ('block_decl -> DECLARE decl_part','block_decl',2,'p_block_decl','grammar.py',597),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',601),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',606),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',607),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',617),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',624),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',625),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',643),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',644),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',649),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',654),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',655),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',663),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',677),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',687),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',695),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',705),
  ('use_clause -> USE TYPE name_s ;','use_clause',4,'p_use_clause','grammar.py',706),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',710),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',711),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',716),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',717),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',718),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',722),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',723),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',727),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',728),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',729),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',733),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',737),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',738),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',742),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',743),
]
