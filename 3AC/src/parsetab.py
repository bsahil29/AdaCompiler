
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "goal_symbolABORT ABS ABSTRACT ACCEPT ACCESS ALIASED ALL AND ARRAY ARROW ASSIGN AT BEGIN BODY BOX CASE CHAR CONSTANT DECLARE DELAY DELTA DIGITS DO DOTDOT ELSE ELSIF END ENTRY EXCEPTION EXIT FLOAT FOR FUNCTION GENERIC GEQ IDENTIFIER IF IN INT IS LAMBDA LEQ LIMITED LL LOOP MOD NEQ NEW NOT NuLL OF OR OTHERS OUT PACKAGE PRAGMA PRIVATE PROCEDURE PROTECTED RAISE RANGE RECORD REM RENAMES REQUEUE RETURN REVERSE RR SELECT SEPARATE STARSTAR STRING SUBTYPE TAGGED TASK TERMINATE THEN TICK TYPE UNTIL USE WHAT WHEN WHILE WITH XORgoal_symbol : compilation\n\tpragma : PRAGMA IDENTIFIER ';'\n\t   | PRAGMA simple_name '(' pragma_arg_s ')' ';'\n\tpragma_arg_s : pragma_arg\n\t   | pragma_arg_s ',' pragma_arg\n\tpragma_arg : simple_expression\n\t   | simple_name ARROW simple_expression\n\tpragma_s :\n\t   | pragma_s pragma\n\tdecl : object_decl\n\t   | record_decl\n\t   | subprog_decl\n\t   | lambda_decl\n\tobject_decl : def_id_s ':' object_type_def ';'   \n\tdef_id_s : def_id\n\t   | def_id_s ',' def_id\n\tdef_id  : IDENTIFIER\n\tobject_type_def : type_ind\n\t   | array_type\n\trecord_decl : TYPE IDENTIFIER IS record_def ';'\n\ttype_ind : name\n\trange : simple_expression DOTDOT simple_expression\n\tarray_type : constr_array_type\n\tconstr_array_type : ARRAY iter_index_constraint OF type_ind\n\titer_index_constraint : '(' range_s ')'\n\trange_s : range\n\t   | range_s ',' range\n\trecord_def : RECORD param_s ';' END RECORD\n\tdecl_part :\n\t   | decl_item_or_body_s\n\tdecl_item : decl\n\t   | use_clause\n\t   | pragma\n\tdecl_item_or_body_s : decl_item_or_body\n\t   | decl_item_or_body_s decl_item_or_body\n\tdecl_item_or_body : body\n\t   | decl_item\n\tbody : subprog_body\n\tname : compound_name\n\t   | indexed_comp\n\tmark : name\n\tsimple_name : IDENTIFIER\n\tcompound_name : simple_name\n\t   | compound_name '.' simple_name\n\tc_name_list : compound_name\n\t    | c_name_list ',' compound_name\n\tindexed_comp : name '(' value_s ')'\n\tvalue_s : value\n\t   | value_s ',' value\n\tvalue : simple_expression\n\tliteral : numeric_lit\n\tnumeric_lit : INT\n\tnumeric_lit : FLOAT\n\t M : \n\texpression : relation\n\t   | expression logical M relation\n\tlogical : AND\n\t   | OR\n\trelation : simple_expression relational simple_expression\n\trelational : '='\n\t   | NEQ\n\t   | '<'\n\t   | LEQ\n\t   | '>'\n\t   | GEQ\n\tsimple_expression : term\n\t   | simple_expression adding term\n\tadding  : '+'\n\t   | '-'\n\t   | '&'\n\tterm : factor\n\t   | term multiplying factor\n\tmultiplying : '*'\n\t   | '/'\n\t   | MOD\n\t   | STARSTAR\n\tfactor : primary\n\tprimary : literal\n\t   | name\n\t   | parenthesized_primary\n\tparenthesized_primary : '(' simple_expression ')'\n\tstatement_s : statement\n\t   | statement_s M statement\n\tstatement : simple_stmt\n\t\t| compound_stmt\n\tsimple_stmt : assign_stmt\n\t   | return_stmt\n\t   | procedure_call\n\tcompound_stmt : if_stmt\n\t   | loop_stmt\n\t   | block\n\tlambda_decl : lambda_begin simple_expression ';'\n\tlambda_begin : def_id ASSIGN LAMBDA param ':'\n\tassign_stmt : name ASSIGN simple_expression ';'\n\tif_stmt : IF cond_clause else_opt END IF ';'\n\tN :\n\tcond_clause : condition THEN M statement_s N\n\tcondition : expression\n\telse_opt :\n\t   | ELSE M statement_s\n\tloop_stmt : iteration M basic_loop ';'\n\titeration : WHILE M condition\n\t\t| FOR IDENTIFIER IN range\n\tbasic_loop : LOOP statement_s END LOOP\n\tblock : block_decl block_body END ';'\n\tblock_decl :\n\t   | DECLARE decl_part\n\tblock_body : BEGIN statement_s\n\treturn_stmt : RETURN ';'\n\t   | RETURN simple_expression ';'\n\tsubprog_decl : subprog_spec ';'\n\tsubprog_spec : PROCEDURE def_id formal_part_opt\n\t   | FUNCTION def_id formal_part_opt RETURN name\n\tformal_part_opt : \n\t   | formal_part\n\tformal_part : '(' param_s ')'\n\tparam_s : param\n\t   | param_s ';' param\n\tparam : def_id_s ':' mark\n\tsubprog_spec_is_push : subprog_spec IS\n\tsubprog_body : subprog_spec_is_push decl_part block_body END ';'\n\tprocedure_call : name ';'\n\tuse_clause : USE name_s ';'\n\t   | USE TYPE name_s ';'\n\tname_s : name\n\t   | name_s ',' name\n\tcompilation :\n\t   | compilation comp_unit\n\t   | pragma pragma_s\n\tcomp_unit : context_spec unit pragma_s\n\t   | unit pragma_s\n\tcontext_spec : with_clause use_clause_opt\n\t   | context_spec with_clause use_clause_opt\n\t   | context_spec pragma\n\twith_clause : WITH c_name_list ';'\n\tuse_clause_opt :\n\t   | use_clause_opt use_clause\n\tunit : subprog_decl\n\t   | subprog_body\n\t"
    
_lr_action_items = {'ELSE':([128,129,131,132,133,136,137,141,144,173,177,181,194,211,221,228,230,234,240,241,],[-84,-88,-87,-86,-82,-85,-90,-89,-91,208,-109,-122,-83,-110,-105,-101,-94,-96,-97,-95,]),'GEQ':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,201,-47,]),'IDENTIFIER':([1,7,10,12,14,19,20,29,30,32,33,34,35,36,37,38,40,41,43,44,45,46,52,53,70,72,73,74,79,80,81,83,88,92,93,94,95,96,97,98,99,100,101,103,104,112,121,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,141,144,148,155,156,159,161,162,163,166,167,168,177,180,181,183,187,189,193,194,197,198,199,200,201,202,203,204,205,206,207,208,210,211,213,216,218,219,221,222,223,225,228,229,230,234,236,241,],[5,22,26,26,26,-2,22,78,-37,-12,26,-36,-34,-13,22,22,-11,-31,-33,-10,-32,-38,-120,-111,22,22,22,26,22,26,-35,22,22,-76,22,-74,-75,-73,-68,22,-70,-69,22,22,22,22,-92,22,-123,26,-54,-84,-88,-54,-87,-86,-82,22,-85,-90,175,26,22,-89,-91,-3,26,22,26,22,-14,-124,-121,22,22,-109,22,-122,22,-20,22,-93,-83,-54,-54,-57,-58,-65,-61,-63,-64,22,-62,-60,-54,22,-110,22,26,22,22,-105,22,22,22,-101,-54,-94,-54,-54,-95,]),'WITH':([0,2,4,8,9,11,13,15,17,18,19,25,28,49,50,51,53,54,71,77,90,91,124,148,163,166,],[-127,7,-8,-139,-8,-136,-138,7,-128,-129,-2,-131,-132,-8,-136,-134,-111,-9,-135,-137,-130,-133,-123,-3,-124,-121,]),'TYPE':([12,19,30,32,33,34,35,36,38,40,41,43,44,45,46,52,53,81,121,124,139,148,162,163,166,187,],[29,-2,-37,-12,29,-36,-34,-13,83,-11,-31,-33,-10,-32,-38,-120,-111,-35,-92,-123,29,-3,-14,-124,-121,-20,]),'FLOAT':([20,37,70,92,93,94,95,96,97,98,99,100,101,103,104,130,135,140,161,168,180,183,193,198,199,200,201,202,203,204,205,206,207,210,218,219,223,],[58,58,58,-76,58,-74,-75,-73,-68,58,-70,-69,58,58,58,-54,58,58,58,58,58,58,-93,-54,-57,-58,-65,-61,-63,-64,58,-62,-60,58,58,58,58,]),'DOTDOT':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,182,190,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,-47,218,]),'OR':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,171,174,182,224,235,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,200,-55,-47,-59,-56,]),'IF':([88,127,128,129,131,132,133,136,137,141,144,167,177,181,194,197,208,211,213,221,222,225,226,228,229,230,234,236,241,],[135,-54,-84,-88,-87,-86,-82,-85,-90,-89,-91,135,-109,-122,-83,-54,-54,-110,135,-105,135,135,237,-101,-54,-94,-54,-54,-95,]),'DECLARE':([88,127,128,129,131,132,133,136,137,141,144,167,177,181,194,197,208,211,213,221,222,225,228,229,230,234,236,241,],[139,-54,-84,-88,-87,-86,-82,-85,-90,-89,-91,139,-109,-122,-83,-54,-54,-110,139,-105,139,139,-101,-54,-94,-54,-54,-95,]),'LOOP':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,142,145,146,153,171,174,179,182,195,224,227,232,235,238,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-54,-72,-67,-81,-98,-55,213,-47,-102,-59,-103,-22,-56,242,]),'&':([22,23,55,56,57,58,59,60,61,63,64,66,67,68,69,82,105,107,145,146,149,150,153,172,178,182,190,214,224,232,],[-42,-43,-52,-80,-40,-53,-66,99,-71,-43,-51,-39,-79,-78,-77,99,99,-44,-72,-67,99,99,-81,99,99,-47,99,99,99,99,]),'-':([22,23,55,56,57,58,59,60,61,63,64,66,67,68,69,82,105,107,145,146,149,150,153,172,178,182,190,214,224,232,],[-42,-43,-52,-80,-40,-53,-66,100,-71,-43,-51,-39,-79,-78,-77,100,100,-44,-72,-67,100,100,-81,100,100,-47,100,100,100,100,]),'OF':([160,220,],[189,-25,]),'LAMBDA':([86,],[125,]),'IN':([175,],[210,]),')':([22,23,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,105,107,108,110,145,146,147,149,150,151,152,153,182,184,185,186,191,192,215,232,233,],[-42,-43,-52,-80,-40,-53,-66,-6,-71,102,-43,-51,-4,-39,-79,-78,-77,153,-44,-117,154,-72,-67,-5,-7,-50,182,-48,-81,-47,-118,-119,-41,220,-26,-49,-22,-27,]),'NEQ':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,202,-47,]),'USE':([11,12,19,28,30,32,33,34,35,36,40,41,43,44,45,46,50,52,53,71,77,81,91,121,124,139,148,162,163,166,187,],[-136,38,-2,38,-37,-12,38,-36,-34,-13,-11,-31,-33,-10,-32,-38,-136,-120,-111,-135,-137,-35,38,-92,-123,38,-3,-14,-124,-121,-20,]),'+':([22,23,55,56,57,58,59,60,61,63,64,66,67,68,69,82,105,107,145,146,149,150,153,172,178,182,190,214,224,232,],[-42,-43,-52,-80,-40,-53,-66,97,-71,-43,-51,-39,-79,-78,-77,97,97,-44,-72,-67,97,97,-81,97,97,-47,97,97,97,97,]),'FUNCTION':([0,2,4,8,9,11,12,13,15,17,18,19,25,28,30,32,33,34,35,36,40,41,43,44,45,46,49,50,51,52,53,54,71,77,81,90,91,121,124,139,148,162,163,166,187,],[-127,10,-8,-139,-8,-136,10,-138,10,-128,-129,-2,-131,-132,-37,-12,10,-36,-34,-13,-11,-31,-33,-10,-32,-38,-8,-136,-134,-120,-111,-9,-135,-137,-35,-130,-133,-92,-123,10,-3,-14,-124,-121,-20,]),'/':([22,23,55,56,57,58,59,61,63,64,66,67,68,69,107,145,146,153,182,],[-42,-43,-52,-80,-40,-53,94,-71,-43,-51,-39,-79,-78,-77,-44,-72,94,-81,-47,]),'MOD':([22,23,55,56,57,58,59,61,63,64,66,67,68,69,107,145,146,153,182,],[-42,-43,-52,-80,-40,-53,95,-71,-43,-51,-39,-79,-78,-77,-44,-72,95,-81,-47,]),'<':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,206,-47,]),'INT':([20,37,70,92,93,94,95,96,97,98,99,100,101,103,104,130,135,140,161,168,180,183,193,198,199,200,201,202,203,204,205,206,207,210,218,219,223,],[55,55,55,-76,55,-74,-75,-73,-68,55,-70,-69,55,55,55,-54,55,55,55,55,55,55,-93,-54,-57,-58,-65,-61,-63,-64,55,-62,-60,55,55,55,55,]),'AND':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,171,174,182,224,235,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,199,-55,-47,-59,-56,]),'END':([87,127,128,129,131,132,133,136,137,141,144,169,173,177,181,194,209,211,216,221,228,229,230,234,236,240,241,],[126,-108,-84,-88,-87,-86,-82,-85,-90,-89,-91,196,-99,-109,-122,-83,226,-110,231,-105,-101,238,-94,-96,-100,-97,-95,]),'LEQ':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,203,-47,]),'RECORD':([113,231,],[159,239,]),'THEN':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,170,171,174,182,224,235,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,197,-98,-55,-47,-59,-56,]),';':([5,16,21,22,23,24,26,47,48,55,56,57,58,59,61,64,66,67,68,69,75,82,84,85,89,102,106,107,108,110,114,116,117,118,119,122,126,140,143,145,146,153,154,157,158,164,178,182,184,185,186,188,196,212,214,217,237,239,242,],[19,53,71,-42,-43,-45,-17,53,-114,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-115,121,124,-125,-112,148,-46,-44,-117,155,-18,-23,-21,-19,162,163,166,177,181,-72,-67,-81,-116,-113,187,-126,211,-47,-118,-119,-41,216,221,228,230,-24,241,-28,-104,]),'$end':([0,2,3,4,8,9,13,17,18,19,25,49,53,54,90,148,166,],[-127,-1,0,-8,-139,-8,-138,-128,-129,-2,-131,-8,-111,-9,-130,-3,-121,]),'*':([22,23,55,56,57,58,59,61,63,64,66,67,68,69,107,145,146,153,182,],[-42,-43,-52,-80,-40,-53,96,-71,-43,-51,-39,-79,-78,-77,-44,-72,96,-81,-47,]),'WHILE':([88,127,128,129,131,132,133,136,137,141,144,167,177,181,194,197,208,211,213,221,222,225,228,229,230,234,236,241,],[130,-54,-84,-88,-87,-86,-82,-85,-90,-89,-91,130,-109,-122,-83,-54,-54,-110,130,-105,130,130,-101,-54,-94,-54,-54,-95,]),'IS':([16,22,23,26,47,48,57,66,75,78,89,107,154,157,182,],[52,-42,-43,-17,52,-114,-40,-39,-115,113,-112,-44,-116,-113,-47,]),'FOR':([88,127,128,129,131,132,133,136,137,141,144,167,177,181,194,197,208,211,213,221,222,225,228,229,230,234,236,241,],[138,-54,-84,-88,-87,-86,-82,-85,-90,-89,-91,138,-109,-122,-83,-54,-54,-110,138,-105,138,138,-101,-54,-94,-54,-54,-95,]),'ARROW':([22,63,],[-42,103,]),':':([22,23,26,31,39,57,66,107,109,111,120,165,182,185,186,],[-42,-43,-17,79,-15,-40,-39,-44,-15,156,-16,193,-47,-119,-41,]),'PRAGMA':([0,4,8,9,11,12,13,15,18,19,25,28,30,32,33,34,35,36,40,41,43,44,45,46,49,50,51,52,53,54,71,77,81,90,91,121,124,139,148,162,163,166,187,],[1,-8,-139,-8,-136,1,-138,1,1,-2,1,-132,-37,-12,1,-36,-34,-13,-11,-31,-33,-10,-32,-38,-8,-136,-134,-120,-111,-9,-135,-137,-35,1,-133,-92,-123,1,-3,-14,-124,-121,-20,]),'STARSTAR':([22,23,55,56,57,58,59,61,63,64,66,67,68,69,107,145,146,153,182,],[-42,-43,-52,-80,-40,-53,92,-71,-43,-51,-39,-79,-78,-77,-44,-72,92,-81,-47,]),'ARRAY':([79,],[115,]),'>':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,204,-47,]),'RETURN':([26,27,75,76,88,127,128,129,131,132,133,136,137,141,144,154,167,177,181,194,197,208,211,213,221,222,225,228,229,230,234,236,241,],[-17,-114,-115,112,140,-54,-84,-88,-87,-86,-82,-85,-90,-89,-91,-116,140,-109,-122,-83,-54,-54,-110,140,-105,140,140,-101,-54,-94,-54,-54,-95,]),'.':([22,23,24,63,66,106,107,],[-42,-43,73,-43,73,73,-44,]),'BEGIN':([12,19,30,32,33,34,35,36,40,41,42,43,44,45,46,52,53,81,88,121,124,127,128,129,131,132,133,134,136,137,139,141,144,148,162,163,166,167,176,177,181,187,194,197,208,211,213,221,222,225,228,229,230,234,236,241,],[-29,-2,-37,-12,-30,-36,-34,-13,-11,-31,88,-33,-10,-32,-38,-120,-111,-35,-106,-92,-123,-54,-84,-88,-87,-86,-82,88,-85,-90,-29,-89,-91,-3,-14,-124,-121,-106,-107,-109,-122,-20,-83,-54,-54,-110,-106,-105,-106,-106,-101,-54,-94,-54,-54,-95,]),'PROCEDURE':([0,2,4,8,9,11,12,13,15,17,18,19,25,28,30,32,33,34,35,36,40,41,43,44,45,46,49,50,51,52,53,54,71,77,81,90,91,121,124,139,148,162,163,166,187,],[-127,14,-8,-139,-8,-136,14,-138,14,-128,-129,-2,-131,-132,-37,-12,14,-36,-34,-13,-11,-31,-33,-10,-32,-38,-8,-136,-134,-120,-111,-9,-135,-137,-35,-130,-133,-92,-123,14,-3,-14,-124,-121,-20,]),'ASSIGN':([22,23,26,39,57,66,107,143,182,],[-42,-43,-17,86,-40,-39,-44,180,-47,]),'=':([22,23,55,56,57,58,59,61,64,66,67,68,69,107,145,146,153,172,182,],[-42,-43,-52,-80,-40,-53,-66,-71,-51,-39,-79,-78,-77,-44,-72,-67,-81,207,-47,]),',':([21,22,23,24,26,31,39,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,84,85,106,107,109,111,120,122,145,146,147,149,150,151,152,153,164,182,191,192,215,232,233,],[72,-42,-43,-45,-17,80,-15,-52,-80,-40,-53,-66,-6,-71,101,-43,-51,-4,-39,-79,-78,-77,123,-125,-46,-44,-15,80,-16,123,-72,-67,-5,-7,-50,183,-48,-81,-126,-47,219,-26,-49,-22,-27,]),'(':([5,6,20,22,23,26,27,37,48,57,63,66,67,70,85,92,93,94,95,96,97,98,99,100,101,103,104,107,115,117,130,135,140,143,157,161,164,168,180,182,183,186,193,198,199,200,201,202,203,204,205,206,207,210,218,219,223,],[-42,20,70,-42,-43,-17,74,70,74,-40,-43,-39,104,70,104,-76,70,-74,-75,-73,-68,70,-70,-69,70,70,70,-44,161,104,-54,70,70,104,104,70,104,70,70,-47,70,104,-93,-54,-57,-58,-65,-61,-63,-64,70,-62,-60,70,70,70,70,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parenthesized_primary':([20,37,70,93,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'simple_stmt':([88,167,213,222,225,],[128,128,128,128,128,]),'logical':([171,],[198,]),'N':([234,],[240,]),'goal_symbol':([0,],[3,]),'def_id_s':([12,33,74,125,139,155,159,216,],[31,31,111,111,31,111,111,111,]),'name_s':([38,83,],[84,122,]),'subprog_decl':([2,12,15,33,139,],[13,32,13,32,32,]),'simple_expression':([20,37,70,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[60,82,105,60,149,150,172,178,190,172,214,150,224,190,232,190,172,]),'cond_clause':([135,],[173,]),'procedure_call':([88,167,213,222,225,],[129,129,129,129,129,]),'decl_item_or_body_s':([12,139,],[33,33,]),'body':([12,33,139,],[34,34,34,]),'pragma_arg_s':([20,],[62,]),'object_type_def':([79,],[119,]),'decl_item_or_body':([12,33,139,],[35,81,35,]),'pragma_s':([4,9,49,],[18,25,90,]),'lambda_decl':([12,33,139,],[36,36,36,]),'simple_name':([1,7,20,37,38,70,72,73,79,83,88,93,98,101,103,104,112,123,135,140,156,161,167,168,180,183,189,205,210,213,218,219,222,223,225,],[6,23,63,23,23,23,23,107,23,23,23,23,23,63,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'with_clause':([2,15,],[11,50,]),'else_opt':([173,],[209,]),'param_s':([74,159,],[110,188,]),'lambda_begin':([12,33,139,],[37,37,37,]),'relational':([172,],[205,]),'array_type':([79,],[118,]),'pragma_arg':([20,101,],[65,147,]),'c_name_list':([7,],[21,]),'context_spec':([2,],[15,]),'statement':([88,167,213,222,225,],[133,194,133,133,133,]),'statement_s':([88,213,222,225,],[127,229,234,236,]),'pragma':([0,12,15,18,25,33,90,139,],[4,43,51,54,54,43,54,43,]),'literal':([20,37,70,93,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'factor':([20,37,70,93,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[61,61,61,145,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'decl_item':([12,33,139,],[30,30,30,]),'formal_part_opt':([27,48,],[76,89,]),'type_ind':([79,189,],[114,217,]),'use_clause_opt':([11,50,],[28,91,]),'iter_index_constraint':([115,],[160,]),'record_decl':([12,33,139,],[40,40,40,]),'multiplying':([59,146,],[93,93,]),'indexed_comp':([20,37,38,70,79,83,88,93,98,101,103,104,112,123,135,140,156,161,167,168,180,183,189,205,210,213,218,219,222,223,225,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'adding':([60,82,105,149,150,172,178,190,214,224,232,],[98,98,98,98,98,98,98,98,98,98,98,]),'range_s':([161,],[191,]),'return_stmt':([88,167,213,222,225,],[131,131,131,131,131,]),'expression':([135,168,],[171,171,]),'term':([20,37,70,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[59,59,59,146,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'assign_stmt':([88,167,213,222,225,],[132,132,132,132,132,]),'decl':([12,33,139,],[41,41,41,]),'param':([74,125,155,159,216,],[108,165,184,108,184,]),'block_decl':([88,167,213,222,225,],[134,134,134,134,134,]),'decl_part':([12,139,],[42,176,]),'unit':([2,15,],[9,49,]),'object_decl':([12,33,139,],[44,44,44,]),'value_s':([104,],[151,]),'compound_stmt':([88,167,213,222,225,],[136,136,136,136,136,]),'iteration':([88,167,213,222,225,],[142,142,142,142,142,]),'use_clause':([12,28,33,91,139,],[45,77,45,77,45,]),'def_id':([10,12,14,33,74,80,125,139,155,159,216,],[27,39,48,39,109,120,109,39,109,109,109,]),'mark':([156,],[185,]),'formal_part':([27,48,],[75,75,]),'block':([88,167,213,222,225,],[144,144,144,144,144,]),'loop_stmt':([88,167,213,222,225,],[137,137,137,137,137,]),'condition':([135,168,],[170,195,]),'basic_loop':([179,],[212,]),'subprog_body':([2,12,15,33,139,],[8,46,8,46,46,]),'compilation':([0,],[2,]),'subprog_spec_is_push':([2,12,15,33,139,],[12,12,12,12,12,]),'numeric_lit':([20,37,70,93,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'range':([161,210,219,],[192,227,233,]),'record_def':([113,],[158,]),'value':([104,183,],[152,215,]),'block_body':([42,134,],[87,169,]),'if_stmt':([88,167,213,222,225,],[141,141,141,141,141,]),'constr_array_type':([79,],[116,]),'compound_name':([7,20,37,38,70,72,79,83,88,93,98,101,103,104,112,123,135,140,156,161,167,168,180,183,189,205,210,213,218,219,222,223,225,],[24,66,66,66,66,106,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'name':([20,37,38,70,79,83,88,93,98,101,103,104,112,123,135,140,156,161,167,168,180,183,189,205,210,213,218,219,222,223,225,],[67,67,85,67,117,85,143,67,67,67,67,67,157,164,67,67,186,67,143,67,67,67,117,67,67,143,67,67,143,67,143,]),'M':([127,130,142,197,198,208,229,234,236,],[167,168,179,222,223,225,167,167,167,]),'relation':([135,168,223,],[174,174,235,]),'subprog_spec':([2,12,15,33,139,],[16,47,16,47,47,]),'comp_unit':([2,],[17,]),'primary':([20,37,70,93,98,101,103,104,135,140,161,168,180,183,205,210,218,219,223,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> goal_symbol","S'",1,None,None,None),
  ('goal_symbol -> compilation','goal_symbol',1,'p_goal_symbol','grammar.py',18),
  ('pragma -> PRAGMA IDENTIFIER ;','pragma',3,'p_pragma','grammar.py',26),
  ('pragma -> PRAGMA simple_name ( pragma_arg_s ) ;','pragma',6,'p_pragma','grammar.py',27),
  ('pragma_arg_s -> pragma_arg','pragma_arg_s',1,'p_pragma_arg_s','grammar.py',31),
  ('pragma_arg_s -> pragma_arg_s , pragma_arg','pragma_arg_s',3,'p_pragma_arg_s','grammar.py',32),
  ('pragma_arg -> simple_expression','pragma_arg',1,'p_pragma_arg','grammar.py',37),
  ('pragma_arg -> simple_name ARROW simple_expression','pragma_arg',3,'p_pragma_arg','grammar.py',38),
  ('pragma_s -> <empty>','pragma_s',0,'p_pragma_s','grammar.py',42),
  ('pragma_s -> pragma_s pragma','pragma_s',2,'p_pragma_s','grammar.py',43),
  ('decl -> object_decl','decl',1,'p_decl','grammar.py',47),
  ('decl -> record_decl','decl',1,'p_decl','grammar.py',48),
  ('decl -> subprog_decl','decl',1,'p_decl','grammar.py',49),
  ('decl -> lambda_decl','decl',1,'p_decl','grammar.py',50),
  ('object_decl -> def_id_s : object_type_def ;','object_decl',4,'p_object_decl','grammar.py',55),
  ('def_id_s -> def_id','def_id_s',1,'p_def_id_s','grammar.py',90),
  ('def_id_s -> def_id_s , def_id','def_id_s',3,'p_def_id_s','grammar.py',91),
  ('def_id -> IDENTIFIER','def_id',1,'p_def_id','grammar.py',96),
  ('object_type_def -> type_ind','object_type_def',1,'p_object_type_def','grammar.py',101),
  ('object_type_def -> array_type','object_type_def',1,'p_object_type_def','grammar.py',102),
  ('record_decl -> TYPE IDENTIFIER IS record_def ;','record_decl',5,'p_record_decl','grammar.py',107),
  ('type_ind -> name','type_ind',1,'p_type_ind','grammar.py',123),
  ('range -> simple_expression DOTDOT simple_expression','range',3,'p_range','grammar.py',128),
  ('array_type -> constr_array_type','array_type',1,'p_array_type','grammar.py',139),
  ('constr_array_type -> ARRAY iter_index_constraint OF type_ind','constr_array_type',4,'p_constr_array_type','grammar.py',144),
  ('iter_index_constraint -> ( range_s )','iter_index_constraint',3,'p_iter_index_constraint','grammar.py',157),
  ('range_s -> range','range_s',1,'p_range_s','grammar.py',162),
  ('range_s -> range_s , range','range_s',3,'p_range_s','grammar.py',163),
  ('record_def -> RECORD param_s ; END RECORD','record_def',5,'p_record_def','grammar.py',168),
  ('decl_part -> <empty>','decl_part',0,'p_decl_part','grammar.py',173),
  ('decl_part -> decl_item_or_body_s','decl_part',1,'p_decl_part','grammar.py',174),
  ('decl_item -> decl','decl_item',1,'p_decl_item','grammar.py',178),
  ('decl_item -> use_clause','decl_item',1,'p_decl_item','grammar.py',179),
  ('decl_item -> pragma','decl_item',1,'p_decl_item','grammar.py',180),
  ('decl_item_or_body_s -> decl_item_or_body','decl_item_or_body_s',1,'p_decl_item_or_body_s','grammar.py',185),
  ('decl_item_or_body_s -> decl_item_or_body_s decl_item_or_body','decl_item_or_body_s',2,'p_decl_item_or_body_s','grammar.py',186),
  ('decl_item_or_body -> body','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',191),
  ('decl_item_or_body -> decl_item','decl_item_or_body',1,'p_decl_item_or_body','grammar.py',192),
  ('body -> subprog_body','body',1,'p_body','grammar.py',197),
  ('name -> compound_name','name',1,'p_name','grammar.py',203),
  ('name -> indexed_comp','name',1,'p_name','grammar.py',204),
  ('mark -> name','mark',1,'p_mark','grammar.py',209),
  ('simple_name -> IDENTIFIER','simple_name',1,'p_simple_name','grammar.py',214),
  ('compound_name -> simple_name','compound_name',1,'p_compound_name','grammar.py',219),
  ('compound_name -> compound_name . simple_name','compound_name',3,'p_compound_name','grammar.py',220),
  ('c_name_list -> compound_name','c_name_list',1,'p_c_name_list','grammar.py',228),
  ('c_name_list -> c_name_list , compound_name','c_name_list',3,'p_c_name_list','grammar.py',229),
  ('indexed_comp -> name ( value_s )','indexed_comp',4,'p_indexed_comp','grammar.py',234),
  ('value_s -> value','value_s',1,'p_value_s','grammar.py',302),
  ('value_s -> value_s , value','value_s',3,'p_value_s','grammar.py',303),
  ('value -> simple_expression','value',1,'p_value','grammar.py',309),
  ('literal -> numeric_lit','literal',1,'p_literal','grammar.py',314),
  ('numeric_lit -> INT','numeric_lit',1,'p_numeric_lit1','grammar.py',319),
  ('numeric_lit -> FLOAT','numeric_lit',1,'p_numeric_lit2','grammar.py',324),
  ('M -> <empty>','M',0,'p_M','grammar.py',329),
  ('expression -> relation','expression',1,'p_expression','grammar.py',334),
  ('expression -> expression logical M relation','expression',4,'p_expression','grammar.py',335),
  ('logical -> AND','logical',1,'p_logical','grammar.py',357),
  ('logical -> OR','logical',1,'p_logical','grammar.py',358),
  ('relation -> simple_expression relational simple_expression','relation',3,'p_relation','grammar.py',364),
  ('relational -> =','relational',1,'p_relational','grammar.py',379),
  ('relational -> NEQ','relational',1,'p_relational','grammar.py',380),
  ('relational -> <','relational',1,'p_relational','grammar.py',381),
  ('relational -> LEQ','relational',1,'p_relational','grammar.py',382),
  ('relational -> >','relational',1,'p_relational','grammar.py',383),
  ('relational -> GEQ','relational',1,'p_relational','grammar.py',384),
  ('simple_expression -> term','simple_expression',1,'p_simple_expression','grammar.py',389),
  ('simple_expression -> simple_expression adding term','simple_expression',3,'p_simple_expression','grammar.py',390),
  ('adding -> +','adding',1,'p_adding','grammar.py',408),
  ('adding -> -','adding',1,'p_adding','grammar.py',409),
  ('adding -> &','adding',1,'p_adding','grammar.py',410),
  ('term -> factor','term',1,'p_term','grammar.py',415),
  ('term -> term multiplying factor','term',3,'p_term','grammar.py',416),
  ('multiplying -> *','multiplying',1,'p_multiplying','grammar.py',434),
  ('multiplying -> /','multiplying',1,'p_multiplying','grammar.py',435),
  ('multiplying -> MOD','multiplying',1,'p_multiplying','grammar.py',436),
  ('multiplying -> STARSTAR','multiplying',1,'p_multiplying','grammar.py',437),
  ('factor -> primary','factor',1,'p_factor','grammar.py',443),
  ('primary -> literal','primary',1,'p_primary','grammar.py',449),
  ('primary -> name','primary',1,'p_primary','grammar.py',450),
  ('primary -> parenthesized_primary','primary',1,'p_primary','grammar.py',451),
  ('parenthesized_primary -> ( simple_expression )','parenthesized_primary',3,'p_parenthesized_primary','grammar.py',457),
  ('statement_s -> statement','statement_s',1,'p_statement_s','grammar.py',462),
  ('statement_s -> statement_s M statement','statement_s',3,'p_statement_s','grammar.py',463),
  ('statement -> simple_stmt','statement',1,'p_statement','grammar.py',472),
  ('statement -> compound_stmt','statement',1,'p_statement','grammar.py',473),
  ('simple_stmt -> assign_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',479),
  ('simple_stmt -> return_stmt','simple_stmt',1,'p_simple_stmt','grammar.py',480),
  ('simple_stmt -> procedure_call','simple_stmt',1,'p_simple_stmt','grammar.py',481),
  ('compound_stmt -> if_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',486),
  ('compound_stmt -> loop_stmt','compound_stmt',1,'p_compound_stmt','grammar.py',487),
  ('compound_stmt -> block','compound_stmt',1,'p_compound_stmt','grammar.py',488),
  ('lambda_decl -> lambda_begin simple_expression ;','lambda_decl',3,'p_lambda_decl','grammar.py',493),
  ('lambda_begin -> def_id ASSIGN LAMBDA param :','lambda_begin',5,'p_lambda_begin','grammar.py',501),
  ('assign_stmt -> name ASSIGN simple_expression ;','assign_stmt',4,'p_assign_stmt','grammar.py',514),
  ('if_stmt -> IF cond_clause else_opt END IF ;','if_stmt',6,'p_if_stmt','grammar.py',529),
  ('N -> <empty>','N',0,'p_N','grammar.py',537),
  ('cond_clause -> condition THEN M statement_s N','cond_clause',5,'p_cond_clause','grammar.py',544),
  ('condition -> expression','condition',1,'p_condition','grammar.py',551),
  ('else_opt -> <empty>','else_opt',0,'p_else_opt','grammar.py',562),
  ('else_opt -> ELSE M statement_s','else_opt',3,'p_else_opt','grammar.py',563),
  ('loop_stmt -> iteration M basic_loop ;','loop_stmt',4,'p_loop_stmt','grammar.py',573),
  ('iteration -> WHILE M condition','iteration',3,'p_iteration','grammar.py',582),
  ('iteration -> FOR IDENTIFIER IN range','iteration',4,'p_iteration','grammar.py',583),
  ('basic_loop -> LOOP statement_s END LOOP','basic_loop',4,'p_basic_loop','grammar.py',601),
  ('block -> block_decl block_body END ;','block',4,'p_block','grammar.py',606),
  ('block_decl -> <empty>','block_decl',0,'p_block_decl','grammar.py',610),
  ('block_decl -> DECLARE decl_part','block_decl',2,'p_block_decl','grammar.py',611),
  ('block_body -> BEGIN statement_s','block_body',2,'p_block_body','grammar.py',615),
  ('return_stmt -> RETURN ;','return_stmt',2,'p_return_stmt','grammar.py',620),
  ('return_stmt -> RETURN simple_expression ;','return_stmt',3,'p_return_stmt','grammar.py',621),
  ('subprog_decl -> subprog_spec ;','subprog_decl',2,'p_subprog_decl','grammar.py',631),
  ('subprog_spec -> PROCEDURE def_id formal_part_opt','subprog_spec',3,'p_subprog_spec','grammar.py',638),
  ('subprog_spec -> FUNCTION def_id formal_part_opt RETURN name','subprog_spec',5,'p_subprog_spec','grammar.py',639),
  ('formal_part_opt -> <empty>','formal_part_opt',0,'p_formal_part_opt','grammar.py',657),
  ('formal_part_opt -> formal_part','formal_part_opt',1,'p_formal_part_opt','grammar.py',658),
  ('formal_part -> ( param_s )','formal_part',3,'p_formal_part','grammar.py',663),
  ('param_s -> param','param_s',1,'p_param_s','grammar.py',668),
  ('param_s -> param_s ; param','param_s',3,'p_param_s','grammar.py',669),
  ('param -> def_id_s : mark','param',3,'p_param','grammar.py',677),
  ('subprog_spec_is_push -> subprog_spec IS','subprog_spec_is_push',2,'p_subprog_spec_is_push','grammar.py',691),
  ('subprog_body -> subprog_spec_is_push decl_part block_body END ;','subprog_body',5,'p_subprog_body','grammar.py',701),
  ('procedure_call -> name ;','procedure_call',2,'p_procedure_call','grammar.py',709),
  ('use_clause -> USE name_s ;','use_clause',3,'p_use_clause','grammar.py',719),
  ('use_clause -> USE TYPE name_s ;','use_clause',4,'p_use_clause','grammar.py',720),
  ('name_s -> name','name_s',1,'p_name_s','grammar.py',724),
  ('name_s -> name_s , name','name_s',3,'p_name_s','grammar.py',725),
  ('compilation -> <empty>','compilation',0,'p_compilation','grammar.py',730),
  ('compilation -> compilation comp_unit','compilation',2,'p_compilation','grammar.py',731),
  ('compilation -> pragma pragma_s','compilation',2,'p_compilation','grammar.py',732),
  ('comp_unit -> context_spec unit pragma_s','comp_unit',3,'p_comp_unit','grammar.py',736),
  ('comp_unit -> unit pragma_s','comp_unit',2,'p_comp_unit','grammar.py',737),
  ('context_spec -> with_clause use_clause_opt','context_spec',2,'p_context_spec','grammar.py',741),
  ('context_spec -> context_spec with_clause use_clause_opt','context_spec',3,'p_context_spec','grammar.py',742),
  ('context_spec -> context_spec pragma','context_spec',2,'p_context_spec','grammar.py',743),
  ('with_clause -> WITH c_name_list ;','with_clause',3,'p_with_clause','grammar.py',747),
  ('use_clause_opt -> <empty>','use_clause_opt',0,'p_use_clause_opt','grammar.py',751),
  ('use_clause_opt -> use_clause_opt use_clause','use_clause_opt',2,'p_use_clause_opt','grammar.py',752),
  ('unit -> subprog_decl','unit',1,'p_unit','grammar.py',756),
  ('unit -> subprog_body','unit',1,'p_unit','grammar.py',757),
]
