// Abstract Syntax Tree
digraph {
	"0x7f72566f3828" [label=START]
	"0x7f72565a01d0" [label=compilation]
	"0x7f72566f3828" -> "0x7f72565a01d0"
	"0x7f725659add8" [label=comp_unit]
	"0x7f72565a01d0" -> "0x7f725659add8"
	"0x7f72566f3cc0" [label=context_spec]
	"0x7f725659add8" -> "0x7f72566f3cc0"
	"0x7f72565a0278" [label=with]
	"0x7f72566f3cc0" -> "0x7f72565a0278"
	"0x7f72565a0198" [label="Ada.Text_IO, Ada.Integer_Text_IO"]
	"0x7f72565a0278" -> "0x7f72565a0198"
	"0x7f72565a0828" [label=use_clause_opt]
	"0x7f72566f3cc0" -> "0x7f72565a0828"
	"0x7f72565a0518" [label=USE]
	"0x7f72565a0828" -> "0x7f72565a0518"
	"0x7f72565a05c0" [label="Ada.Text_IO, Ada.Integer_Text_IO"]
	"0x7f72565a0518" -> "0x7f72565a05c0"
	"0x7f72565a0668" [label=UNIT]
	"0x7f725659add8" -> "0x7f72565a0668"
	"0x7f72565a0a58" [label=subprog_body]
	"0x7f72565a0668" -> "0x7f72565a0a58"
	"0x7f72565a06a0" [label=IS]
	"0x7f72565a0a58" -> "0x7f72565a06a0"
	"0x7f72565a0588" [label=procedure]
	"0x7f72565a06a0" -> "0x7f72565a0588"
	"0x7f72565a0470" [label=LoopDemo]
	"0x7f72565a0588" -> "0x7f72565a0470"
	"0x7f72565a0a90" [label=":"]
	"0x7f72565a0a58" -> "0x7f72565a0a90"
	"0x7f72565a03c8" [label=Count]
	"0x7f72565a0a90" -> "0x7f72565a03c8"
	"0x7f72565a0908" [label=INTEGER]
	"0x7f72565a0a90" -> "0x7f72565a0908"
	"0x7f72565a0c88" [label=begin]
	"0x7f72565a0a58" -> "0x7f72565a0c88"
	"0x7f72565a0b00" [label=statement_s]
	"0x7f72565a0c88" -> "0x7f72565a0b00"
	"0x7f72565a0ac8" [label=":="]
	"0x7f72565a0b00" -> "0x7f72565a0ac8"
	"0x7f72565a0a20" [label=Count]
	"0x7f72565a0ac8" -> "0x7f72565a0a20"
	"0x7f72565a09e8" [label=1]
	"0x7f72565a0ac8" -> "0x7f72565a09e8"
	"0x7f725659a9e8" [label=LOOP_STMT]
	"0x7f72565a0b00" -> "0x7f725659a9e8"
	"0x7f72565a0e48" [label=while]
	"0x7f725659a9e8" -> "0x7f72565a0e48"
	"0x7f72565a0d30" [label="<"]
	"0x7f72565a0e48" -> "0x7f72565a0d30"
	"0x7f72565a0ba8" [label=Count]
	"0x7f72565a0d30" -> "0x7f72565a0ba8"
	"0x7f72565a0748" [label=5]
	"0x7f72565a0d30" -> "0x7f72565a0748"
	"0x7f725659aac8" [label=loop]
	"0x7f725659a9e8" -> "0x7f725659aac8"
	"0x7f725659a438" [label=statement_s]
	"0x7f725659aac8" -> "0x7f725659a438"
	"0x7f72565a0eb8" [label=statement_s]
	"0x7f725659a438" -> "0x7f72565a0eb8"
	"0x7f725659a9b0" [label=statement_s]
	"0x7f72565a0eb8" -> "0x7f725659a9b0"
	"0x7f72565a0f28" [label="Put(\"Count =\")"]
	"0x7f725659a9b0" -> "0x7f72565a0f28"
	"0x7f72565a0b70" [label=Put]
	"0x7f72565a0f28" -> "0x7f72565a0b70"
	"0x7f72565a0e80" [label="\"Count =\""]
	"0x7f72565a0f28" -> "0x7f72565a0e80"
	"0x7f72565a0cc0" [label="Put(Count,5)"]
	"0x7f725659a9b0" -> "0x7f72565a0cc0"
	"0x7f72565a07b8" [label=Put]
	"0x7f72565a0cc0" -> "0x7f72565a07b8"
	"0x7f725659a860" [label="Count,5"]
	"0x7f72565a0cc0" -> "0x7f725659a860"
	"0x7f72565a0f60" [label=Count]
	"0x7f725659a860" -> "0x7f72565a0f60"
	"0x7f72565a0c50" [label=5]
	"0x7f725659a860" -> "0x7f72565a0c50"
	"0x7f72565a0ef0" [label=New_Line]
	"0x7f72565a0eb8" -> "0x7f72565a0ef0"
	"0x7f725659ada0" [label=":="]
	"0x7f725659a438" -> "0x7f725659ada0"
	"0x7f72565a0f98" [label=Count]
	"0x7f725659ada0" -> "0x7f72565a0f98"
	"0x7f725659ae10" [label="+"]
	"0x7f725659ada0" -> "0x7f725659ae10"
	"0x7f725659ac88" [label=Count]
	"0x7f725659ae10" -> "0x7f725659ac88"
	"0x7f725659a898" [label=1]
	"0x7f725659ae10" -> "0x7f725659a898"
	"0x7f725659aef0" [label=LoopDemo]
	"0x7f72565a0a58" -> "0x7f725659aef0"
	"0x7f72565a0c18" [label=pragma_s]
	"0x7f725659add8" -> "0x7f72565a0c18"
}
